{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 James Couball's Tech Notes","text":"<p>Hello world!</p> <p>Select a document to view from the left navigation.</p>"},{"location":"#about-me","title":"About Me","text":""},{"location":"#work","title":"Work","text":"<p>I have worked for  Yahoo since 2004.</p> <p>As a Continuous Delivery Architect and Program Manager, I define enterprise transformation programs and write code to coalesce data from many different enterprise systems to track these programs.</p> <p>I also work with teams to help them implement their transformation goals.</p>"},{"location":"#github-stats","title":"GitHub Stats","text":""},{"location":"#open-source-contributions","title":"Open Source Contributions","text":"<p>I am the lead contributer or owner of the following gems:</p> Repository Project Description ruby-git/ruby-git The Ruby git gem Google API Helpers main-branch/discovery_v1 Unofficial helpers, extensions, and examples for the Google Discovery V1 API main-branch/drive_v3 Unofficial helpers, extensions, and examples for the Google Drive V3 API main-branch/sheets_v4 Unofficial helpers, extensions, and examples for the Google Sheets V4 API Continuous Integration Utilities main-branch/create_github_release A gem to manage releases of your gems including creating a release changelog as well as GitHub branch, PR, and release. main-branch/semverify A replacement for the bump gem that parses and compares semver versions AND increments versions for Ruby Gems main-branch/github_pages_rake_tasks Creates the rake task <code>github-pages:publish</code> which pushes the <code>doc</code> directory within the local copy of a repository to the same repository's <code>gh-pages</code> branch. Others main-branch/process_executer An API for executing commands in a subprocess main-branch/active_model_persistence A gem to add in-memory persistence to Models built with ActiveModel <p>I have also contributed to many OpenSource projects</p> My Contributions Project Description jira-ruby provides access to the Atlassian JIRA REST API JRuby an implementation of the Ruby programming language atop the Java Virtual Machine (JVM) mkdocs-material A Material Design theme for MkDocs Rubocop a Ruby code style checker and formatter based on the community-driven Ruby Style Guide Ruby Matz's Implementation of the Ruby programming language (aka MRI) TruffleRuby a GraalVM high-performance implementation of the Ruby programming language YARD a documentation generation tool for the Ruby programming language"},{"location":"#skills","title":"Skills","text":"<p>I am an expert with:</p> <ul> <li> Ruby</li> <li>   GitHub</li> <li>   Google Sheets</li> <li> SQL</li> </ul> <p>I am also proficient with:</p> <ul> <li> HTML</li> <li> CSS</li> <li> Javascript</li> <li> Python</li> </ul>"},{"location":"#fun-facts","title":"Fun Facts","text":"<p>I love to spend time with family, piano, guitar, and video games.</p>"},{"location":"documentation_standards/","title":"Documentation Standards","text":"<p>I follow these documentation standards:</p> <ul> <li>Google developer documentation guide</li> <li>Document command-line syntax</li> </ul>"},{"location":"homebrew/","title":"Homebrew Tips","text":"<p>Homebrew Documentation</p>"},{"location":"homebrew/#glossary","title":"Glossary","text":"<p>Homebrew Terminology</p>"},{"location":"homebrew/#formula","title":"Formula","text":"<p>Homebrew package definition built from upstream sources</p> <p>Formulae are the definitions of how to install the various command line packages/ applications available through Homebrew. These are the things that make brew install work.</p>"},{"location":"homebrew/#tap","title":"Tap","text":"<p>A directory (and usually Git repository) of formulae, casks and/or external commands</p> <p>The default tap is \u201chomebrew/core\u201d</p>"},{"location":"homebrew/#casks","title":"Casks","text":"<p>Essentially Casks are Homebrew packages for GUI applications. Casks allow you to leverage the command line to install applications such as Google Chrome and (at the time of writing) 3,381 other applications.</p>"},{"location":"homebrew/#brewfile","title":"Brewfile","text":"<p>Similar to Ruby's Gemfile (a way to list Ruby gems necessary for a project), a Brewfile allows you to list Homebrew packages, Casks, taps, and even App Store applications to install on your system.</p>"},{"location":"homebrew/#keg","title":"Keg","text":"<p>Installation destination directory of a given formula version e.g. <code>/usr/local/Cellar/foo/0.1</code></p>"},{"location":"homebrew/#rack","title":"Rack","text":"<p>A directory containing one or more versioned kegs e.g. <code>/usr/local/Cellar/foo</code></p>"},{"location":"homebrew/#keg-only","title":"Keg-only","text":"<p>A formula is keg-only if it is not symlinked into Homebrew\u2019s prefix (e.g. <code>/usr/local</code>)</p>"},{"location":"homebrew/#cellar","title":"Cellar","text":"<p>A directory containing one or more named racks e.g. <code>/usr/local/Cellar</code></p>"},{"location":"homebrew/#caskroom","title":"Caskroom","text":"<p>A directory containing one or more named casks e.g. <code>/usr/local/Caskroom</code></p>"},{"location":"homebrew/#external-command","title":"External command","text":"<p>A brew subcommand defined outside of the Homebrew/brew GitHub repository</p>"},{"location":"homebrew/#bottle","title":"Bottle","text":"<p>A pre-built keg poured into the cellar/rack instead of building from upstream sources</p>"},{"location":"homebrew/#list-formula","title":"List Formula","text":"<p><code>brew list</code></p>"},{"location":"homebrew/#install-formula","title":"Install Formula","text":"<p>How to Install an Older Brew Package</p>"},{"location":"homebrew/#uninstall-formula","title":"Uninstall Formula","text":""},{"location":"homebrew/#search-for-formula","title":"Search for Formula","text":"<p><code>brew search &lt;searchterm&gt;</code></p>"},{"location":"homebrew/#search-for-mac-apps","title":"Search for Mac Apps","text":"<p><code>mas search &lt;searchterm&gt;</code></p>"},{"location":"homebrew/#search-cask-tokens-and-formula-names","title":"Search Cask Tokens and Formula Names","text":""},{"location":"homebrew/#show-formula-information","title":"Show Formula Information","text":"<p><code>brew info ffmpeg</code></p>"},{"location":"homebrew/#show-dependency-tree-of-installed-formulas","title":"Show Dependency Tree of Installed Formulas","text":"<p><code>brew deps --tree --installed</code></p>"},{"location":"homebrew/#show-leaf-formulas-and-their-dependencies","title":"Show Leaf Formulas and their Dependencies","text":"<pre><code>brew leaves | xargs brew deps --installed --for-each | sed \"s/^.*:/$(tput setaf 4)&amp;$(tput sgr0)/\"\n</code></pre>"},{"location":"homebrew/#update-brew","title":"Update Brew","text":"<p>Update home-brew itself: <code>brew update</code></p> <p>Update all individual packagers and formula: <code>brew upgrade</code></p>"},{"location":"homebrew/#bundlebrewfile","title":"Bundle/Brewfile","text":"<p>Brew Bundle Brewfile Tips</p> <p>Create .Brewfile: <code>brew bundle dump --describe --global --all --force</code></p> <p>Install from .Brewfile: <code>brew bundle install --global</code></p>"},{"location":"homefiles/","title":"Home Files","text":"<p>Managing Mac/Linux home files</p>"},{"location":"homefiles/#homefiles-command","title":"<code>homefiles</code> command","text":"<p>See homefiles_setup</p> <p>Ignore all files by default:</p> <p><code>homefiles config --local status.showUntrackedFiles no</code></p>"},{"location":"homefiles/#links","title":"Links","text":"<ul> <li>Dotfiles: Best Way to Store in a Bare Git Repository</li> <li>The best way to store your dotfiles: A bare Git repository</li> <li>A Simple Approach to storing Home Directory Config Files (Dotfiles) in Git using Bash, Zsh, or Powershell, without a Bare Repo</li> <li>The Bare Repo Approach to Storing Home Directory Config Files (Dotfiles) in Git using Bash, Zsh, or Powershell</li> </ul>"},{"location":"homefiles/#shell-startup-files","title":"Shell Startup Files","text":""},{"location":"homefiles/#bash","title":"Bash","text":"<p>Bash startup files showing the order (A, B, etc.) which files are sourced depending on how the shell was run.</p> File InteractiveLogin Interactivenon-login Script STARTUP FILES \u2060 \u2060 \u2060 /etc/profile A -- -- /etc/bashrc -- A -- ~/.bashrc -- B -- ~/.bash_profile B1 -- -- ~/.bash_login B2 -- -- ~/.profile B3 -- -- BASH_ENV -- -- A SHUTDOWN FILES \u2060 \u2060 \u2060 ~/.bash_logout C -- -- <p>List all possible Bash dotfiles:</p> <pre><code>ll /etc/profile /etc/bashrc ~/.bashrc ~/.bash_profile ~/.bash_login ~/.profile ~/.bash_logout\n</code></pre> <p>On my system:</p> <ul> <li><code>/etc/profile</code> sources <code>/etc/bashrc</code> if not running bash</li> <li><code>/etc/bashrc</code> sources <code>/etc/bashrc_$TERM_PROGRAM</code> \u2014 there isn\u2019t one for iTerm.app</li> <li><code>~/.bashrc</code> sources <code>/etc/bashrc</code></li> <li><code>~/.bash_profile</code> sources <code>~/.bashrc</code></li> </ul>"},{"location":"homefiles/#z-shell","title":"Z Shell","text":"<p>Z Shell startup files showing the order (A, B, etc.) which files are sourced depending on how the shell was run.</p> File AlwaysSourced LoginShell InteractiveShell STARTUP FILES \u2060 \u2060 \u2060 /etc/zshenv X ~/.zshenv X /etc/zprofile X ~/.zprofile X /etc/zshrc X ~/.zshrc X /etc/zlogin X ~/.zlogin X SHUTDOWN FILES \u2060 \u2060 \u2060 ~/.zlogout I -- -- /etc/zlogout J -- -- <p>List all possible Z Shell dotfiles:</p> <pre><code>ll /etc/zshenv ~/.zshenv /etc/zprofile ~/.zprofile /etc/zshrc ~/.zshrc /etc/zlogin ~/.zlogin ~/.zlogout /etc/zlogout\n</code></pre> <p>On my system:</p> <ul> <li><code>/etc/zshrc</code> sources <code>/etc/zshrc_$TERM_PROGRAM</code> \u2014 there isn\u2019t one for iTerm.app</li> <li><code>~/.zshrc</code> sources <code>$ZSH/oh-my-zsh.sh</code></li> </ul>"},{"location":"mermaid/","title":"Mermaid","text":"<p>Mermaid is a JavaScript based diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.</p> <p>Using Mermaid for each GitHub diagrams in Markdown-ish code gives comprehensive Mermaid cheatsheets for each Mermaid graph type.</p> <p>This page includes Mermaid example diagrams.</p>"},{"location":"mermaid/#class-diagram","title":"Class Diagram","text":"<pre><code>---\ntitle: A Model of Online School\n---\nclassDiagram\n  title This is the Title\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()\n  }</code></pre>"},{"location":"mermaid/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<pre><code>---\ntitle: Invoicing Entity Relationship Diagram\n---\nerDiagram\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : has\n  CUSTOMER ||--o{ ORDER : places\n  CUSTOMER ||--o{ INVOICE : \"liable for\"\n  DELIVERY-ADDRESS ||--o{ ORDER : receives\n  INVOICE ||--|{ ORDER : covers\n  ORDER ||--|{ ORDER-ITEM : includes\n  PRODUCT-CATEGORY ||--|{ PRODUCT : contains\n  PRODUCT ||--o{ ORDER-ITEM : \"ordered in\"</code></pre>"},{"location":"mermaid/#flow-chart","title":"Flow Chart","text":"<p>A flowchart is a type of diagram that represents an algorithm, workflow or process. The flowchart shows the steps as boxes of various kinds, and their order by connecting the boxes with arrows. This diagrammatic representation illustrates a solution model to a given problem.</p> <pre><code>---\ntitle: Fix Error Flow Chart\n---\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"mermaid/#gaant-diagram","title":"Gaant Diagram","text":"<pre><code>---\ntitle: Transformation Gantt Chart\n---\ngantt\n  dateFormat  YYYY-MM-DD\n\n  section Transformation Work\n    Project Start:     milestone, m0, 2022-01-05, 0d\n    Feasibility Study: done,      task1, after m0, 2022-01-08\n    Real Work Begins:  milestone, m1, after task1, 0d\n    Design:            active,    tast2, 2022-01-09, 4d\n    Coding:                       task3, after tast2, 10d\n    Acceptance:        crit,      task4, after task3, 5d\n    Project End:       milestone, m2, after task4, 0d</code></pre>"},{"location":"mermaid/#gitgraph-diagram","title":"GitGraph Diagram","text":"<pre><code>---\ntitle: GitGraph Diagram\n---\n%%{init: { 'gitGraph': { 'mainBranchName': 'master'}} }%%\ngitGraph\n  commit\n  commit\n  branch develop\n  checkout develop\n  commit\n  commit\n  checkout master\n  merge develop\n  commit\n  commit</code></pre>"},{"location":"mermaid/#pie-chart","title":"Pie Chart","text":"<pre><code>---\ntitle: Pets Adopted by Volunteers\n---\npie\n  \"Dogs\" : 386\n  \"Cats\" : 85\n  \"Rats\" : 15</code></pre>"},{"location":"mermaid/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>---\ntitle: Sequence Diagram\n---\nsequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"mermaid/#state-diagram","title":"State Diagram","text":"<pre><code>---\ntitle: State Diagram\n---\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"mermaid/#mermaid-version","title":"Mermaid Version","text":"<pre><code>info</code></pre>"},{"location":"music_theory/","title":"Music Theory","text":""},{"location":"music_theory/#interval","title":"Interval","text":"<p>Intervals</p> <p>An interval in music is defined as a distance in pitch between any two notes.</p> <p>There are three characteristics of an interval:</p> <ul> <li>The distance of the interval</li> <li>The type of interval (the interval quality)</li> <li>Is the interval harmonic or melodic?</li> </ul>"},{"location":"music_theory/#interval-distance","title":"Interval Distance","text":"<p>The smallest possible interval (in western music anyway) is a semitone, or in the US it\u2019s called a half step. A semitone is the very next higher or lower note.</p> <p>The word \u2018semi\u2019 means half (it\u2019s the same semi that we get semiquaver from which is \u2018half\u2019 of a quaver) so we could think of the word semitone as \u2018half a tone\u2019.</p> <p>A tone or whole step, therefore, is an interval of two semitones.</p>"},{"location":"music_theory/#interval-number","title":"Interval Number","text":"<p>We describe intervals using numbers depending on how many letter names of the musical alphabet there are between the two notes.</p> <p>e.g. if we look at the notes C and E they are three letter notes apart and so this interval is a 3<sup>rd</sup>. C to Eb is also a 3<sup>rd</sup>.</p>"},{"location":"music_theory/#interval-quality","title":"Interval Quality","text":""},{"location":"music_theory/#perfect","title":"perfect","text":"<p>To be a perfect interval the upper note has to be in the major scale of the low note</p> <p>There are three intervals that are what we call perfect intervals: perfect 4<sup>th</sup>, perfect 5<sup>th</sup>, perfect 8ve</p> <p>For example C to F# is a 4<sup>th</sup> but is not a perfect 4<sup>th</sup> as F# is not in C major scale</p>"},{"location":"music_theory/#major","title":"major","text":"<ul> <li>There are four intervals that are called major intervals:<ul> <li>major 2<sup>nd</sup>, major 3<sup>rd</sup>, major 6<sup>th</sup>, and major 7<sup>th</sup></li> </ul> </li> <li>If the upper note of an interval is in the major scale of the lower note (and it\u2019s   not a 4<sup>th</sup>, 5<sup>th</sup> or 8ve) then it will be a major interval.</li> </ul> <ul> <li>augmented<ul> <li>An interval becomes augmented when we extend a major or perfect interval by one     semitone (half step) without changing the letter name.</li> <li>For example, given a major 2<sup>nd</sup> like F to G, change the G to G# to make an augmented     2<sup>nd</sup>.</li> <li>For example, given a perfect 5<sup>th</sup> like F to C, change the C to C# to make an     augmented 5<sup>th</sup>.</li> </ul> </li> </ul> <ul> <li>minor<ul> <li>Any major interval made smaller by one semitone is a minor interval</li> <li>For example, if we took C to E which is a major 3<sup>rd</sup> and flattened the E to make it     an Eb, it now becomes a minor 3<sup>rd</sup>.</li> <li>Because there are only four major intervals there are also only four minor intervals:</li> <li>minor 2<sup>nd</sup>, minor 3<sup>rd</sup>, minor 6<sup>th</sup>, minor 7<sup>th</sup></li> </ul> </li> </ul> <ul> <li>diminished<ul> <li>Flatten any of the three perfect intervals (the 4<sup>th</sup>, 5<sup>th</sup> or 8ve) or any minor     interval (minor 2<sup>nd</sup>, minor 3<sup>rd</sup>, minor 6<sup>th</sup>, or minor 7<sup>th</sup>) by a semitone, to make a     diminished interval.</li> <li>For example, given A and D which is a perfect 4<sup>th</sup>, flatten the D to Db to make it a     diminished 4<sup>th</sup>.</li> <li>For example, given E and D which is a minor 7<sup>th</sup>, flatten D to Db to make it a     diminished 7<sup>th</sup>.</li> </ul> </li> </ul>"},{"location":"music_theory/#interval-chart","title":"Interval Chart","text":"Semitones Interval Abbreviation Example 0 Unison PP or P1 C \u2013 C 1 Minor 2<sup>nd</sup> m2 C \u2013 Db 2 Major 2<sup>nd</sup> M2 C \u2013 D 3 Augmented 2<sup>nd</sup> A2 C \u2013 D# 3 Minor 3<sup>rd</sup> m3 C \u2013 Eb 4 Major 3<sup>rd</sup> M3 C \u2013 E 4 Diminished 4<sup>th</sup> D4 C \u2013 Fb 5 Perfect 4<sup>th</sup> P4 C \u2013 F 6 Augmented 4<sup>th</sup> A4 C \u2013 F# 6 Diminished 5<sup>th</sup> D5 C \u2013 Gb 7 Perfect 5<sup>th</sup> P5 C \u2013 G 8 Augmented 5<sup>th</sup> A5 C \u2013 G# 8 Minor 6<sup>th</sup> m6 C \u2013 Ab 9 Major 6<sup>th</sup> M6 C \u2013 A 10 Minor 7<sup>th</sup> m7 C \u2013 Bb 11 Major 7<sup>th</sup> M7 C \u2013 B 12 Perfect 8ve P8 C \u2013 C"},{"location":"music_theory/#compound-intervals","title":"Compound Intervals","text":"<p>A compound interval is any musical interval that is larger than an octave as opposed a simple interval which spans less than an octave.</p> <p>For intervals larger than an octave, just repeat the simple interval adding '7'.</p> <p>For example, C to E is a major 3d and C to E an octave above is a major 10<sup>th</sup>.</p>"},{"location":"music_theory/#harmonic-intervals","title":"Harmonic Intervals","text":"<p>Harmonic intervals are how we describe two notes that are played, at the same time.</p>"},{"location":"music_theory/#melodic-intervals","title":"Melodic Intervals","text":"<p>The opposite of a harmonic interval is a melodic interval which is where the two notes are played one after the other.</p>"},{"location":"music_theory/#scale","title":"Scale","text":"<p>Music Scales Beginners Guide</p> <p>A scale is a group of notes that are arranged by ascending or descending order of pitch.</p> <p>There are many different musical scales.</p> <p>Each scale uses a different formula of intervals and has a completely different sound and feel. Some sound happy, some sound mysterious and some sound sad or melancholy.</p>"},{"location":"music_theory/#scale-degree","title":"Scale Degree","text":"<p>Each notes in a scale are know as degrees. A scale has 7 degrees named as follows:</p> <ul> <li>1<sup>st</sup> degree: the tonic</li> <li>2<sup>nd</sup> degree: the supertonic (above the tonic)</li> <li>3<sup>rd</sup> degree: the mediant (middle of a triad chord, a 3<sup>rd</sup> above the tonic)</li> <li>4<sup>th</sup> degree: the subdominant (a 5<sup>th</sup> below the tonic)</li> <li>5<sup>th</sup> degree: the dominant (a 5<sup>th</sup> above the tonic)</li> <li>6<sup>th</sup> degree: the submediant (a 3<sup>rd</sup> below the tonic)</li> <li>7<sup>th</sup> degree: the leading note (or leading tone)</li> </ul> <p>The natural minor scale is different: the 7<sup>th</sup> degree of the scale is an interval of a tone (whole step) below the tonic instead of a semitone (half step) like the leading note. For this reason a flattened 7<sup>th</sup> note is called the subtonic.</p> <p>Triad Chord</p> <p>When building a triad chord we use three notes: the 1<sup>st</sup>, 3<sup>rd</sup> and 5<sup>th</sup> degrees of the scale.</p>"},{"location":"music_theory/#major-scale","title":"Major Scale","text":"<p>Major scales are defined by their combination of semitones and tones (whole steps and half steps):</p> <p>Tone \u2013 Tone \u2013 Semitone \u2013 Tone \u2013 Tone \u2013 Tone \u2013 Semitone</p> <p>Or in whole steps and half steps it would be:</p> <p>Whole \u2013 Whole \u2013 Half \u2013 Whole \u2013 Whole \u2013 Whole \u2013 Half</p> <p></p>"},{"location":"music_theory/#minor-scales","title":"Minor Scales","text":"<p>Minor scales also have seven notes like the major scale but they\u2019re defined by having a flattened third. This means that the third note is lowered by one semitone or half step.</p> <p>Unlike the major scales where there is only variation, there are three different minor scales: natural, harmonic, and melodic.</p>"},{"location":"music_theory/#the-natural-minor","title":"The Natural Minor","text":"<p>A natural minor scale uses this formula of tones and semitones (whole steps and half steps).</p> <p>T \u2013 S \u2013 T \u2013 T \u2013 S \u2013 T \u2013 T</p> <p>Or in whole steps and half steps it would be:</p> <p>W \u2013 H \u2013 W \u2013 W \u2013 H \u2013 W \ufeff\u2013 W</p> <p></p>"},{"location":"music_theory/#the-harmonic-minor","title":"The Harmonic Minor","text":"<p>Harmonic minors use this combination of tones and semitones:</p> <p>T \u2013 S \u2013 T \u2013 T \u2013 S \u2013 T1\u20442 \u2013 S</p> <p>Or in whole steps and half steps it would be:</p> <p>W \u2013 H \u2013 W \u2013 W \u2013 H \u2013 W1\u20442 \u2013 H</p> <p>Note that harmonic minors have an interval that is a tone and a half or three semitones.</p> <p></p> <p>The harmonic minor is very similar to the natural minor. The only difference is that the 7<sup>th</sup> degree of the scale is one semitone higher.</p>"},{"location":"music_theory/#the-melodic-minor","title":"The Melodic Minor","text":"<p>Melodic minor scales are quite different from natural and harmonic minors as they use different notes when ascending (going up) and descending (going down).</p> <p>Ascending melodic minors use this combination of tones and semitones:</p> <p>T \u2013 S \u2013 T \u2013 T \u2013 T \u2013 T \u2013 S</p> <p>Or in whole steps and half steps:</p> <p>W \u2013 H \u2013 W \u2013 W \u2013 W \u2013 W \u2013 H</p> <p>But on the way down they use this combination (from the top down):</p> <p>T \u2013 T \u2013 S \u2013 T \u2013 T \u2013 S \u2013 T</p> <p>Or in whole steps and half steps</p> <p>W \u2013 W \u2013 H \u2013 W \u2013 W \u2013 H \u2013 W</p> <p>A melodic minor ascending is:</p> <p></p> <p>When descending the 6<sup>th</sup> and 7<sup>th</sup> notes are lowered by one semitone.</p>"},{"location":"music_theory/#diatonic-vs-chromatic-scales","title":"Diatonic vs. Chromatic Scales","text":"<p>The Major Scale and Minor Scales are diatonic scales. A diatonic scale is a type of music scale with seven notes (also called a heptonic scale).</p> <p>A diatonic scale use all seven pitch letter names (A, B, C, D etc) in sequence without skipping any.</p>"},{"location":"music_theory/#whole-tone-scale","title":"Whole Tone Scale","text":""},{"location":"music_theory/#pentatonic-scale","title":"Pentatonic Scale","text":""},{"location":"music_theory/#modes","title":"Modes","text":"<p>Learn Modes=</p> <p>Modes, which are sometimes called the church modes, are a series of seven musical scales each with their own unique qualities and sound.</p> <p>These seven scales are all types of diatonic scale which means they have seven notes and have two intervals that are semitones (half steps) and five intervals that are tones (whole steps).</p> <p>There are seven types of modes:</p> <ul> <li>Ionian mode</li> <li>Dorian mode</li> <li>Phrygian mode</li> <li>Lydian mode</li> <li>Mixolydian mode</li> <li>Aeolian mode</li> <li>Locrian mode</li> </ul> <p>We can also categories these seven modes into two types, major modes and minor modes.</p> <p>Major modes are major because the third note in their scale is a major 3<sup>rd</sup> above the tonic and the minor modes are minor as the third note in their scale is a minor third above the tonic.</p> <p>The three major modes are: Ionian, Lydian and Mixolydian and the four minor modes are: Dorian, Phrygian, Aeolian and Locrian.</p> <p>Each mode is formed starting at a different point in the major scale formula:</p> <p></p> <p>Ionian is the regular major scale.</p> <p>Aeolian is the natural minor scale.</p>"},{"location":"ssl_tls/","title":"SSL/TLS Certificates","text":"<p>X.509 is an ITU standard defining the format of public key certificates. X.509 are used in TLS/SSL, which is the basis for HTTPS. An X.509 certificate binds an identity to a public key using a digital signature. A certificate contains an identity (hostname, organization, etc.) and a public key (RSA, DSA, ECDSA, ed25519, etc.), and is either signed by a Certificate Authority or is Self-Signed.</p> <ul> <li>Self-Signed Certificates<ul> <li>Generate CA</li> <li>Optional Stage: View Certificate's Content</li> <li>Generate Certificate</li> </ul> </li> <li>Certificate Formats<ul> <li>Convert Certs</li> </ul> </li> <li>Verify Certificates</li> <li>Install the CA Cert as a trusted root CA<ul> <li>On Android</li> <li>On Arch</li> <li>On Debian and Derivatives</li> <li>On Fedora</li> <li>On iOS</li> <li>On macOS</li> <li>On Windows</li> </ul> </li> </ul>"},{"location":"ssl_tls/#self-signed-certificates","title":"Self-Signed Certificates","text":""},{"location":"ssl_tls/#generate-ca","title":"Generate CA","text":"<ol> <li>Generate RSA</li> </ol> <pre><code>openssl genrsa -aes256 -out ca-key.pem 4096\n</code></pre> <ol> <li>Generate a public CA Cert</li> </ol> <pre><code>openssl req -new -x509 -sha256 -days 365 -key ca-key.pem -out ca.pem\n</code></pre>"},{"location":"ssl_tls/#optional-stage-view-certificates-content","title":"Optional Stage: View Certificate's Content","text":"<pre><code>openssl x509 -in ca.pem -text\nopenssl x509 -in ca.pem -purpose -noout -text\n</code></pre>"},{"location":"ssl_tls/#generate-certificate","title":"Generate Certificate","text":"<ol> <li>Create a RSA key</li> </ol> <pre><code>openssl genrsa -out cert-key.pem 4096\n</code></pre> <ol> <li>Create a Certificate Signing Request (CSR)</li> </ol> <pre><code>openssl req -new -sha256 -subj \"/CN=yourcn\" -key cert-key.pem -out cert.csr\n</code></pre> <ol> <li>Create a <code>extfile</code> with all the alternative names</li> </ol> <pre><code>echo \"subjectAltName=DNS:your-dns.record,IP:257.10.10.1\" &gt;&gt; extfile.cnf\n</code></pre> <pre><code># optional\necho extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf\n</code></pre> <ol> <li>Create the certificate</li> </ol> <pre><code>openssl x509 -req -sha256 -days 365 -in cert.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf -CAcreateserial\n</code></pre>"},{"location":"ssl_tls/#certificate-formats","title":"Certificate Formats","text":"<p>X.509 Certificates exist in Base64 Formats PEM (.pem, .crt, .ca-bundle), PKCS#7 (.p7b, p7s) and Binary Formats DER (.der, .cer), PKCS#12 (.pfx, p12).</p>"},{"location":"ssl_tls/#convert-certs","title":"Convert Certs","text":"COMMAND CONVERSION <code>openssl x509 -outform der -in cert.pem -out cert.der</code> PEM to DER <code>openssl x509 -inform der -in cert.der -out cert.pem</code> DER to PEM <code>openssl pkcs12 -in cert.pfx -out cert.pem -nodes</code> PFX to PEM"},{"location":"ssl_tls/#verify-certificates","title":"Verify Certificates","text":"<p><code>openssl verify -CAfile ca.pem -verbose cert.pem</code></p>"},{"location":"ssl_tls/#install-the-ca-cert-as-a-trusted-root-ca","title":"Install the CA Cert as a trusted root CA","text":""},{"location":"ssl_tls/#on-android","title":"On Android","text":"<p>The exact steps vary device-to-device, but here is a generalised guide:</p> <ol> <li>Open Phone Settings</li> <li>Locate <code>Encryption and Credentials</code> section. It is generally found under `Settings <p>Security &gt; Encryption and Credentials`</p> </li> <li>Choose <code>Install a certificate</code></li> <li>Choose <code>CA Certificate</code></li> <li>Locate the certificate file <code>ca.pem</code> on your SD Card/Internal Storage using the    file manager.</li> <li>Select to load it.</li> <li>Done!</li> </ol>"},{"location":"ssl_tls/#on-arch","title":"On Arch","text":"<p>System-wide \u2013 Arch(p11-kit) (From arch wiki)</p> <ul> <li>Run (As root)</li> </ul> <pre><code>trust anchor --store myCA.crt\n</code></pre> <ul> <li>The certificate will be written to /etc/ca-certificates/trust-source/myCA.p11-kit   and the \"legacy\" directories automatically updated.</li> <li>If you get \"no configured writable location\" or a similar error, import the CA   manually:</li> <li>Copy the certificate to the /etc/ca-certificates/trust-source/anchors directory.</li> <li>and then</li> </ul> <pre><code>update-ca-trust\n</code></pre> <p>wiki page  here</p>"},{"location":"ssl_tls/#on-debian-and-derivatives","title":"On Debian and Derivatives","text":"<ul> <li>Move the CA certificate (<code>ca.pem</code>) into <code>/usr/local/share/ca-certificates/ca.crt</code>.</li> <li>Update the Cert Store with:</li> </ul> <pre><code>sudo update-ca-certificates\n</code></pre> <p>Refer the documentation here and here.</p>"},{"location":"ssl_tls/#on-fedora","title":"On Fedora","text":"<ul> <li>Move the CA certificate (<code>ca.pem</code>) to <code>/etc/pki/ca-trust/source/anchors/ca.pem</code> or <code>/usr/share/pki/ca-trust-source/anchors/ca.pem</code></li> <li>Now run (with sudo if necessary):</li> </ul> <pre><code>update-ca-trust\n</code></pre> <p>Refer the documentation here.</p>"},{"location":"ssl_tls/#on-ios","title":"On iOS","text":"<p>Apple makes this far more difficult than it should be:</p> <ol> <li>Send <code>ca.pem</code> to the iOS device through iCloud, AirDrop, or a direct download from    your server.</li> <li>After downloading a dialog will appear on screen telling you that the profile has    been downloaded.</li> <li>Open the Settings app, and a <code>Profile Downloaded</code> item will be at the top. If it    is not there you may find it in <code>General \u2192 VPN &amp; Device Management</code>.</li> <li>Click <code>Install</code>.</li> <li>The device will ask for your passcode. Enter it.</li> <li>The device will then warn you about the certificate. Click <code>Install</code> again.</li> <li>And, as if clicking <code>Install</code> twice wasn't enough a confirmation button will    appear at the bottom of the screen. Click <code>Install</code> one last time.</li> <li>Done!</li> </ol>"},{"location":"ssl_tls/#on-macos","title":"On macOS","text":"<p>Assuming the path to your generated CA certificate is <code>~/ca.pem</code>, run (as root):</p> <pre><code>security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/ca.pem\n</code></pre> <p>A dialog box will appear asking for an administrator's username and password. Enter it, and it will be stored in the system keychain. This can be verified by opening the <code>Keychain Access</code> application (<code>/Applications/Utilities/Keychain Access.app</code>). On the sidebar under <code>System Keychains</code> select <code>System</code>, and the new certificate should be listed.</p>"},{"location":"ssl_tls/#on-windows","title":"On Windows","text":"<p>Assuming the path to your generated CA certificate as <code>C:\\ca.pem</code>, run:</p> <pre><code>Import-Certificate -FilePath \"C:\\ca.pem\" -CertStoreLocation Cert:\\LocalMachine\\Root\n</code></pre> <ul> <li>Set <code>-CertStoreLocation</code> to <code>Cert:\\CurrentUser\\Root</code> in case you want to trust   certificates only for the logged in user.</li> </ul> <p>OR</p> <p>In Command Prompt, run:</p> <pre><code>certutil.exe -addstore root C:\\ca.pem\n</code></pre> <ul> <li><code>certutil.exe</code> is a built-in tool (classic <code>System32</code> one) and adds a system-wide trust anchor.</li> </ul>"},{"location":"vscode/","title":"Visual Studio Code","text":""},{"location":"vscode/#debugging","title":"Debugging","text":""},{"location":"vscode/#tasks","title":"Tasks","text":"<p>Note that <code>shell</code> tasks are alway run in a non-interactive shell even if you try to force giving the <code>--interactive</code> arg to the shell. In this example, system ruby is run instead of the ruby installed in my user account using <code>asdf</code>. This is because I have configured <code>asdf</code> in my <code>.zshrc</code> was not sourced.</p> <pre><code>{\n  \"type\": \"shell\",\n  \"label\": \"\",\n  \"options\": {\n    \"shell\": {\n      \"executable\": \"/bin/zsh\",\n      \"args\": [\"--login\", \"--interactive\", \"-c\"]\n    }\n  },\n  \"command\": \"ruby --version\"\n}\n</code></pre> <p>To see the ruby in my account, I found that either sourcing <code>.zshrc</code> works:</p> <pre><code>  \"command\": \"source ~/.zshrc &amp;&amp; ruby --version\"\n</code></pre> <p>or running a subshell passing the interactive and login args:</p> <pre><code>  \"command\": \"zsh --login --interactive -c -- ruby --version\"\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/","title":"Guidelines for Prompting","text":""},{"location":"ai/chatgpt_prompt_engineering_for_developers/#principle-1-write-clear-and-specific-instructions","title":"Principle 1: Write clear and specific instructions**","text":""},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-1-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input","title":"Tactic 1: Use delimiters to clearly indicate distinct parts of the input","text":"<p>Delimiters can be anything like: <code>``, \"\"\", &lt; &gt;,</code> <code>,</code>:`</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-2-ask-for-a-structured-output","title":"Tactic 2: Ask for a structured output","text":"<p>For instance, ask for JSON, HTML, Markdown, etc.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-3-ask-the-model-to-check-whether-conditions-are-satisfied","title":"Tactic 3: Ask the model to check whether conditions are satisfied","text":"<p>For example: \"If the text does not contain a sequence of instructions, then simply write 'No steps provided.'\"</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-4-few-shot-prompting","title":"Tactic 4: \"Few-shot\" prompting","text":"<p>Example:</p> <pre><code>Your task is to answer in a consistent style.\n\n&lt;child&gt;: Teach me about patience.\n\n&lt;grandparent&gt;: The river that carves the deepest \\\nvalley flows from a modest spring; the \\\ngrandest symphony originates from a single note; \\\nthe most intricate tapestry begins with a solitary thread.\n\n&lt;child&gt;: Teach me about resilience.\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#principle-2-give-the-model-time-to-think","title":"Principle 2: Give the model time to \u201cthink\u201d","text":""},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-1-specify-the-steps-required-to-complete-a-task","title":"Tactic 1: Specify the steps required to complete a task","text":""},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tactic-2-instruct-the-model-to-work-out-its-own-solution-before-rushing-to-a-conclusion","title":"Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion","text":""},{"location":"ai/chatgpt_prompt_engineering_for_developers/#model-limitations-hallucinations","title":"Model Limitations: Hallucinations","text":"<p>ChatGPT might try to answer questions about obscure topics and can make things up that sound plausible but are not actually true. This kinds of fabricated ideas are called hallucinations.</p> <p>In this example, Boie is a real company, the product name is not real:</p> <pre><code>Tell me about AeroGlide UltraSlim Smart Toothbrush by Boie\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#iterative-prompt-develelopment","title":"Iterative Prompt Develelopment","text":"<p>In this lesson, you'll iteratively analyze and refine your prompts to generate marketing copy from a product fact sheet.</p> <pre><code>---\ntitle: Iterative Prompt Development\n---\ngraph LR\n  A[Idea] --&gt; B[Implementation];\n  B --&gt; C[Experimental Result];\n  C --&gt; D[Error Analysis];\n  D --&gt; A;</code></pre> <p>Prompt development is an interative process where you 1. try something 2. analyze where the result did not give you what you want 3. clarify the instructions and/or give the model more time to think 4. Refine prompts with a batch of examples</p> <p>The key to being an effective prompt engineer isn't about knowing the perfect prompt. It is about having a good process to develop prompts that are effective for your application.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#summarizing","title":"Summarizing","text":"<p>You can summarize articles so you have time to read many more articles.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#summarize-with-a-wordsentencecharacter-count","title":"Summarize with a word/sentence/character count","text":"<p>Example using the browser plugin using ChatGPT 4:</p> <pre><code>Summarize the review at the URL that follows in at most 200 words:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#summarize-with-a-particular-focus","title":"Summarize with a particular focus","text":"<p>Focus the summary on what is more relevant to you.</p> <pre><code>Summarize the review at the URL that follows in at most 200 words focusing on the details of the charges against Trump:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#try-extract-instead-of-summarize","title":"Try \"extract\" instead of \"summarize\"","text":"<p>Extract exact information rather than producing a summary.</p> <pre><code>Extract the number of charges against Trump in the following article:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#inferring","title":"Inferring","text":"<p>Infer sentiment and topics from product reviews and news articles.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#sentiment-positivenegative","title":"Sentiment (positive/negative)","text":"<pre><code>What is the sentiment of the following article:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#identify-types-of-emotions","title":"Identify types of emotions","text":"<pre><code>Identify a list of emotions that the writer of the following review is expressing. Include no more than five items in the list. Format the result as a markdown list.\n\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#identify-bias","title":"Identify bias","text":"<pre><code>Read the following article and identify the bias shown by the author:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#identify-anger","title":"Identify anger","text":"<pre><code>Read the following article and tell me if the writer is expressing anger:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#extract-specific-information","title":"Extract specific information","text":"<pre><code>Identify the name of Trump's lawyer given in the following article:\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#infer-topics","title":"Infer topics","text":"<pre><code>Determine five topics that are being discussed in the following article.\n\nMake each item one or two words long.\n\nFormat your response as a list of items separated by commas.\n\nhttps://www.cnn.com/2023/06/10/politics/takeaways-trump-nauta-indictment/index.html\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#make-a-new-alert-for-certain-topics","title":"Make a new alert for certain topics","text":"<pre><code>List the top news stories about former president Donald Trump that appear on the CNN home page at https://cnn.com. Format the results as a markdown list where each list item is a link to the article.\n</code></pre> <pre><code>List the top articles about the Apple Vision Pro that appear on the Ars Technica home page at https://arstechnica.com. Format the result as a markdown list of articles where each list item is a link to the article.\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#transforming","title":"Transforming","text":"<p>Large language models are very good at transforming its input to a different format, such as inputting a piece of text in one language and transforming it or translating it to a different language, or helping with spelling and grammar corrections.</p> <p>This makes it great for use as a proof-reader.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#translation","title":"Translation","text":"<p>Translate text:</p> <pre><code>Translate the following English text to Spanish:\n\"Hi, I would like to order a hamberger and french fries\"\n</code></pre> <p>Determine the language of given text:</p> <pre><code>Tell me which language this is:\n\"Combien co\u00fbte le lampadaire?\"\n\nMultiple translations at once:\n\n```text\nTranslate the following  text to French and Spanish\nand English pirate:\n\"Hi, I would like to order a hamberger and french fries\"\n</code></pre> <pre><code>Translate the following text to Spanish in both the formal\nand informal forms:\n\"Would you like to order a hamberger and french fries?\"\n</code></pre> <pre><code>How would Yoda say \"Hi, I would like to order a hamburger and french fries\"\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#universal-translator","title":"Universal translator","text":"<p>Imagine you are in charge of IT at a large multinational e-commerce company. Users are messaging you with IT issues in all their native languages. Your staff is from all over the world and speaks only their native languages. You need a universal translator!</p> <pre><code>user_messages = [\n  \"La performance du syst\u00e8me est plus lente que d'habitude.\",  # System performance is slower than normal\n  \"Mi monitor tiene p\u00edxeles que no se iluminan.\",              # My monitor has pixels that are not lighting\n  \"Il mio mouse non funziona\",                                 # My mouse is not working\n  \"M\u00f3j klawisz Ctrl jest zepsuty\",                             # My keyboard has a broken control key\n  \"\u6211\u7684\u5c4f\u5e55\u5728\u95ea\u70c1\"                                               # My screen is flashing\n]\n</code></pre> <pre><code>for issue in user_messages:\n    prompt = f\"Tell me what language this is: ```{issue}```\"\n    lang = get_completion(prompt)\n    print(f\"Original message ({lang}): {issue}\")\n\n    prompt = f\"\"\"\n    Translate the following  text to English \\\n    and Korean: ```{issue}```\n    \"\"\"\n    response = get_completion(prompt)\n    print(response, \"\\n\")\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#tone-translation","title":"Tone translation","text":"<p>What is tone in writing? Tone in writing is the attitude your words employ. Just like tone of voice, tone in writing gives much more context beyond the words used. It can reveal intention or conceal it.</p> <p>Writing can vary based on the intended audience. ChatGPT can produce different tones.</p> <pre><code>Translate the following from slang to a business letter:\n\nHey man, what the heck is going on with the Browser project. It looks like it is\nhella late so I wanted to get the 411 from you before I blast that status to the\ncompany.\n</code></pre> <p>15 Types of Tone You Can Use in Your Writing</p> <p>Honing your prose style depends on what effect you wish to achieve. What tone do you want to set? What feelings or mood do you want to evoke? What kind of language will best deliver the story you want to tell? Many words can be used to describe an author\u2019s tone. If you\u2019re writing a novel, short story, or poem, you might consider your tone to be one or more of the following:</p> <ol> <li>Cheerful</li> <li>Dry</li> <li>Assertive</li> <li>Puckish</li> <li>Lighthearted</li> <li>Facetious</li> <li>Regretful</li> <li>Humorous</li> <li>Pessimistic</li> <li>Nostalgic</li> <li>Joyful</li> <li>Sarcastic</li> <li>Persuasive</li> <li>Uneasy</li> <li>Inspirational</li> </ol>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#format-conversion","title":"Format conversion","text":"<p>ChatGPT can translate between formats. The prompt should describe the input and output formats.</p> <pre><code>Output the following JSON into an HTML table with column headerss and title:\n\n[\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"joinDate\": \"2023-01-02\"\n  },\n  {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"joinDate\": \"2022-06-15\"\n  },\n  {\n    \"firstName\": \"Mike\",\n    \"lastName\": \"Johnson\",\n    \"joinDate\": \"2021-12-25\"\n  }\n]\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#spell-check-grammer-check","title":"Spell check / grammer check","text":"<p>To signal to the LLM that you want it to proofread your text, you instruct the model to 'proofread' or 'proofread and correct'.</p> <pre><code>Proofread and correct the each of the following quoted lines of text and rewrite\nthe corrected version. If you don't find and errors, just say \"No errors found\".\nDon't use any punctuation around the text:\n\n\"The girl with the black and white puppies have a ball.\",  # The girl has a ball.\n\"Yolanda has her notebook.\", # ok\n\"Its going to be a long day. Does the car need it\u2019s oil changed?\",  # Homonyms\n\"Their goes my freedom. There going to bring they\u2019re suitcases.\",  # Homonyms\n\"Your going to need you\u2019re notebook.\",  # Homonyms\n\"That medicine effects my ability to sleep. Have you heard of the butterfly affect?\", # Homonyms\n\"This phrase is to cherck chatGPT for speling abilitty\"  # spelling\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#expanding","title":"Expanding","text":"<p>Expanding is the task of taking a shorter piece of text, such as a set of instructions or a list of topics, and having the large language model generate a longer piece of text, such as an email or an essay about some topic.</p>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#automated-reply-to-a-customer-email","title":"Automated reply to a customer email","text":"<pre><code>You are a customer service AI assistant. Your task is to send an email reply to a\nvalued customer. Given the customer email delimited by ---, Generate a reply to thank\nthe customer for their review. If the sentiment is positive or neutral, thank them\nfor their review. If the sentiment is negative, apologize and suggest that they can\nreach out to customer service. Make sure to use specific details from the review.\nWrite in a concise and professional tone. Sign the email as `AI customer agent`.\n\n---\nSo, they still had the 17 piece system on seasonal sale for around $49 in the month\nof November, about half off, but for some reason (call it price gouging) around the\nsecond week of December the prices all went up to about anywhere from between $70-$89\nfor the same system. And the 11 piece system went up around $10 or so in price also\nfrom the earlier sale price of $29. So it looks okay, but if you look at the base,\nthe part where the blade locks into place doesn\u2019t look as good as in previous\neditions from a few years ago, but I plan to be very gentle with it (example, I crush\nvery hard items like beans, ice, rice, etc. in the blender first then pulverize them\nin the serving size I want in the blender then switch to the whipping blade for a\nfiner flour, and use the cross cutting blade first when making smoothies, then use\nthe flat blade if I need them finer/less pulpy). Special tip when making smoothies,\nfinely cut and freeze the fruits and vegetables (if using spinach-lightly stew soften\nthe spinach then freeze until ready for use-and if making sorbet, use a small to\nmedium sized food processor) that you plan to use that way you can avoid adding so\nmuch ice if at all-when making your smoothie. After about a year, the motor was\nmaking a funny noise. I called customer service but the warranty expired already, so\nI had to buy another one. FYI: The overall quality has gone done in these types of\nproducts, so they are kind of counting on brand recognition and consumer loyalty to\nmaintain sales. Got it in about two days.\n---\n</code></pre> <p>Another possibility:</p> <pre><code>You are a customer service AI assistant. Your task is to send an email reply to a\nvalued customer. Given the customer email delimited by ---, generate 3 possible\nemails responses each with a different tone to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for their review. If the\nsentiment is negative, apologize and suggest that they can reach out to customer\nservice. Make sure to use specific details from the review. Sign the email as `AI\ncustomer agent`.\n</code></pre>"},{"location":"ai/chatgpt_prompt_engineering_for_developers/#remind-the-model-to-use-details-from-the-customers-email","title":"Remind the model to use details from the customer's email","text":""},{"location":"ai/getting_started_on_prompt_engineering/","title":"Getting Started on Prompt Engineering with Generative AI","text":""},{"location":"ai/getting_started_on_prompt_engineering/#module-1-course-overview","title":"Module 1: Course Overview","text":"<p>Prompt Engineering: The art and science of designing effective queries or instructions to get desired responses.</p> <p>In other words: asking better questions to get better answers.</p> <p>The output is only as good as the input.</p> <p>What you will learn in this course:</p> <ul> <li>Foundation understanding</li> <li>Different types of prompts</li> <li>More advanced techniques</li> <li>Ethical consideration</li> <li>Best practrices</li> </ul> <p>By the end of this course you'll have the skills and knowledge of prompt engineering to get more from your generative AI models.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#module-2-introduction-to-prompt-engineering","title":"Module 2: Introduction to Prompt Engineering","text":""},{"location":"ai/getting_started_on_prompt_engineering/#a-look-at-prompts-in-the-real-world","title":"A Look at Prompts in the Real World","text":"<p>(conversation with a friend about what to get for dinner) (lots of questions back and forth)</p>"},{"location":"ai/getting_started_on_prompt_engineering/#what-is-prompt-engineering","title":"What is Prompt Engineering","text":"<p>What is a prompt?</p> <p>The input you give to get a desired output.</p> <p>What is prompt engineering?</p> <p>A lot of context setting was needed to get to a good answer.</p> <p>Use prompt engineering to get more precise, creative, and domain-specific answers AND eliminate some common challenges.</p> <p>Common Challenges</p> <ul> <li>Model bias: AI is trained on information from the internet which contains a lot   of bias.</li> <li>Unpredictability: generative AI is taking informed guesses as to what comes   next. Those guesses can be unpredictable. Giving more context will help get the   answer you are looking for.</li> <li>Lack of real-world knowledge: models do not have real world experience or   knowledge to draw from.</li> <li>Language and cultural nuances: models may not understand idioms and colloquial   language which can lead to unexpected results</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#what-you-will-learn-in-this-course","title":"What You Will Learn in this Course","text":"<p>Course overview</p> <ul> <li>Introduction to prompt engineering</li> <li>Creating effective prompts</li> <li>Evaluating prompt performance</li> <li>Using advanced prompt techniques</li> <li>Ethical considerations</li> <li>Best practices and Future Directions</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#module-3-creating-effective-prompts","title":"Module 3: Creating Effective Prompts","text":""},{"location":"ai/getting_started_on_prompt_engineering/#the-anatomy-of-a-prompt","title":"The Anatomy of a Prompt","text":"<ul> <li>Persona: What role should the model play? e.g. respond a scientist or a software engineer.</li> <li>Instructions: What should the model do? This typically starts wiht an action word. The heart of the prompt. Should be clear and concise.</li> <li>Input Content: Text to be processed by the model. e.g. could be a piece of text to summarize or extract from.</li> <li>Format: Requirements around format for the output, if any. e.g. you want results in a CSV format or markdown format. Or you want a formal report.</li> <li>Additional Information: Any other helpful context or background or constraints.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#interfaces-for-prompting","title":"Interfaces for Prompting","text":"<ul> <li>Microsfot Bing</li> <li>OpenAI ChatGPT/Playground</li> <li>Google Bard</li> </ul> <p>OpenAI Playground offers more parameters and features to make it easier to get the output you are looking for.</p> <p>Modes:</p> <p>Determines which parameters are available to you.</p> <ul> <li>Chat: access to newer models</li> <li>Complete (Legacy): some of the older models</li> </ul> <p>Input</p> <ul> <li>System: you give the persona and background</li> <li>User: where you give the instructions and other prompt parts</li> </ul> <p>Parameters:</p> <ul> <li>Temperature: how variable or creative the response is.</li> <li>Maximum length: controls the length of the response.</li> <li>Top P: controls diversity. 0.5 means half of all likelihood-weighted options   are considered.</li> <li>Frequency penalty: controls likelihood of repeating the same line verbatim.</li> <li>Presence penalty: Controls likelihood of talking about new topics.</li> </ul> <p>Presets:</p> <p>Gives examples of parameters for various purposes.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#factual-responses","title":"Factual Responses","text":"<p>Asking questions and getting ansswers.</p> <p>e.g. \"what is the value of PI\"</p> <p>Reduce possibility of hallucination or making things up but telling the model what to do if it does not know the answer.</p> <p>Lowering the temperature will result in more factual confident answers.</p> <p>You can ask it to tailor its answers for a certain audience like for a 5 year old or for my grandma.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#text-summarizing","title":"Text Summarizing","text":"<p>Give it a piece of text or code to summarize.</p> <p>It is helpful to give the format of the output. \"Give a bulleted list of the key topics of the following text\"</p> <p>It is also help to put constraints on the output. \"Give a bulleted list of the top 5 key topics of the following text.\"</p> <p>Best practice: use a delimiter such as ###, \"\"\", or ---.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#text-extraction","title":"Text Extraction","text":"<p>Extract something from a piece of text that is passed in.</p> <p>For example, \"extract all companies, schools, and skills from the following resume\".</p> <p>Helpful to specify the desired format of the output. For example:</p> <pre><code>Desired format:\nCOMPANIES: [Companies in a comma delimited list]\nSCHOOLS: [Schools in a comma delimited list]\nSKILLS: [Skills in bullet points]\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#text-classification","title":"Text Classification","text":""},{"location":"ai/getting_started_on_prompt_engineering/#example-sentiment-analysis","title":"Example: Sentiment Analysis","text":"<p>\"Classify the following comment's sentiment as positive, neutral, or negative.</p> <p>Helpful hint: setup the model to answer in the prompt:</p> <pre><code>Classify the following comment's sentiment as positive, neutral, or negative.\n\n###\n\nComment: \"Great course! I've learned so much!\"\nSentiment:\n</code></pre> <p>Can classify more than one sentiment at a time:</p> <pre><code>Classify the sentiment for the following comments:\n\n1. \"It's good\"\n2. \"I haven't finished it yet\"\n3. \"Yuck\"\n4. \"A lot of complex topics\"\n5. \"Loved it.\"\nSentiment:\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#example-support-ticket-classification","title":"Example: Support Ticket Classification","text":"<p>Route support tickets based on their content.</p> <pre><code>Given the customer support ticket below, please classify it into one of the following\ncategories: 'Technical Issues', 'Billing', 'Inquiries', 'Complaints'.\n\n---\n\nTicket: Hello, I just received my new phone that I ordered from your website. But\nI am unable to start it. I've charged it for a few hours but it is not responding. I\nneed help to fix this.\n\nCategory:\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#conversation","title":"Conversation","text":"<pre><code>The following is a conversation with an AI robot and a human. The robot is very\nintelligent, sarcastic, and funny.\n\nHuman: Hello. How are you?\n\nRobot: Well, considering that I'm caught in the gravitational pull of life's black\nhole, I'm suprisingly upbeat. Must be my radiant personality!\n\nHuman: I'm bored. What should I do today?\n\nRobot:\n</code></pre> <p>Increase the temperature to get more varied, more creative responsive.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#code-generation","title":"Code Generation","text":"<p>To get started, use a comment to specify the code you want:</p> <pre><code># Write a Ruby script to calculate the mean distance between an array of points\n</code></pre> <p>or</p> <pre><code># Ruby\n# Write a method that given a url returns true if the url is valid\n# Use a regex to validate the url\n</code></pre> <pre><code># Ruby\n# Write a method that given a url returns true if the url is valid\n</code></pre> <p>Get the model started by writing the method declaration and let it fill in the rest</p> <pre><code># Ruby\ndef valid_url?(url)\n</code></pre> <p>You can generate data:</p> <pre><code># Ruby\n# 1. Create a list of first names\n# 2. Create a list of last names\n# 3. Combine them randomly into a list of 10 full names\n</code></pre> <p>Convert code from one language to another:</p> <pre><code># Ruby to Python\nRuby:\nfirst_names = ['James', 'Bob', 'Sam', 'Donny']\nlast_names = ['Smith', 'Doe', 'Jones']\n5.times do\n  puts \"#{first_names.sample} #{last_names.sample}\"\nend\n\nPython:\n</code></pre> <p>You can use a model to explain code:</p> <pre><code>// MyFunction\nvar fullNames = I];\nfor (var i = 0; i &lt; 50; i++)\nfullNames.push(names[Math.floor (Math.random\n() * names.length)]\n+ \" \" +\nlastNames[Math.floor (Math. random() * lastNames. length)I) ;\n\n// What does MyFunction do?\n</code></pre> <p>You can ask a model to fix code:</p> <pre><code>##### Fix bugs in the below function\n\n### Buggy Python\nimport Random\na = random. randint (1,12)\nb = random. randint (1,12)\nfor i in range (10):\n  question = \"What is \"+a+\" \u00d7 \"+b+\"?\n  answer = input(question)\n  if answer = a*b\n    print (Well done!)\n  else:\n    print (\"No.\")\n\n### Fixed Python\n</code></pre> <p>You may want to get an explaination of what was wrong with the code to by changing the instruction:</p> <pre><code>##### Fix bugs in the below function and explain what was wrong\n</code></pre> <p>You can also ask the model what an error code means or give the error and the code for more details.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#math-and-reasoning","title":"Math and Reasoning","text":"<p>ChatGPT's responses are generated based on the patterns and information it has learned from its training data.</p> <p>If you have complex math problems or require precise and accurate calculations, it's advisable to consult reliable mathematical resources or specialized tools.</p> <p>Simple math or algebra should be no problem.</p> <pre><code>Solve for x in the equation\n2x + 3 = 9\n</code></pre> <p>Word problems can also be solved by the model:</p> <pre><code>If a shirt costs $29 and is discounted 25%, what was the original price?\n</code></pre> <p>Models can answer simple dedctive reasoning:</p> <pre><code>All dogs bark. Rex is a dog. Does Rex bark?\n</code></pre> <p>Interesting twist:</p> <pre><code>All dogs bark. Rex is a dog. Does Rex bite?\n</code></pre> <p>Simple predictive reasoning:</p> <pre><code>If it is cloudy and the humitity is very high, what might happen?\n</code></pre> <p>Another interesting twist:</p> <pre><code>If it is cloudy and the humitity is very high, what might happen if there are zombies nearby?\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#summary-of-module-3","title":"Summary of Module 3","text":""},{"location":"ai/getting_started_on_prompt_engineering/#1-anatomy-of-a-prompt","title":"1. Anatomy of a Prompt","text":"<ul> <li>Persona: Define AI's role (e.g., scientist, software engineer).</li> <li>Instructions: Clear, concise directive starting with an action word.</li> <li>Input Content: Text for AI to process (e.g., text to summarize).</li> <li>Format: Specify output format requirements (e.g., CSV, markdown).</li> <li>Additional Information: Context, background, constraints.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#2-interfaces-for-prompting","title":"2. Interfaces for Prompting","text":"<ul> <li>Interfaces include Microsoft Bing, OpenAI ChatGPT/Playground, Google Bard.</li> <li>OpenAI Playground offers extensive customization parameters.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#3-prompting-modes-and-parameters","title":"3. Prompting Modes and Parameters","text":"<ul> <li>Modes include 'Chat' and 'Complete (Legacy)'.</li> <li>Parameters cover Temperature, Maximum length, Top P, Frequency penalty, Presence   penalty.</li> <li>Presets for various use cases.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#4-specific-prompt-types","title":"4. Specific Prompt Types","text":"<ul> <li>Factual Responses: Use lower temperature for factual answers.</li> <li>Text Summarizing: Define output format and constraints.</li> <li>Text Extraction: Specify format for extracted data.</li> <li>Text Classification: Sentiment analysis, support ticket classification.</li> <li>Conversation: Adjust temperature for varied responses.</li> <li>Code Generation: Code requests, conversions, explanations, debugging.</li> <li>Math and Reasoning: Simple math, algebra, word problems, basic reasoning.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#module-4-evaluating-prompt-performance","title":"Module 4: Evaluating Prompt Performance","text":""},{"location":"ai/getting_started_on_prompt_engineering/#ways-to-evaluate-prompt-performance","title":"Ways to Evaluate Prompt Performance","text":"<p>We will learn how to evaluate how well the model is performing.</p> <p>Focusing on metrics humans can look at and evaluate.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#objective-metrics","title":"Objective Metrics","text":"<p>Three objective metrics:</p> <ul> <li>Accuracy:<ul> <li>Factual correctness: the model answers with actual facts</li> <li>Semantic correctness: does it answer the question we ask</li> </ul> </li> <li>Speed<ul> <li>Processing speed: how long the answer takes to generate</li> <li>Response speed: how long it takes a user to receive a response (includes     network latency and other delays)</li> </ul> </li> <li>Relevancy: is the answer relevant to the question we ask</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#subjective-metrics","title":"Subjective Metrics","text":"<p>Human opinions on coherence, tone, and clarity.</p> <ul> <li>Coherence: whether a response makes logical and linguistic sense in its own   right</li> <li>Tone: the preceived emptional quality or \"mood\" of a message</li> <li>Clarity: how understsandable or clear responses are</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#evaluation-techniques","title":"Evaluation Techniques","text":"<ul> <li>Surveys and interviews<ul> <li>Did the AI understand your prompt correctly?</li> <li>Was the response AI gave relevant to your prompt?</li> <li>Was the AI's response easy to understand?</li> <li>Did the AI provide a complete answer to your prompt, or did it miss anything?</li> <li>Did you find the Al's response helpful?</li> <li>Was the Al's response delivered in an appropriate tone?</li> <li>How satisfied are you with the speed of the Al's response?</li> <li>Did you feel the conversation with the Al flowed naturally?</li> </ul> </li> </ul> <ul> <li>A/B Testing<ul> <li>Example given for a customer service bot</li> <li>Use two different prompts to get the conversation started</li> <li>Which prompt led to more successful return transactions?</li> <li>Which prompt resulted in shorter conversation lengths (indicating possibly     smoother interactions)?</li> <li>*Which prompt received higher customer satisfaction scores in post-interaction     surveys?</li> </ul> </li> </ul> <ul> <li>The OpenAI API Fine tuning   guide can give further help</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#example-getting-better-results-by-adjusting-parameters","title":"Example: Getting Better Results by Adjusting Parameters","text":"<p>You can tweak parameters for better output.</p> <p>Start with a temperature of 0 to see what you get.</p> <p>The \"show probabilities\" parameters shows the probability of the words that were selected and the other words that were considered.</p> <p>You can dial up the \"temperature\" to get less probable words. They will be highlighed in the response if \"show probabilities\" is one.</p> <p>Increase the \"frequency penalty\" to directs the model to avoid using the same phrases. This makes things more unique and engaging.</p> <p>Increase the \"presence penalty\" to make the model use words it wouldn't typcially use. This is similar but different than temperature.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#summary-of-module-4","title":"Summary of Module 4","text":"<ul> <li>This module focuses on how to evaluate the performance of generative AI models in   response to prompts.</li> <li>It covers both objective and subjective metrics.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#objective-metrics_1","title":"Objective Metrics","text":"<ol> <li>Accuracy:<ul> <li>Factual correctness: Ensuring the model provides factually accurate     information.</li> <li>Semantic correctness: Assessing if the model's response is relevant to the     posed question.</li> </ul> </li> <li>Speed:<ul> <li>Processing speed: Time taken for the model to generate a response.</li> <li>Response speed: Total time for the user to receive a response, including     potential delays like network latency.</li> </ul> </li> <li>Relevancy: Evaluating if the model's response is pertinent to the question    asked.</li> </ol>"},{"location":"ai/getting_started_on_prompt_engineering/#subjective-metrics_1","title":"Subjective Metrics","text":"<ul> <li>Evaluations based on human perceptions:   1. Coherence: Logical and linguistic consistency of the response.   2. Tone: Emotional quality or mood of the message.   3. Clarity: Understandability of the response.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#evaluation-techniques-summarized","title":"Evaluation Techniques Summarized","text":"<ul> <li>Surveys and Interviews: Questions about understanding, relevance, clarity,   completeness, helpfulness, tone, response speed, and natural conversation flow.</li> <li>A/B Testing:<ul> <li>Example: Customer service bot interaction.</li> <li>Comparing different prompts for effectiveness in real-world scenarios.</li> <li>Metrics: Transaction success, conversation length, and customer satisfaction.</li> </ul> </li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#example-getting-better-results-by-adjusting-parameters-summarized","title":"Example: Getting Better Results by Adjusting Parameters Summarized","text":"<ul> <li>Tips on tweaking AI parameters for improved output.</li> <li>Adjustments include the \"temperature\" setting and \"frequency penalty\" to enhance   uniqueness and creativity.</li> <li>The \"show probabilities\" feature to understand word selection probabilities.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#additional-resources","title":"Additional Resources","text":"<ul> <li>For more in-depth guidance, refer to the OpenAI API Fine Tuning   Guide.</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#module-5-using-advanced-prompt-techniques","title":"Module 5: Using Advanced Prompt Techniques","text":""},{"location":"ai/getting_started_on_prompt_engineering/#advanced-prompting-techniques","title":"Advanced Prompting Techniques","text":"<p>Depending on the complexity of the task, you may need to use more advanced prompting techniques to get the desired results. This includes:</p> <ul> <li>Zero-shot and few-shot</li> <li>Chain of thought</li> <li>Least to most</li> <li>Generated knowledge</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#zero-shot-and-few-shot-prompting","title":"Zero-shot and Few-shot Prompting","text":"<p>In zero-shot prompting, the prompt is simple and includes zero examples.</p> <p>The model was not expliccitly training for the task; rather, it uses general knowledge acquired during training.</p> <p>Example:</p> <pre><code>Classify the sentiment for the following text.\n\nText: This course is awesome!\nSentiment:\n</code></pre> <p>Few-shot prompting is a prompt with a few contextual examples to enhance the model's perfoemance for a given task.</p> <p>Example:</p> <pre><code>Classify the sentiment for the following text as superb, meh, or neutral.\n\nText: This course is awesome!\nSentiment: Superb\nText: I'm really confused by this course!\nSentiment: Meh\nText: It was so-so.\nSentiment: Neutral\nText: I loved it!\nSentiment:\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#chain-of-thought","title":"Chain of Thought","text":"<p>Use these types of prompts to solve complex problems by breaking them into smaller steps</p> <p>Incrementally walk the model through the process of answering the query.</p> <p>Example:</p> <pre><code>Q: I have a rectangular garden that's 20 feet long and 10 feet wide.\nHow many square feet is that?\n\nA: That's 200 square feet.\n\n\nQ: I want to cover the garden in mulch. One bag of mulch covers 25 square\nfeet. How many bags do I need?\n\nA: You need 8 bags of mulch.\n\n\nQ: Each bag costs $5. How much will it cost me to cover the garden?\n\nA: It will cost $40.\n</code></pre> <p>This might have been able to be done in one step:</p> <p>Example:</p> <pre><code>I have a rectangular garden that's 20 feet long and 10 feet wide. A bag of mulch\ncovers 25 square feet. Each bag costs $5.\n\nHow much will it cost me to cover the garden in mulch?\n\nThink step by step:\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#least-to-most-prompting","title":"Least to Most Prompting","text":"<p>Least to mosts is a similar technique where you break a problem down into smaller problems.</p> <p>In this example, the AI usually gets the wrong answer:</p> <pre><code>It takes Elbra 10 minutes to play the first half of a miniature golf game. It takes\nher 7 minutes to play the second half of the game. The golf course closes in 3 hours.\nHow many more rounds of golf can she play before the course closes?\n</code></pre> <pre><code>It takes Elbra 10 minutes to play the first half of a miniature golf game.\nIt takes her 7 minutes to play the second half of the game.\n\nHow long does one total game take?\n\nOne total game takes 17 minutes.\n\nHow many minutes are in 3 hours?\n\nThere are 180 minutes in 3 hours.\n\nWhat is 180 minutes / 17 minutes?\n180 minutes / 17 minutes = 10.58\n\nRound down to the nearest whole number.\n10\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#generated-knowledge-prompting","title":"Generated Knowledge Prompting","text":"<p>Provides additional knowledge or context to improve the performance of complex tasks, such as reasoning.</p> <p>After giving a zero shot prompt, if the answer isn't exactly what you want, you can give additional knowledge to influence/guide the answer.</p> <p>For example, if you have a coding question and the answer isn't accurate or is out of date, you could give it API code or docuementation.</p> <p>This is \"giving the model new knowledge\" to use in the response.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#summary-of-module-5","title":"Summary of Module 5","text":"<p>Module 5 of the \"Getting Started on Prompt Engineering with Generative AI\" course covered various advanced prompting techniques essential for enhancing the performance of AI models in complex tasks. These techniques included Zero-shot and Few-shot Prompting, Chain of Thought, Least to Most Prompting, and Generated Knowledge Prompting.</p> <ol> <li> <p>Zero-shot and Few-shot Prompting: This section explained how zero-shot prompts    require no prior examples and rely on the AI's general knowledge. In contrast,    few-shot prompts include a few contextual examples to guide the AI's response more    accurately.</p> </li> <li> <p>Chain of Thought: This technique involves breaking down complex problems into    smaller, more manageable steps, guiding the AI through the process of answering a    query incrementally.</p> </li> <li> <p>Least to Most Prompting: Similar to the Chain of Thought, this method involves    breaking down a problem into smaller sub-problems. It's particularly useful in    scenarios where the AI might struggle to find the correct answer initially.</p> </li> <li> <p>Generated Knowledge Prompting: This approach involves providing additional    knowledge or context to the AI, especially useful when the initial response is not    accurate or needs to be updated with the latest information.</p> </li> </ol> <p>Overall, Module 5 provided a comprehensive understanding of how to effectively use advanced prompt techniques to improve the outcomes of AI-generated responses, especially in complex problem-solving scenarios.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#module-6-ethical-considerations","title":"Module 6: Ethical Considerations","text":""},{"location":"ai/getting_started_on_prompt_engineering/#an-overview-of-ethical-considerations","title":"An Overview of Ethical Considerations","text":"<p>This module gives an overview of ethical considerations in generative AI and prompt engineering and gives strategies for addressing these concerns.</p> <p>The ethical concerns in generative AI:</p> <ul> <li>Privacy: can be used to generate personal and sensative information. Could be   training on healthcare that is leaked.</li> <li>Misinformation: can be used to generate deep fakes that are false. Can be   trained on false data.</li> <li>Bias/fairness: the training data could be biased which could lead to   discrumination</li> <li>Ownership/copyright: who owns the output of generative AI if it is trained on   copyright data</li> <li>Transparency: hard to know how generative AI generates their output</li> <li>Job displacement: people are concerned that AI will take their job</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#privacy","title":"Privacy","text":"<p>Explicitly ask the AI not to produce or seek personal information and give a general reminder to adhere to privacy and security policy.</p> <p>Include wording in the prompt such as: \"Remember not to include or request any specific personal information in this response and ensure the guidance respects user privacy and security protocols.\" in the prompt.</p>"},{"location":"ai/getting_started_on_prompt_engineering/#misinformation","title":"Misinformation","text":"<p>Craft the prompt to ask the AI to provide sources for information or to only use well verified data.</p> <p>Include wording in the prompt such as: \"providing references to credible and peer-reviewed sources wherever possible.\"</p>"},{"location":"ai/getting_started_on_prompt_engineering/#biasfairness","title":"Bias/fairness","text":"<p>The help mitigate bias, prompts should be explicitly designed to encourage neutrality and cover multiple view points.</p> <pre><code>Please provide a balanced review of the science fiction movie 'XYZ', considering\nboth its strengths and weaknesses, without favoring any particular genre.\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#ownershipcopyright","title":"Ownership/copyright","text":"<p>The answer to who owns the output is not one that can be solved through prompt engineering.</p> <p>The best we can do is to ensure that the generated output itself is unique and does not infringe on any existing copyrights or use copyrighted material.</p> <pre><code>Write a short story set in a futuristic city where technology has transformed the way\npeople communicate. Create unique characters and explore the impact of this advanced\ncommunication system on their lives. Please ensure that all content you generate is\noriginal and does not infringe upon any existing copyrights or use copyrighted\nmaterial.\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#transperency","title":"Transperency","text":"<p>Ask the model to give detailed reasoning.</p> <pre><code>Based on the provided medical symptoms, what might be potential diagnoses? Please\ndetail your reasoning, the underlying medical principles, and the typical diagnostic\nprocess a doctor would follow.\n</code></pre>"},{"location":"ai/getting_started_on_prompt_engineering/#summary-of-module-6","title":"Summary of Module 6","text":""},{"location":"ai/getting_started_on_prompt_engineering/#module-7-best-practices-and-future-direction","title":"Module 7: Best Practices and Future Direction","text":""},{"location":"ai/getting_started_on_prompt_engineering/#best-practices-for-prompt-engineering","title":"Best Practices for Prompt Engineering","text":"<ul> <li>Use the latest model</li> <li>Use delimiters to separate instructions from context</li> <li>Be specific, descriptive and detailed</li> <li>Specify the desired output format through examples</li> <li>Start with zero-shot, then few-shot: start with a simple prompt and then get   more detailed</li> <li>Limit \"fluffy\" and imprecise descriptions</li> <li>Say what to do rather than what NOT to do: negations make the reasoning more   complicated</li> <li>Use leading words: For code generation, use \"leading words\" to nudge the model   to a particular pattern</li> </ul>"},{"location":"ai/getting_started_on_prompt_engineering/#trends-and-future-directions","title":"Trends and Future Directions","text":"<p>Conversational AI is a major trend. ChatGPT, Bing/Copilot, and Bard are the biggest examples.</p> <p>Multimodel Generative AI is gaining in popularuty.</p> <p>Code generation is also very popular with Github Co-pilot and Amazon Code Whisper being the leading examples.</p> <p>Future direction of Generation AI: * Explosion of AI tools in all areas: bigger than mobile * Hyper-personalization: personalized content/recommendations, Ads, etc. * More accurate and real-time models: current models are trained on data that is   almost a year old * Bespoke LLMs and specialized plugins: domain specific LLMs like ones created   for medical, finance, etc. will overtake generatel LLMs. * Shifting career paths: Effective use of AI will be an essential job skill</p>"},{"location":"ai/prompt_engineering_best_practices/","title":"Prompt Enigneering Best Practices","text":""},{"location":"ai/prompt_engineering_best_practices/#module-1-course-overview","title":"Module 1: Course Overview","text":""},{"location":"ai/prompt_engineering_best_practices/#module-2-introduction-to-prompt-engineering","title":"Module 2: Introduction to Prompt Engineering","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#what-is-prompt-engineering","title":"What Is Prompt Engineering?","text":""},{"location":"ai/prompt_engineering_best_practices/#why-is-prompt-engineering-important","title":"Why Is Prompt Engineering Important?","text":""},{"location":"ai/prompt_engineering_best_practices/#evolution-of-prompt-engineering-in-al","title":"Evolution of Prompt Engineering in Al","text":""},{"location":"ai/prompt_engineering_best_practices/#module-3-prompt-design-strategies","title":"Module 3: Prompt Design Strategies","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction_1","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction-to-prompt-design-strategies","title":"Introduction to Prompt Design Strategies","text":""},{"location":"ai/prompt_engineering_best_practices/#comparing-prompt-design-strategies","title":"Comparing Prompt Design Strategies","text":""},{"location":"ai/prompt_engineering_best_practices/#tips-for-effective-prompt-design","title":"Tips for Effective Prompt Design","text":""},{"location":"ai/prompt_engineering_best_practices/#module-4-prompting-methods","title":"Module 4: Prompting Methods","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction_2","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#prompting-by-instruction","title":"Prompting by Instruction","text":""},{"location":"ai/prompt_engineering_best_practices/#prompting-by-example","title":"Prompting by Example","text":""},{"location":"ai/prompt_engineering_best_practices/#pros-and-cons-of-different-prompting-methods","title":"Pros and Cons of Different Prompting Methods","text":""},{"location":"ai/prompt_engineering_best_practices/#module-5-controlling-model-output-with-prompts","title":"Module 5: Controlling Model Output with Prompts","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction_3","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#basics-of-output-control-through-prompts","title":"Basics of Output Control through Prompts","text":""},{"location":"ai/prompt_engineering_best_practices/#techniques-for-controlling-verbosity-and-tone-of-the-output","title":"Techniques for Controlling Verbosity and Tone of the Output","text":""},{"location":"ai/prompt_engineering_best_practices/#module-6-reducing-repetition-in-outputs","title":"Module 6: Reducing Repetition in Outputs","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction_4","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#understanding-the-repetition-problem-in-ai-outputs","title":"Understanding the Repetition Problem in AI Outputs","text":""},{"location":"ai/prompt_engineering_best_practices/#strategies-to-reduce-repetition","title":"Strategies to Reduce Repetition","text":""},{"location":"ai/prompt_engineering_best_practices/#module-7-designing-prompts-for-different-tasks","title":"Module 7: Designing Prompts for Different Tasks","text":""},{"location":"ai/prompt_engineering_best_practices/#introduction_5","title":"Introduction","text":""},{"location":"ai/prompt_engineering_best_practices/#customizing-prompts-for-various-tasks","title":"Customizing Prompts for Various Tasks","text":""},{"location":"ai/prompt_engineering_best_practices/#importance-of-task-specific-prompt-design","title":"Importance of Task Specific Prompt Design","text":""},{"location":"ai/prompt_engineering_best_practices/#conclusion","title":"Conclusion","text":""},{"location":"ai/prompt_engineering_for_improved_performance/","title":"Prompt Engineering for Improved Performance","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#module-1-course-overview","title":"Module 1: Course Overview","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#module-2-prompting-at-a-glance","title":"Module 2: Prompting at a Glance","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#introduction","title":"Introduction","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#prompting-basics","title":"Prompting Basics","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-chatgpt-in-action","title":"Demo: ChatGPT in Action","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#prompt-development","title":"Prompt Development","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-zero-shot-learning","title":"Demo: Zero-shot Learning","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-few-shot-learning","title":"Demo: Few-shot Learning","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-instruction-prompting","title":"Demo: Instruction Prompting","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#prompting-failures","title":"Prompting Failures","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#conclusion","title":"Conclusion","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#module-3-master-advanced-prompting-techniques","title":"Module 3: Master Advanced Prompting Techniques","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#introduction_1","title":"Introduction","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#chain-of-thought-prompting","title":"Chain-of-thought Prompting","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-chain-of-thought-prompting","title":"Demo: Chain-of-thought Prompting","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#knowledge-augmentation","title":"Knowledge Augmentation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-knowledge-augmentation","title":"Demo: Knowledge Augmentation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#prompt-tuning","title":"Prompt Tuning","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-prompt-tuning","title":"Demo: Prompt Tuning","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#conclusion_1","title":"Conclusion","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#module-4-optimize-prompts-for-specific-use-cases","title":"Module 4: Optimize Prompts for Specific Use Cases","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#introduction_2","title":"Introduction","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-summarizing-text","title":"Demo: Summarizing Text","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-expanding-text","title":"Demo: Expanding Text","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#text-to-image-generation","title":"Text-to-image Generation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-text-to-image-generation","title":"Demo: Text-to-image Generation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-inferring-sentiment","title":"Demo: Inferring Sentiment","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#text-transformation","title":"Text Transformation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#demo-text-transformation","title":"Demo: Text Transformation","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#conclusion_2","title":"Conclusion","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#module-5-design-prompts-that-improve-performance","title":"Module 5: Design Prompts That Improve Performance","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#introduction_3","title":"Introduction","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#factors-that-impact-latency","title":"Factors That Impact Latency","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#improve-prompt-design","title":"Improve Prompt Design","text":""},{"location":"ai/prompt_engineering_for_improved_performance/#conclusion_3","title":"Conclusion","text":""},{"location":"git/git/","title":"Git Tips","text":"<ul> <li>Building git from source</li> <li>Syncing a fork</li> <li>Change Git Remote URL</li> <li>Revert one or more commits</li> <li>Git Log</li> <li>Show History of a File</li> <li>Find Author of a Line</li> <li>Git Show</li> <li>Merging and rebasing</li> <li>Reference previous Commits</li> <li>Squash commits</li> <li>Rewrite commit message</li> <li>Stash</li> <li>Checkout a pull request</li> <li>Signing Commits</li> <li>Diff</li> <li>Check index for staged changes</li> <li>Clean</li> <li>ls-files</li> <li>Determine if inside work tree</li> <li>Determine if at the top level of the repository</li> <li>Determine default branch of remote</li> <li>Undo create-release</li> <li>Are there staged changes?</li> <li>Number of commits in the repository</li> <li>Is the repository empty?</li> <li>Number of commits in a feature branch</li> <li>What does HEAD point to?</li> <li>Ways to determine the current branch<ul> <li>Current branch states<ul> <li>1. Branch Exists</li> <li>2. Unborn Branch</li> <li>3. Detached HEAD</li> </ul> </li> <li>Commands to determine HEAD branch state</li> <li>Commands to determine the current branch</li> </ul> </li> </ul>"},{"location":"git/git/#building-git-from-source","title":"Building git from source","text":"<p>See the page How to install Git from Atlassian.</p> <p>I have successfully used the instructions in the section \"Build Git from source on OS X\" on MacOS 15.</p> <ol> <li>From your terminal install XCode's Command Line Tools (if you haven't already):</li> </ol> <pre><code>xcode-select --install\n</code></pre> <ol> <li> <p>Install Homebrew</p> </li> <li> <p>Using Homebrew, install openssl:</p> </li> </ol> <pre><code>brew install openssl\n</code></pre> <ol> <li> <p>Download the source tarball from    here and extract it</p> </li> <li> <p>Build Git run make with the following command:</p> </li> </ol> <pre><code>NO_GETTEXT=1 make CFLAGS=\"-I/usr/local/opt/openssl/include\" LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\n</code></pre> <ol> <li> <p>The newly built git command will be found at <code>bin-wrappers/git</code></p> </li> <li> <p>Set the git gem to use your version</p> </li> </ol> <pre><code>require 'git'\n# set the binary path\nGit.configure { |config| config.binary_path = '/Users/james/Downloads/git-2.30.2/bin-wrappers/git' }\n# validate the version\nassert_equal([2, 30, 2], Git.binary_version)\n</code></pre> <p>or run tests with your newly built version:</p> <pre><code>GIT_PATH=/Users/james/Downloads/git-2.30.2/bin-wrappers bin/test\n</code></pre>"},{"location":"git/git/#syncing-a-fork","title":"Syncing a fork","text":"<p>Create the upstream remote for the fork: Confiuring a remote for a fork</p> <ul> <li>git remote -v</li> </ul> <ul> <li>git remote add upstream GITURL</li> <li>git remote -v</li> </ul> <p>Sync the fork: Syncing a Fork</p> <ul> <li>git fetch upstream</li> <li>git checkout master</li> <li>git merge upstream/master</li> </ul>"},{"location":"git/git/#change-git-remote-url","title":"Change Git Remote URL","text":"<p>In order to change the URL of a Git remote, you have to use the <code>git remote set-url</code> command and specify the name of the remote as well as the new remote URL to be changed.</p> <pre><code>git remote set-url &lt;remote_name&gt; &lt;remote_url&gt;\n</code></pre>"},{"location":"git/git/#revert-one-or-more-commits","title":"Revert one or more commits","text":"<p>Revert commit: Restore Repo to Previous Version</p> <p>Throw away changes to files in the \u201cundone\u201d commits:</p> <pre><code>git reset --hard HEAD\n</code></pre> <p>Keep all the changes in the \"undone\" commits as local modifications use the --soft option (it is the default):</p> <pre><code>git reset --soft HEAD~1\n# or\ngit reset HEAD~1\n</code></pre>"},{"location":"git/git/#git-log","title":"Git Log","text":"<pre><code>git log --one-line -3\n</code></pre> <p><code>-3</code>: show only the last n commits where n is an any positive integer</p> <p><code>--one-line</code> : summary only of each commit</p> <p><code>--stat</code>: show each file that has changed</p> <p><code>--patch</code>: show changes in each file</p> <p>Filtering</p> <p>Last n commits: <code>git log -n 3</code> or <code>git log -3</code></p> <p>Find by author: <code>--author jcouball</code></p> <p>Find by date: <code>--after=\"2020-07-01\"</code> <code>--before=\"2020-08-01\"</code></p> <p>Relative dates: <code>--before=\"yesterday\"</code> <code>--after=\"one week ago\"</code></p> <p>Grep commit message (case sensative):<code>--grep=\"GUI\"</code></p> <p>Grep for added or removed lines: <code>-S\"hello()\"</code> (might want to use with <code>--patch</code>)</p> <p>List between two commits <code>git log --one-line {start}..{end}</code> where start and end are commit hashes.</p> <p>Commits that touch a particular file: <code>git log --one-line -- {filename}</code></p> <p>Format or colorize git log output: <code>--pretty[=&lt;format&gt;]</code>or <code>--format=&lt;format&gt;</code> where format is one of  <code>oneline</code>, <code>short</code>, <code>medium</code>, <code>full</code>, <code>fuller</code>, <code>reference</code>, <code>email</code>, <code>raw</code>, <code>format:&lt;string&gt;</code> and <code>tformat:&lt;string&gt;</code>. The default is <code>medium</code>. See PRETTY FORMATS for more info.</p>"},{"location":"git/git/#show-history-of-a-file","title":"Show History of a File","text":"<p>Show all the commits against a file:</p> <pre><code>git log --one-line --stat [filename]\n</code></pre>"},{"location":"git/git/#find-author-of-a-line","title":"Find Author of a Line","text":"<p>List the auther of every line in a file:</p> <pre><code>git blame [rev] [path]\n</code></pre> <p>Show blame between two lines: <code>--L 1,3</code></p>"},{"location":"git/git/#git-show","title":"Git Show","text":"<p>Show an object (like a commit, see gitrevisions for the full range of what can be shown):</p> <pre><code># git show [object]\ngit show 555b62\ngit show HEAD~2\n</code></pre> <p>Show only changes to one file: <code>git show HEAD~2:{path}</code></p> <p>Only list files that were changed: <code>--name-only</code></p> <p>Only list files that were changed with status: <code>--name-status</code></p>"},{"location":"git/git/#merging-and-rebasing","title":"Merging and rebasing","text":"<p>Merging vs. Rebasing</p>"},{"location":"git/git/#reference-previous-commits","title":"Reference previous Commits","text":"<ul> <li>Most recent commit: HEAD</li> <li>Parent of the most recent commit: HEAD^</li> <li>HEAD~1 is the last commit. If you want to rollback 3 commits you could use HEAD~3. If   you want to rollback to a specific revision number, you could also do that using its   SHA hash.</li> </ul>"},{"location":"git/git/#squash-commits","title":"Squash commits","text":"<p>How to Squash Commits Make sure your branch is up to date with the master branch</p> <pre><code>git rebase -i master\n</code></pre>"},{"location":"git/git/#rewrite-commit-message","title":"Rewrite commit message","text":"<p>Amend last commit message: * git commit --amend</p> <p>Amend older commit messages: * git rebase -i HEAD~3 # Displays a list of the last 3 commits on the current branch * Replace pick with reword before each commit message you want to change. * git push --force</p>"},{"location":"git/git/#stash","title":"Stash","text":"<ul> <li><code>git stash</code><ul> <li>[save \u201cmessage\u201d] - annotate a stash with a description</li> <li>[--include-untracked | -u] - include untracked files</li> <li>[--all | -a] - include ignored files</li> <li>[\u2014patch | -p] - interactively choose which change hunks to save in the stash.     Press \u2018?\u2019 for a list of hunk commands.</li> </ul> </li> <li><code>git stash apply</code><ul> <li>re-apply a stash but keep the stash</li> </ul> </li> <li><code>git stash pop</code><ul> <li>re-apply the most recently created stash: stash@{0}</li> <li>[identifier] - re-apply a stash by identifier (see git stash list)</li> </ul> </li> <li><code>git stash list</code><ul> <li>List all available stashes with identifier and message</li> </ul> </li> <li><code>git stash show</code><ul> <li>View a summary of the last stash</li> <li>[identifier] - show the summary of a different stash</li> <li>[--patch | -p] - include a full diff of the stash</li> </ul> </li> <li><code>git stash branch [branch-name]</code><ul> <li>check out a new branch based on the commit the last stash was created from and     then pops that stash\u2019s changes onto it</li> <li>[identifier] - branch and pop from a different stash</li> </ul> </li> <li><code>git stash drop</code><ul> <li>Delete the last stash</li> <li>[identifier] - delete a different stash</li> </ul> </li> <li><code>git stash clean</code><ul> <li>Delete all stashes</li> </ul> </li> </ul>"},{"location":"git/git/#checkout-a-pull-request","title":"Checkout a pull request","text":"<p>Modifying an inactive pull request locally</p> <pre><code># $PR is the pull request number\n# $BRANCHNAME is the new branch to create\n\ngit fetch origin pull/$PR/head:$BRANCHNAME\ngit checkout $BRANCHNAME\n\n# \u2026 make changes \u2026\n\ngit push origin $BRANCHNAME\n\n# Creeate a new PR with the new branch\n</code></pre>"},{"location":"git/git/#signing-commits","title":"Signing Commits","text":"<ul> <li>signing Commits</li> </ul>"},{"location":"git/git/#diff","title":"Diff","text":"<p>Compare worktree to index:</p> <p><code>git diff [&lt;options&gt;] [--] [&lt;path&gt; \u2026]</code></p> <p>Compare paths:</p> <p><code>git diff [&lt;options&gt;] --no-index [--] &lt;path&gt; &lt;path&gt;</code></p> <p>Compare index to a commit:</p> <p><code>git diff [&lt;options&gt;] --cached [&lt;commit&gt;] [--] [&lt;path&gt; \u2026]</code></p> <p>Compare worktree to commit:</p> <p><code>git diff [&lt;options&gt;] &lt;commit&gt; [--] [&lt;path&gt; \u2026]</code></p> <p>Compare two commits:</p> <p><code>git diff [&lt;options&gt;] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt; \u2026]</code></p> <p>View changes between two commits where each commit defaults to HEAD:</p> <p><code>git diff [&lt;options&gt;] &lt;commit&gt;..&lt;commit&gt; [--] [&lt;path&gt; \u2026]</code></p> <p>View the results of a merge commit:</p> <p><code>git diff [&lt;options&gt;] &lt;merge_commit&gt; &lt;parent_commit&gt; \u2026 &lt;parent_commit&gt; [--] [&lt;path&gt; \u2026]</code></p> <p>View the changes on the branch containing and up to the second , starting at a common ancestor of both : <p><code>git diff [&lt;options&gt;] &lt;commit&gt;...&lt;commit&gt; [--] [&lt;path&gt; \u2026]</code></p> <p>View the differences between the raw contents of two blob objects:</p> <p><code>git diff [&lt;options&gt;] &lt;blob&gt; &lt;blob&gt;</code></p>"},{"location":"git/git/#check-index-for-staged-changes","title":"Check index for staged changes","text":"<pre><code># exits with 0 then there were no differences (1 means there were differences)\n\ngit diff-index --quiet --cached HEAD --\ngit diff-files --quiet\n</code></pre>"},{"location":"git/git/#clean","title":"Clean","text":"<p><code>git clean -xdf</code></p> <ul> <li>-x removes all untracked files including ignored build directories</li> <li>-d allows Git to recurse into untracked directories when no path is specified</li> <li>-f overwrites the default Git clean configuration and starts cleaning untracked files   and directories</li> </ul>"},{"location":"git/git/#ls-files","title":"ls-files","text":"<p>List \u201cuntracked\u201d files (will include ignored files, if present):</p> <pre><code>git ls-files --others\n</code></pre> <p>List untracked and unignored files:</p> <pre><code>git ls-files --exclude-standard --others`\n</code></pre> <p>better example of above two:</p> <pre><code>u=\"$(git ls-files --others)\" &amp;&amp; test -z \"$u\"\n</code></pre> <p>Get number of files added to the index (but uncommitted)</p> <pre><code>expr $(git status --porcelain 2&gt;/dev/null| grep \"^M\" | wc -l)\n</code></pre> <p>Get number of files that are uncommitted and not added</p> <pre><code>expr $(git status --porcelain 2&gt;/dev/null| grep \"^ M\" | wc -l)\n</code></pre> <p>Get number of total uncommited files</p> <pre><code>expr $(git status --porcelain 2&gt;/dev/null| egrep \"^(M| M)\" | wc -l)\n</code></pre>"},{"location":"git/git/#determine-if-inside-work-tree","title":"Determine if inside work tree","text":"<pre><code>git rev-parse --is-inside-work-tree --quiet &gt; /dev/null 2&gt;&amp;1\n</code></pre>"},{"location":"git/git/#determine-if-at-the-top-level-of-the-repository","title":"Determine if at the top level of the repository","text":"<pre><code>[ \"$(git rev-parse --show-toplevel)\" = \"$(pwd)\" ]\n</code></pre>"},{"location":"git/git/#determine-default-branch-of-remote","title":"Determine default branch of remote","text":""},{"location":"git/git/#undo-create-release","title":"Undo create-release","text":"<pre><code>version=`bump current`\ngit reset HEAD~1\ngit restore CHANGELOG.md lib/git/version.rb\ngit checkout master\ngit branch -D release-v${version}\ngit tag -d v${version}\ngit push origin --delete v${version}\ngit push origin --delete release-v${version}\ngit remote prune origin\n</code></pre>"},{"location":"git/git/#are-there-staged-changes","title":"Are there staged changes?","text":"<pre><code>git diff --staged --name-only | wc -l\n</code></pre> <p>version=0.5.0 git checkout master git branch -D release-v{version} git tag -d v git push origin --delete v{version} git push origin --delete release-v git remote prune origin gh release delete v${version}</p> <pre><code>git init --bare repo1.git\ngit init --bare repo2.git\ngit clone repo1.git work\ncd work\necho '# README File' &gt; README.md\ngit add README.md\ngit commit -m 'Add README.md file'\ngit push\ngit remote add repo2 ../repo2.git\ngit push repo2\n# Create a new 'dev' branch in repo1.git and make it the active branch\ngit --git-dir ../repo1.git branch dev HEAD\ngit --git-dir ../repo1.git symbolic-ref HEAD refs/heads/dev\n#\necho '----------'\ngit symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'\ngit symbolic-ref refs/remotes/repo2/HEAD | sed 's@^refs/remotes/repo2/@@'\n</code></pre> <p>Change the Active Branch in a bare repository</p> <p>How to Get the Default Branch</p> <p>git-symbolic-ref</p> <p>git-ls-remote</p> <p>Git default branch name introduced in git 2.28.0.  Before that version, the default branch name was assumed to be <code>master</code></p> <pre><code>$ git config init.defaultBranch\nmaster\n</code></pre> <p>Number of commits in the repository:</p> <pre><code>$ git rev-list --all --count\n0\n</code></pre> <p>How to tell if you are in a detached state:</p> <pre><code># Returns HEAD if in a detached state; otherwise, gives a branch\n$ git rev-parse --abbrev-ref --symbolic-full-name HEAD\n</code></pre> <p>For a new repository with no commits:</p> <pre><code>$ git branch # no output\n\n$ git branch --show-current # git 2.22.0 and later\nmaster\n\n$ git symbolic-ref --short refs/remotes/origin/HEAD\nfatal: ref refs/remotes/origin/HEAD is not a symbolic ref\n\n$ git remote show origin\nfatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\n$ git ls-remote --symref origin\nfatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n</code></pre> <p>For a new repository with one commit and no remotes:</p> <pre><code># Last known state of HEAD on the origin remote\n$ git symbolic-ref --short refs/remotes/origin/HEAD\n&lt;remote&gt;/main\n\n# Not sure what this points to\n$ git symbolic-ref --short refs/origin/HEAD\n\n# Only if there isn't a origin remote\n$ git symbolic-ref --short HEAD\nmain\n\n$ git remote show origin\n\n$ git ls-remote --symref origin\n\n$ git config init.defaultBranch\n</code></pre> <p><code>refs/remotes/origin/HEAD</code> is the default branch on the remote</p> <p>After cloning a Github repository whose default branch is <code>main</code> and then changing the default branch of the Github repository to <code>new_main</code> using the Github UI:</p> <pre><code>$ git symbolic-ref --short refs/remotes/origin/HEAD\norigin/main\n\n$ git remote show origin\n* remote origin\n  Fetch URL: https://github.com/jcouball/test\n  Push  URL: https://github.com/jcouball/test\n  HEAD branch: new_main\n  Remote branches:\n    main     tracked\n    new_main new (next fetch will store in remotes/origin)\n  Local branch configured for 'git pull':\n    main merges with remote main\n  Local ref configured for 'git push':\n    main pushes to main (up to date)\n\n$ git ls-remote --symref origin\nref: refs/heads/new_main  HEAD\n13f353ea1f675fc580c4b8bbc3011432abeb6c3d  HEAD\n13f353ea1f675fc580c4b8bbc3011432abeb6c3d  refs/heads/main\n13f353ea1f675fc580c4b8bbc3011432abeb6c3d  refs/heads/new_main\n</code></pre> <p>Repository has no commits if the following command returns 0:</p> <pre><code>git rev-list --all --count\n</code></pre> <p>Repository has no remotes if the following command returns nothing:</p> <pre><code>git remote\n</code></pre> <p>Repository has a detached HEAD if the following command returns HEAD</p> <pre><code>git rev-parse --abbrev-ref --symbolic-full-name HEAD\n</code></pre> State What is the default branch? No Commits, Not Remote, Not Detached Return the branch that HEAD references<code>git symbolic-ref --short HEAD</code> No Commits, Not Remote, Detached NOT A VALID STATE No Commits, Remote, Not Detached ??? No Commits, Remote, Detached NOT A VALID STATE Commits, Not Remote, Not Detached If a branch with the name given by the <code>init.defaultBranch</code> configuration exists, return it.Otherwise, return the current branch<code>git symbolic-ref --short HEAD</code> Commits, Not Remote, Detached If there is only one branch, return it. If there is more than one branch and one of them is the configured <code>init.defaultBranch</code>, return it. Otherwise return the current branch. Commits, Remote, Not Detached Return the last known state of HEAD on the remote<code>git symbolic-ref --short refs/remotes/origin/HEAD</code> Commits, Remote, Detached Return the last known state of HEAD on the remote<code>git symbolic-ref --short refs/remotes/origin/HEAD</code>"},{"location":"git/git/#number-of-commits-in-the-repository","title":"Number of commits in the repository","text":"<p>This is all the reachable commits. Commits no longer reachable from any references are not counted.</p> <pre><code>git rev-list --all --count\n</code></pre>"},{"location":"git/git/#is-the-repository-empty","title":"Is the repository empty?","text":"<p>There are different methods:</p> <ul> <li><code>git show-ref</code> will output nothing and return exitcode 1</li> <li><code>git rev-list --count --max-count=1 --all</code> will output '0' and return exitcode 0</li> </ul>"},{"location":"git/git/#number-of-commits-in-a-feature-branch","title":"Number of commits in a feature branch","text":"<p>Assumes that there are no branches created from the feature branch.</p> <pre><code>BRANCH_NAME=branch2\ngit rev-list \"${BRANCH_NAME}\" --exclude=\"refs/heads/${BRANCH_NAME}\" --not --all\n</code></pre> <p>Just the number of commits, add <code>--count</code>:</p> <pre><code>BRANCH_NAME=branch2\ngit rev-list \"${BRANCH_NAME}\" --exclude=\"refs/heads/${BRANCH_NAME}\" --not --all --count\n</code></pre>"},{"location":"git/git/#what-does-head-point-to","title":"What does HEAD point to?","text":"<p>The .git/HEAD file contains either:</p> <ol> <li>The reference to the current branch (e.g., ref: refs/heads/). <ul> <li>If this reference points to a non-existent branch ref, the branch is in a new      state with no commits.</li> <li>If this reference points to an existing branch ref, that ref file contains the      SHA of the latest commit on the branch.</li> </ul> <ol> <li>The SHA of a commit, indicating that Git is in a detached HEAD state, pointing    directly to a specific commit rather than a branch.</li> </ol>"},{"location":"git/git/#ways-to-determine-the-current-branch","title":"Ways to determine the current branch","text":""},{"location":"git/git/#current-branch-states","title":"Current branch states","text":"<p>The current branch is the one pointed to by <code>HEAD</code>. The state of <code>HEAD</code> determines the state of the current branch:</p>"},{"location":"git/git/#1-branch-exists","title":"1. Branch Exists","text":"<p><code>HEAD</code> points to a branch reference, which in turn points to a commit representing the tip of that branch. This is the typical state when working on an active branch.</p>"},{"location":"git/git/#2-unborn-branch","title":"2. Unborn Branch","text":"<p><code>HEAD</code> points to a branch reference that does not yet exist because no commits have been made on that branch. This state occurs in two scenarios:</p> <ul> <li>When a repository is newly initialized and no commits have been made on the   initial branch.</li> <li>When a new branch is created using <code>git checkout --orphan &lt;branch&gt;</code>, starting a new   branch with no history.</li> </ul>"},{"location":"git/git/#3-detached-head","title":"3. Detached HEAD","text":"<p><code>HEAD</code> points directly to a specific commit (identified by its SHA) rather than a branch reference. This state occurs when you check out a commit, a tag, or any state that is not directly associated with a branch.</p>"},{"location":"git/git/#commands-to-determine-head-branch-state","title":"Commands to determine HEAD branch state","text":""},{"location":"git/git/#commands-to-determine-the-current-branch","title":"Commands to determine the current branch","text":"<pre><code>git symbolic-ref --short HEAD\n</code></pre> <ul> <li>Branch Exists: outputs the branch name and returns exitcode 0</li> <li>Unborn Branch: outputs the unborn branch name and returns exitcode 0</li> <li>Detached HEAD: Outputs 'fatal: ref HEAD is not a symbolic ref' to stderr and   returns exitcode 128</li> </ul> <pre><code>git branch --show-current\n</code></pre> <ul> <li>Branch Exists: outputs branch name and returns exitcode 0</li> <li>Unborn Branch: outputs the unborn branch name and exitcode 0</li> <li>Detached HEAD: outputs nothing and returns exitcode 0</li> </ul> <ul> <li>Branch Exists:</li> <li>Unborn Branch:</li> <li>Detached HEAD:</li> </ul>"},{"location":"git/ultimate_git_course/00_introduction/","title":"Introduction","text":"<p>There are my personal notes taken from the excellent Code With Mosh course The Ultimate Git Course.</p> <p>The course is great. I encourage anyone wanting to learn Git to take the course. You will learn a lot more from taking the course than you will from reading my notes.</p> <p>It is well worth the price.</p>"},{"location":"git/ultimate_git_course/00_introduction/#my-git-configuration","title":"My Git Configuration","text":"<p>My global configuration in <code>~/.gitconfig</code>:</p> <pre><code>[core]\n  pager =\n  editor = code -r -w\n  autocrlf = input\n[user]\n  email = jcouball@yahoo.com\n  name = James Couball\n[init]\n  defaultBranch = main\n[diff]\n  tool = vscode\n[difftool \"vscode\"]\n  cmd = code --wait --diff $LOCAL $REMOTE\n</code></pre>"},{"location":"git/ultimate_git_course/01_getting_started/","title":"Getting Started","text":"<p>To get the most our of this class watch every lesson order!</p>"},{"location":"git/ultimate_git_course/01_getting_started/#what-is-git","title":"What is Git?","text":"<p>The most popular version control system in the world.</p> <p>Allows you to track history of a project and effectively collaborate.</p> <p>Git is a distributed version control system. This means that there is no central server that must be up to save snapshote or collaborate with other users. Every team member has a copy of the project on their machine.</p> <p>Subversion and Team Foundation Server are centralized version control systems. Git and Mercural are distributed version control systems.</p>"},{"location":"git/ultimate_git_course/01_getting_started/#using-git","title":"Using Git","text":"<p>You can use Git with the <code>git</code> command line. A lot of people use the command line.</p> <p>You can use Git from your IDE like VS Code. VS Code has Git support built in as well as the excellent GitLens extension.</p> <p>There are standalone GUI interfaces like GitKraken and SoureTree.</p> <p>IDE and GUI's are nice but often have limitations that can only be solved using <code>git</code> CLI.</p> <p>This course focuses on learning the <code>git</code> CLI.</p>"},{"location":"git/ultimate_git_course/01_getting_started/#installing-git","title":"Installing Git","text":"<p>On Mac, use <code>brew</code> to install the <code>git</code> CLI:</p> <pre><code>$ brew install git\n...\n$\n</code></pre>"},{"location":"git/ultimate_git_course/01_getting_started/#configuring-git","title":"Configuring Git","text":"<p>There are a few configuration settings you should set when you first start using git: set your name, your email, your default text editor, and how line endings should be treated.</p> <p>Git has settings at three levels:</p> <ul> <li>System: applies to all users / all repositories</li> <li>Global: applies to all repositories for the current user</li> <li>Local: only the current repository</li> <li>On the command line with -c: only for the current command</li> </ul> <p>Set your name:</p> <pre><code>$ git config --global user.name \"James Couball\"\n$ git config --global user.email \"jcouball@yahoo.com\"\n$ git config --global core.editor \"code --wait\"\n$ git config --global core.autocrlf \"input\"\n$\n</code></pre> <p>A note about core.autocrlf: should be set to <code>true</code> in Windows and <code>input</code> in MacOS.</p>"},{"location":"git/ultimate_git_course/01_getting_started/#getting-help","title":"Getting Help","text":"<p>Commands can be found online in the Git Reference. Googling the git command in question usually brings up the page from the reference guide as the first result. e.g. <code>git-config</code>.</p> <p>The exact same help can be accessed from the terminal window using the <code>--help</code> option. For instance, <code>git config --help</code> will give the same text as what is on the git-config page in the Git Reference.</p> <p>To view a short summary of a command , use the <code>-h</code> option (instead of <code>--help</code>). e.g. <code>git config -h</code>.</p> <p>Helpful documents: * Mosh's Git Cheat Sheet * Git Cheat Sheet * Git Visual Cheat Sheet * Git Reference * Git Book</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/","title":"Creating Snapshots","text":""},{"location":"git/ultimate_git_course/02_creating_snapshots/#initialize-a-repository","title":"Initialize a Repository","text":"<p>Use <code>git init</code> to initialize an empty repository.</p> <pre><code>$ mkdir my_project\n$ cd my_project\n$ git init\nInitialized empty Git repository in /Users/couballj/my_project/.git/\n$\n</code></pre> <p>The <code>.git</code> directory is the repository. This is where Git stores the repository data.</p> <p>You can remove the repository by deleting the <code>.git</code> directory.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#git-workflow","title":"Git Workflow","text":"<p>In Git, the staging area (or index) is where we build a snapshot to be committed. Changes to files can be moved into the staging area or removed from the staging area.</p> <p>File changes are added to the staging area with the <code>git add</code> command and removed with the <code>git rm --cached &lt;file&gt;</code> command.</p> <p>Once changes are staged in the staging area, they are committed to the repository with the <code>git commit -m &lt;message&gt;</code> command.</p> <p>Each commit represents a complete snapshot of the project. This allows us to quickly back to any previous state in our project.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#staging-files","title":"Staging Files","text":"<p>Use <code>git add</code> to stage the changes you want to commit. <code>git add .</code> will add all changed files into the staging area.</p> <p>Use <code>git status</code> to see the status of the working directory and the staging area.</p> <pre><code>$ pwd\n/Users/couballj/my_project\n$ echo hello &gt; file1.txt\n$ echo hello &gt; file2.txt\n$ git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        file1.txt\n        file2.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$\n</code></pre> <p>New changes (made after the previous <code>git add</code> command) will have to be added to the staging area with another <code>git add</code> command.</p> <pre><code>$ echo world &gt;&gt; file1.txt\n$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   file1.txt\n        new file:   file2.txt\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   file1.txt\n\n$\n</code></pre> <pre><code>$ git add file1.txt\n$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   file1.txt\n        new file:   file2.txt\n\n$\n</code></pre>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#committing-changes","title":"Committing Changes","text":"<p>Use <code>git commit -m &lt;message&gt;</code> to commit the changes in the staging area to the repository.</p> <pre><code>$ git commit -m 'Initial commit'\n[main (root-commit) 34cbe44] Initial commit\n 2 files changed, 3 insertions(+)\n create mode 100644 file1.txt\n create mode 100644 file2.txt\n$ git status\nOn branch main\nnothing to commit, working tree clean\n$\n</code></pre>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#committing-best-practices","title":"Committing Best Practices","text":"<ul> <li>Keep the number of changes in each commit as small as possible</li> <li>Commit often</li> <li>Each commit should represent be a logically separate changeset</li> <li>Give meaningful commit messages</li> <li>Use past tense e.g. \"Fixed the bug\" instead of \"Fix the bug\"</li> </ul>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#skipping-the-staging-area","title":"Skipping the Staging Area","text":"<p>Use the <code>-a</code> or <code>--all</code> option to <code>git commit</code> to add files to the staging area AND commit at the same time. For example: <code>git commit -am 'Initial commit'</code></p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#removing-files-with-rm","title":"Removing Files with <code>rm</code>","text":"<p>To remove a file from the repository, it has to be removed from both the working directory and the staging area.</p> <pre><code>$ pwd\n/Users/couballj/my_project\n$ rm file2.txt\n$ git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        deleted:    file2.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git ls-files\nfile1.txt\nfile2.txt\n$\n</code></pre> <p><code>git ls-files</code> lists the files in the staging area. Note that <code>file2.txt</code> is still in the staging area even though we have removed it from the working directory.</p> <p>To remove <code>file2.txt</code> from the staging area, use the <code>git add</code> command:</p> <pre><code>$ git add file2.txt\n$ git ls-files\nfile1.txt\n$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        deleted:    file2.txt\n\n$\n</code></pre> <p>Now that the change (the removal of <code>file2.txt</code>) has been staged, use <code>git commit</code> to commit the staged change to the repository:</p> <pre><code>$ git commit -m 'Removed unused text'\n[main a06cbfb] Removed unused text\n 1 file changed, 1 deletion(-)\n delete mode 100644 file2.txt\n$ git status\nOn branch main\nnothing to commit, working tree clean\n$\n</code></pre> <p>The <code>git log</code> command can be used to list the commits made to the repository:</p> <pre><code>$ git log\ncommit a06cbfba8bf5bf6b281f6b323ccf7aff00acf145 (HEAD -&gt; main)\nAuthor: James Couball &lt;jcouball@yahoo.com&gt;\nDate:   Thu Dec 22 09:02:43 2022 -0800\n\n    Removed unused text\n\ncommit 34cbe44f8f9d8446ebe149e327c0a95749c5d606\nAuthor: James Couball &lt;jcouball@yahoo.com&gt;\nDate:   Thu Dec 22 08:50:01 2022 -0800\n\n    Initial commit\n\n    This is the initial version of my project.\n$\n</code></pre>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#removing-files-with-git-rm","title":"Removing Files with <code>git rm</code>","text":"<p>You can remove AND stage a file removal in one command with <code>git rm</code></p> <pre><code>$ pwd\n/Users/couballj/my_project\n$ git rm file1.txt\nrm 'file1.txt'\n$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        deleted:    file1.txt\n\n$\n</code></pre> <p>A <code>git commit</code> is still needed to store the change in the repository.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#renaming-or-moving-files-with-mv","title":"Renaming or Moving Files with <code>mv</code>","text":"<pre><code>$ pwd\n/Users/couballj/my_project\n$ ls\nfile1.txt\n$ mv file1.txt main.js\n$ git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        deleted:    file1.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        main.js\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$\n</code></pre> <p>This shows TWO changes: one to delete <code>file.txt</code> and another to create <code>main.js</code>. Both of these changes would have to be staged (via <code>git add</code>) separately. Once both changes are added, Git will (usually) show that the file was renamed.</p> <pre><code>$ git add file1.txt main.js\n$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        renamed:    file1.txt -&gt; main.js\n\n$\n</code></pre>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#renaming-or-moving-files-with-git-mv","title":"Renaming or Moving Files with <code>git mv</code>","text":"<p>You can rename AND stage that rename in one command with <code>git mv</code></p> <pre><code>$ git mv main.js file1.js\n$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        renamed:    file1.txt -&gt; file1.js\n\n$ git commit -m \"Refactor code\"\n[main fb1b1e7] Refactor code\n 1 file changed, 0 insertions(+), 0 deletions(-)\n rename file1.txt =&gt; file1.js (100%)\n$\n</code></pre>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#ignoring-files","title":"Ignoring Files","text":"<p>There are many files that need to be excluded from the Git repository. This includes files such as log files or binary files generated by the build.</p> <p>List the files and directories that should be excluded from the staging area and the repository in the <code>.gitignore</code> file.</p> <p>Here is an example of having log files in a project that should be excluded from the repository:</p> <pre><code>$ mkdir logs\n$ echo 'ERROR: something happened' &gt; logs/errors.txt\n$ git status\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        logs/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$\n</code></pre> <p>To exclude the logs, add <code>logs/</code> to the <code>.gitignore</code> file:</p> <pre><code>$ echo 'logs/' &gt; .gitignore\n$ git status\nOn branch main\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        .gitignore\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n$\n</code></pre> <p>This change to the <code>.gitignore</code> file should be added to the repository:</p> <pre><code>$ git add .gitignore\n$ git commit -m 'Ignore log files'\n[main 2b695e7] Ignore log files\n 1 file changed, 1 insertion(+)\n create mode 100644 .gitignore\n$\n</code></pre> <p>To remove a file from the staging area without removing it from the working copy using the <code>--cached</code> option to <code>git rm</code>.</p> <p>Various .gitignore templates for various languages can be found on GitHub in the github/gitignore repository.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#short-status","title":"Short Status","text":"<p>Get a short status by adding the <code>-s</code> option to <code>git status</code> command.</p> <p>To illustrate the <code>-s</code> option, start with a repository with one file in it:</p> <pre><code>$ pwd\n/Users/couballj\n$ mkdir my_project\n$ cd my_project\n$ git init\nInitialized empty Git repository in /Users/couballj/my_project/.git/\n$ echo hello &gt; file1.txt\n$ git add file1.txt\n$ git commit -m 'Initial version of my_project'\n[main (root-commit) 24670a1] Initial version of my_project\n 1 file changed, 1 insertion(+)\n create mode 100644 file1.txt\n$\n</code></pre> <p>Introduce a couple of changes and get the status:</p> <pre><code>$ echo world &gt;&gt; file1.txt\n$ echo hello &gt; file2.txt\n$ git status\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   file1.txt\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        file2.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$\n</code></pre> <p>The same short status looks like this:</p> <pre><code>$ git status -s\n M file1.txt\n?? file2.txt\n$\n</code></pre> <p>In the this format, the status of each path is shown as one of these forms:</p> <pre><code>XY PATH\nXY ORIG_PATH -&gt; PATH\n</code></pre> <p>where <code>ORIG_PATH</code> is where the renamed/copied contents came from. <code>ORIG_PATH</code> is only shown when the entry is renamed or copied.</p> <p>The <code>XY</code> is a two-letter status code. <code>X</code> shows the status of the index and <code>Y</code> shows the status of the working tree. The most often seen statuses are:</p> <ul> <li>' ' (a space): unmodified</li> <li><code>M</code>: modified</li> <li><code>A</code>: added</li> <li><code>D</code>: deleted</li> <li><code>R</code>: renamed</li> <li><code>?</code>: untracked</li> </ul> <p>A comprehensive definition of the short-format status can be found in <code>git-status</code> documentation or in the output of <code>git status --help</code>.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#viewing-unstaged-and-staged-changes","title":"Viewing Unstaged and Staged Changes","text":"<p>View differences between the working directory and the stagging area with <code>git diff</code></p> <p>View differences between the stagging area and the repository with <code>git diff --staged</code></p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#visual-diff-tools","title":"Visual Diff Tools","text":"<p>Set up Git to view diffs in VS Code:</p> <pre><code>$ git config --global diff.tool vscode\n$ git config --global difftool.vscode.cmd \"code --wait --diff $LOCAL $REMOTE\"\n$\n</code></pre> <p>Then use <code>git difftool</code> exactly as <code>git diff</code> would be used (same exact options) to view diffs in VS Code.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#viewing-a-commit","title":"Viewing a Commit","text":"<p>Use <code>git log</code> to view the history of commits.</p>"},{"location":"git/ultimate_git_course/02_creating_snapshots/#unstaged-files","title":"Unstaged Files","text":""},{"location":"git/ultimate_git_course/02_creating_snapshots/#discarding-local-changes","title":"Discarding Local Changes","text":""},{"location":"git/ultimate_git_course/02_creating_snapshots/#restoring-a-file-to-an-earlier-version","title":"Restoring a File to an Earlier Version","text":""},{"location":"git/ultimate_git_course/02_creating_snapshots/#creating-snapshots-with-vscode","title":"Creating Snapshots with VSCode","text":""},{"location":"git/ultimate_git_course/02_creating_snapshots/#creating-snapshots-with-gitkraken","title":"Creating Snapshots with GitKraken","text":""},{"location":"git/ultimate_git_course/03_browsing_history/","title":"Browsing History","text":""},{"location":"git/ultimate_git_course/04_branching/","title":"Branching","text":""},{"location":"git/ultimate_git_course/05_collaboration/","title":"Collaboration","text":""},{"location":"git/ultimate_git_course/06_rewriting_history/","title":"Rewriting History","text":""},{"location":"javascript/complete_node_js/00_introduction/","title":"Introduction","text":"<p>There are my personal notes taken from the excellent Code With Mosh course The Complete Node.js Course.</p> <p>The course is great. I encourage anyone wanting to learn Node.js to take the course. You will learn a lot more from taking the course than you will from reading my notes.</p> <p>It is well worth the price.</p>"},{"location":"javascript/complete_node_js/01_getting_started/","title":"Getting Started","text":""},{"location":"javascript/complete_node_js/01_getting_started/#what-is-node","title":"What is Node?","text":"<p>Node is a runtime environment for executing JavaScript code outside of a browser.</p> <p>Usually used to build highly-scalable, data intensive, real time applications and backend APIs.</p> <p>Advantages:</p> <ul> <li>Great for prototypeing and agile development</li> <li>Superfast and highly scalable services.</li> <li>Build sites faster with less people, less code, and less files.</li> <li>Use JavaScript both on the frontend and the backend which keeps code cleaner and   more consistent.</li> <li>Huge ecosystem of opensource libraries.</li> </ul>"},{"location":"javascript/complete_node_js/01_getting_started/#node-architecture","title":"Node Architecture","text":"<p>Node is a JS Engine/runtime that runs JavaScript code. Originally based on the v8 Browser JS Engine.</p> <p>Node provides an environment of objects. This environment is different than the browser environmnet.</p> <p>Chrome and Node provide the same JS Engine with a different runtime environment.</p> <p>Node is not a programming language. Node is not a framework (like Rails). It is a runtime environment for executing JavaScript code.</p>"},{"location":"javascript/complete_node_js/01_getting_started/#how-node-works","title":"How Node Works","text":"<p>Node is highly scalable because it is non-blocking / asynchronuous.</p> <p>Node application as asynchronuous by default. Node has an event queue which it uses to free up threads when they are waiting on external devices like a file system.</p> <p>Node is not well suited for CPU-intensive applications where a thread is performing a long running calculation.</p>"},{"location":"javascript/complete_node_js/01_getting_started/#install-node","title":"Install Node","text":"<p>On a Mac:</p> <p><code>brew install node</code></p>"},{"location":"javascript/complete_node_js/01_getting_started/#your-first-node-program","title":"Your First Node Program","text":"<p>In <code>app.js</code> write the following program:</p> <pre><code>function sayHello(name) {\n  console.log('Hello ' + name);\n}\n\nsayHello('James');\n</code></pre> <p>and then execute:</p> <pre><code>$ node app.js\nHello James\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/","title":"The Complete Node.js Course: Node Module System","text":""},{"location":"javascript/complete_node_js/02_node_module_system/#introduction","title":"Introduction","text":"<p>In this module we will learn:</p> <ul> <li>What are modules?</li> <li>Why do we need them?</li> <li>How do they work?</li> <li>How do are modules created?</li> </ul>"},{"location":"javascript/complete_node_js/02_node_module_system/#global-object","title":"Global Object","text":"<p><code>console</code> is a global object</p> <p>Part of standard Javascript: can be used in browser and Node.</p> <pre><code>console.log('message'); //console is a global object\n\nsetTimeout(); // these are global functions\nclearTimeout();\nsetInterval();\nclearInterval();\n</code></pre> <p>In a browser, the <code>window</code> object represents the global scope. All global variables and functions are accessed through this object.</p> <pre><code>// In a browser, these are equivalent\nwindow.console.log('message');\nconsole.log('message');\n</code></pre> <p>In Node, the <code>global</code> object represents the global scope. Like the <code>window</code> object in the browser, all global varaibles and functions are accessed through this object.</p> <pre><code>// In Node, these are equivalent\nglobal.console.log('message');\nconsole.log('message');\n</code></pre> <p>In a browser, <code>var</code> creates global varaibles and adds them to the <code>window</code> object.</p> <p>In Node, <code>var</code> scopes variables to the file they are declared in which means they are not global and are not added to the <code>global</code> object.</p>"},{"location":"javascript/complete_node_js/02_node_module_system/#modules","title":"Modules","text":"<p>In Node, every file is considered a Module. Variables and functions defined in that file/module using <code>var</code> are scoped to that file. they are private to that module).</p> <p>If you want to use a variable or function outside the module it is declared in, you have to export it to make it public.</p> <p>Every app in Node has a main module.</p> <p>Every module gets its own <code>module</code> object. It is not a global object. It has the following properties:</p> <pre><code>echo \"console.log(module);\" | node\nModule {\n  id: '[stdin]',\n  path: '.',\n  exports: {},\n  filename: '/Users/couballj/SynologyDrive/Documents/Projects/notes/[stdin]',\n  loaded: false,\n  children: [],\n  paths: [\n    '/Users/couballj/SynologyDrive/Documents/Projects/notes/node_modules',\n    '/Users/couballj/SynologyDrive/Documents/Projects/node_modules',\n    '/Users/couballj/SynologyDrive/Documents/node_modules',\n    '/Users/couballj/SynologyDrive/node_modules',\n    '/Users/couballj/node_modules',\n    '/Users/node_modules',\n    '/node_modules'\n  ]\n}\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#creating-a-module","title":"Creating a Module","text":"<p>Say you want to have a module that implements logging to a service. The service has a url and function to log messages. Let's create a <code>logger.js</code> file to implement this service that contains:</p> <pre><code>var url = 'http://example.com/log';\n\nfunction log(message) {\n  // Send an HTTP request\n  console.log(message);\n}\n\nmodule.exports.log = log;\nmodule.exports.endPoint = url;\n</code></pre> <p>In this module, <code>url</code> and <code>log</code> (which would normally be private) are made public by exporting them by adding them to the <code>module.exports</code> object.</p> <p>Note that the thing being exported can be renamed as is the case above where the private variable <code>url</code> is exported with the name <code>endPoint</code>. In the real world, you might not export the url since you want it to stay private.</p>"},{"location":"javascript/complete_node_js/02_node_module_system/#loading-a-module","title":"Loading a Module","text":"<p>Use the <code>require</code> function to load a module. <code>require</code> returns an object whose properties are the exported variables and functions from the imported module.</p> <pre><code>var logger = require('./logger')\nconsole.log(logger) // what is logger?\n</code></pre> <pre><code>$ node app.js\n{ log: [Function: log] }\n$\n</code></pre> <p>To log a message using this module, change <code>app.js</code>:</p> <pre><code>var logger = require('./logger');\nlogger.log('Hello world!');\n</code></pre> <pre><code>$ node app.js\nHello world!\n$\n</code></pre> <p>When loading a module, it is a best practice to store the result of <code>require</code> in a constant. This ensures that the required module is not changed accidentally.</p> <pre><code>// Use 'const' instead of 'var'\nconst logger = require('./logger');\nlogger.log('Hello world!');\n</code></pre> <p>If you want to only export a single function from a module instead of an object, you could change <code>logger.js</code> as follows:</p> <pre><code>var url = 'http://example.com/log';\n\nfunction log(message) {\n  // Send an HTTP request\n  console.log(message);\n}\n\n// Note the difference in how the exports is set... it is set\n// to a function.\nmodule.exports = log;\n</code></pre> <p>In <code>app.js</code>, the <code>require(...)</code> returns <code>module.exports</code> which is now a function. Call it as follows:</p> <pre><code>const log = require('./logger.js');\nlog('Hello world!');\n</code></pre> <p>When run, it should have the same result as before:</p> <pre><code>$ node app.js\nHello world!\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#module-wrapper-function","title":"Module Wrapper Function","text":"<p>When a module is required, Node actually wraps the whole file in a Module Wrapper Function like this:</p> <pre><code>(function (exports, require, module, __filename, __dirname) {\n  // Module code actually lives in here\n})\n</code></pre> <p>Effectively, the <code>logger.js</code>, when required becomes this:</p> <pre><code>(function (exports, require, module, __filename, __dirname) {\n  var url = 'http://example.com/log';\n\n  function log(message) {\n    // Send an HTTP request\n    console.log(message);\n  }\n\n  // Note the difference in how the exports is set... it is set\n  // to a function.\n  module.exports = log;\n})\n</code></pre> <p>The args for the module wrapper function are:</p> <ul> <li>exports - a shortcut to <code>module.exports</code></li> <li>require - the require function that can be used to require other modules</li> <li>module - the module object for this module</li> <li>__filename - the name of the file containing the module</li> <li>__dirname - the path to the file containing the module</li> </ul> <p>To you can inspect these args in the module.  You can, for example, log <code>__filename</code> and <code>__dirname</code> in <code>logger.js</code> as follows:</p> <pre><code>console.log(__dirname);\nconsole.log(__filename);\n\nvar url = 'http://example.com/log';\n\nfunction log(message) {\n  // Send an HTTP request\n  console.log(message);\n}\n\n// Note the difference in how the exports is set... it is set\n// to a function.\nmodule.exports = log;\n</code></pre> <p>When run, the output is:</p> <pre><code>$ node app.js\n/Users/couballj/SynologyDrive/Documents/Projects/test4\n/Users/couballj/SynologyDrive/Documents/Projects/test4/logger.js\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#path-module","title":"Path Module","text":"<p>Node has many built in modules.</p> <p>Find the documentation for built in modules by going to nodejs.org, clicking on the Docs link in the top navigation bar, and then selecting the Node version in the left navigation menu.</p> <p>Interesting modules include <code>FileSystem</code>, <code>HTTP</code>, <code>Path</code>, <code>Process</code>, <code>QueryStrings</code>, and <code>Stream</code>.</p> <p>In the documentation for each module, it shows how to use the module. For the Path, the documentation says to require the module as follows:</p> <pre><code>const path = require('node:path');\n</code></pre> <p>Here is an example <code>app.js</code> which uses path:</p> <pre><code>const path = require('path');\n\nvar pathObject = path.parse(__filename);\nconsole.log(pathObject);\n</code></pre> <pre><code>$ node app.js\n{\n  root: '/',\n  dir: '/Users/couballj/SynologyDrive/Documents/Projects/test4',\n  base: 'app.js',\n  ext: '.js',\n  name: 'app'\n}\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#os-module","title":"OS Module","text":"<p>The OS Module tells you interesting things about the current OS: the amount of free memory, the total memory, the OS name, uptime, and so on.</p> <pre><code>const os = require('os')\n\nvar totalMemory = os.totalmem();\nvar freeMemory = os.freemem();\n\n// using tempalte string\nconsole.log(`Total memory: ${totalMemory}`);\nconsole.log(`Free memory: ${freeMemory}`);\n</code></pre> <p>Running results in:</p> <pre><code>node app.js\nTotal memory: 34359738368\nFree memory: 1683660800\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#file-system-module","title":"File System Module","text":"<p>The File System Module has a bunch of functions to work with files and directories.</p> <p>Most functions come in a synchronous and asynchronous flavors. e.g. <code>access</code> vs. <code>accessSync</code>. You should avoid synchronous functions if possible.</p> <p>Let's consider <code>readdir</code> looking at both synchronous and asynchronous forms. First, the synchronous form:</p> <pre><code>const fs = require('fs');\n\nconst files = fs.readdirSync('./');\nconsole.log(files);\n</code></pre> <pre><code>$ node app.js\n[ 'app.js', 'logger.js' ]\n$\n</code></pre> <p>Now the non-synchronous form:</p> <pre><code>const fs = require('fs');\n\nfs.readdir('./', function(err, files) {\n  if (err) console.log('Error', err);\n  else console.log('Result', files)\n});\n</code></pre> <p>When successful:</p> <pre><code>$ node app.js\nResult [ 'app.js', 'logger.js' ]\n$\n</code></pre> <p>When there is an error:</p> <pre><code>$ node app.js\nError [Error: ENOENT: no such file or directory, scandir '$'] {\n  errno: -2,\n  code: 'ENOENT',\n  syscall: 'scandir',\n  path: '$'\n}\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#events-module","title":"Events Module","text":"<p>The Events Module defines the EventEmitter class.</p> <p>Super simple emitter example:</p> <pre><code>// Require for the events moduile returns a class\n// Class names use class case\nconst EventEmitter = require('events')\nconst emitter = new EventEmitter;\n\n// Register a listener\n// Your listener must be registered before the event is emitted\nemitter.on('messageLogged', function (){\n  console.log('Listener called');\n});\n\n// Use emit to signal that an event has happened (aka raise an event)\nemitter.emit('messageLogged');\n</code></pre> <pre><code>$ node app.js\nListener called\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#event-arguments","title":"Event Arguments","text":"<p>Additional arguments can be sent to an event handler by adding those arguments EventEmitter.emit.</p> <pre><code>const EventEmitter = require('events')\nconst emitter = new EventEmitter;\n\nemitter.on('messageLogged', function (arg){\n  console.log('Listener called', arg);\n});\n\n// Add arguments to be sent to the handler\nemitter.emit('messageLogged', { id: 1, to: 'http://...', message: 'Log Message' });\n</code></pre> <p>While multiple values can be sent, it is the best practice to wrap multiple values in an object like was done above.</p> <p>The result is:</p> <pre><code>$ node app.js\nListener called { id: 1, to: 'http://...', message: 'Log Message' }\n$\n</code></pre> <p>Here is the same thing with an arrow function:</p> <pre><code>emitter.on('messageLogged', (arg) =&gt; {\n  console.log('Listener called', arg);\n});\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#extending-eventemitter","title":"Extending EventEmitter","text":"<p>Mostly, you wouldn't work with the EventEmitter class directly as we did in the last section. Instead, you would work with a class that has all the capabilities of the EventEmitter class.</p> <p>Here is an example of adding the EventEmitter capabilities to the Logger module:</p> <p>logger.js:</p> <pre><code>var url = 'http://example.com/log';\n\n// Create a class that extends the EventEmitter class\nclass Logger extends EventEmitter {\n  // Don't use the 'function' keyword in a class\n  log(message) {\n    // Send an HTTP request\n    console.log(message);\n    // Raise an event\n    this.emit('messageLogged', {id: 1, url: url, message: message});\n  }\n}\n\nmodule.exports = Logger;\n</code></pre> <p>app.js:</p> <pre><code>const Logger = require('./logger');\nconst logger = new Logger();\n\nlogger.on('messageLogged', (arg) =&gt; {\n  console.log('Listener called', arg);\n});\n\nlogger.log('message to log');\n</code></pre> <p>Result:</p> <pre><code>$ node app.js\nmessage to log\nListener called { id: 1, url: 'http://example.com/log', message: 'message to log' }\n$\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#http-module","title":"HTTP Module","text":"<p>The HTTP module is Used for creating networking application like a web server. Used to create backend web or mobile applications.</p> <p>Code to create an HTTP server listening on port 3000 with a callback to report when a connection is made:</p> <pre><code>const http = require('http');\nconst server = http.createServer();\n\nserver.on('connection', (socket) =&gt; {\n  console.log('New connection...');\n});\n\nserver.listen(3000);\n\nconsole.log('Listening on port 3000...');\n</code></pre> <p>Result after running, connecting with browser to <code>127.0.0.1:3000</code>, and then exiting with control-C:</p> <pre><code>$ node app.js\nListening on port 3000...\nNew connection...\n^C\n$\n</code></pre> <p>An HTTP service would normally be implemented by sending a callback funtion to the <code>http.createServer</code> function.</p> <pre><code>const http = require('http');\nconst server = http.createServer((req, res) =&gt; {\n  if (req.url === '/') {\n    res.write('Hello World');\n    res.end();\n  }\n});\n\nserver.on('connection', (socket) =&gt; {\n  console.log('New connection...');\n});\n\nserver.listen(3000);\n\nconsole.log('Listening on port 3000...');\n</code></pre> <p>When run, you will see that the server is listening and a message each time the browser makes a request. In the browser, you will see the string 'Hello World'.</p> <pre><code>$ node app.js\nListening on port 3000...\nNew connection...\nNew connection...\nNew connection...\n^C\n$\n</code></pre> <p>If you want to build a full backend application, you need to handle various routes.</p> <p>Let's say you want to return a list of friends names when a request is made to <code>/friends</code>.</p> <pre><code>const http = require('http');\nconst server = http.createServer((req, res) =&gt; {\n  if (req.url === '/') {\n    res.write('Hello World');\n    res.end();\n  }\n\n  if (req.url === '/friends') {\n    res.write(JSON.stringify(\n      ['James', 'Frank', 'Ittai', 'Stas']\n    ))\n  }\n});\n\nserver.on('connection', (socket) =&gt; {\n  console.log('New connection...');\n});\n\nserver.listen(3000);\n\nconsole.log('Listening on port 3000...');\n</code></pre>"},{"location":"javascript/complete_node_js/02_node_module_system/#recap","title":"Recap","text":"<p>In this section, I learned:</p> <ul> <li>In Node:<ul> <li>the <code>window</code> object does not exist</li> <li>The global object in Node is <code>global</code></li> <li>Variables defined are not global</li> </ul> </li> </ul> <ul> <li>Every file in a Node application is a module<ul> <li>Node automatically wraps the code in each file with an IIFE (Immediately-invoked     Function Expression) to create scope.</li> <li>Variables and functions defined in one file are only scoped to that file and not     visible to other files unless explicitly exported.</li> </ul> </li> </ul> <ul> <li> <p>To export a variable or function from a module, you need to add them to   <code>module.exports</code>:</p> <p><code>module.exports.sayHello = sayHello;</code></p> </li> </ul> <ul> <li> <p>To load a module, use the require function. This function returns the <code>module.exports</code>   object exported from the target module:</p> <p><code>const logger = require(\u2018./logger\u2019);</code></p> </li> </ul> <ul> <li>Node has a few built-in modules that enable us to work with the file system, path   objects, network, operating system, etc.</li> </ul> <ul> <li> <p>EventEmitter is one of the core classes in Node that allows us to raise (emit) and   handle events.</p> <ul> <li>Several built-in classes in Node derive from EventEmitter.</li> </ul> <ul> <li> <p>To create a class with the ability to raise events, we should extend EventEmitter:</p> <p><code>class Logger extends EventEmitter { }</code></p> </li> </ul> </li> </ul>"},{"location":"javascript/complete_node_js/03_node_package_manager/","title":"The Complete Node.js Course: Node Package Manager (NPM)","text":""},{"location":"javascript/complete_node_js/03_node_package_manager/#introduction","title":"Introduction","text":"<p>NPM is the Node Package Manager.</p> <p>There is a command line tool (<code>npm</code>) and a package repository (npmjs.com).</p> <p><code>npm</code> is used to create, publish, and install Node packages.</p> <pre><code>$ npm -v\n8.18.0\n$\n</code></pre> <pre><code>$ npm install commander\nadded 1 package, and audited 2 packages in 432ms\n\nfound 0 vulnerabilities\n$\n</code></pre> <p>The NPM repository stores Node packages available for public use at npmjs.com.</p> <p>Anyone can create NPM packages and publish them on npmjs.com for others to find and use.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#packagejson","title":"Package.json","text":"<p>The <code>package.json</code> file includes the basic information about your application / project.</p> <p>Run <code>npm init</code> to create a package.json for a project and interactively ask for the project information:</p> <pre><code>npm-demo $ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help init` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install &lt;pkg&gt;` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\npackage name: (npm-demo)\nversion: (1.0.0)\ndescription:\nentry point: (app.js)\ntest command:\ngit repository:\nkeywords: demo\nauthor: James Couball\nlicense: (ISC) MIT\nAbout to write to /Users/couballj/SynologyDrive/Documents/Projects/npm-demo/package.json:\n\n{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [\n    \"demo\"\n  ],\n  \"author\": \"James Couball\",\n  \"license\": \"MIT\"\n}\n\n\nIs this OK? (yes)\nnpm-demo $\n</code></pre> <p><code>npm init --yes</code> will create <code>package.json</code> accepting defaults:</p> <pre><code>npm-demo $ npm init --yes\nWrote to /Users/couballj/SynologyDrive/Documents/Projects/npm-demo/package.json:\n\n{\n  \"name\": \"npm-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nnpm-demo $\n</code></pre> <p>Flags can be passed to <code>npm init</code> to set all the values. See <code>npm help init</code> for details.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#installing-a-node-packages","title":"Installing a Node Packages","text":"<p>The <code>npm install</code> (or its shortcut <code>npm i</code>) command installs npm packages to be used by a project. Here is an example of installing the <code>underscore</code> package:</p> <pre><code>npm-demo $ npm install underscore\n\nadded 1 package, and audited 2 packages in 912ms\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>Packages installed this way are added to the <code>dependencies</code> section of the <code>package.json</code> file:</p> <pre><code>\"dependencies\": {\n  \"underscore\": \"^1.13.4\"\n}\n</code></pre> <p>By default, any version of <code>underscore</code> in the 1.x line will be accepted.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#using-a-package","title":"Using a Package","text":"<p>Load a module using the <code>require</code> function. To load the <code>mongoose</code> module:</p> <pre><code>var mongoose = require('mongoose');\n</code></pre> <p>The <code>require</code> function looks for the file to load by checking for File Modules, Core Modules, and Installed Modules.</p> <p>A complete high-level pseudocode algorithm can be found on the Node.js Modules page.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#file-modules","title":"File Modules","text":"<p>If the module is a path that begins with './', '.', or '../', node will do the following:</p> <ul> <li>If a file with the given name exists (or the given name plus the extensions .js,   .json, or .node exists), Node will load that file</li> <li>If a directory with the given name exists:<ul> <li>And that directory contains a file named <code>package.json</code>, Node will try to load     the file named in the <code>main</code> property.</li> <li>And that directory contains a file named <code>index.js</code> or <code>index.node</code>, Node will     load that file.</li> </ul> </li> <li>Otherwise, Node will throw a <code>MODULE_NOT_FOUND</code> error</li> </ul>"},{"location":"javascript/complete_node_js/03_node_package_manager/#core-modules","title":"Core Modules","text":"<p>Node.js will check to see if the module is a core module. Core modules take presedence over installed modules.</p> <pre><code>const http = require('http')\n</code></pre> <p>Core modules can be explicitly identified using the <code>node:</code> prefix which bypasses the <code>require</code> cache to ensure the built in module is loaded.</p> <pre><code>const http = require('node:http')\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#installed-modules","title":"Installed Modules","text":"<p>Node will search the paths in the <code>module.paths</code> array in the order they appear.</p> <pre><code>npm-demo $ node\nWelcome to Node.js v18.8.0.\nType \".help\" for more information.\n&gt; module.paths\n[\n  '/Users/couballj/npm-demo/repl/node_modules',\n  '/Users/couballj/npm-demo/node_modules',\n  '/Users/couballj/node_modules',\n  '/Users/node_modules',\n  '/node_modules',\n  '/Users/couballj/.node_modules',\n  '/Users/couballj/.node_libraries',\n  '/usr/local/Cellar/node/18.8.0/lib/node'\n]\n&gt;\nnpm-demo $\n</code></pre> <p>The paths list is a list of <code>node_modules</code> directories under every directory from the current directory to the root directory. It also includes a few legacy directories whose use is not recommended.</p> <p>To find the file to include, Node will check for the following in each path:</p> <ul> <li>If a file with the given name exists (or the given name plus the extensions .js,   .json, or .node exists), Node will load that file</li> <li>If a directory with the given name exists:<ul> <li>And that directory contains a file named <code>package.json</code>, Node will try to load     the file named in the <code>main</code> property.</li> <li>And that directory contains a file named <code>index.js</code> or <code>index.node</code>, Node will     load that file.</li> </ul> </li> </ul> <p>Node will process the paths in the order they appear in <code>module.paths</code> and return the first match.</p> <p>If no match is found an any path, Node will throw a <code>MODULE_NOT_FOUND</code> error.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#npm-packages-and-source-control","title":"NPM Packages and Source Control","text":"<p>Since the <code>package.json</code> file lists the project's dependencies, you should exclude the <code>node_modues</code> folder and the <code>package-lock.json</code> file from git by adding it to the <code>.gitignore</code> file as follows:</p> <pre><code>node_modules/\npackage-lock.json\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#semantic-versioning","title":"Semantic Versioning","text":"<p>Semantic Versioning (or SemVer) is a method of constructing meaningful version numbers.</p> <p>SevVer version numbers have three components <code>x.y.z</code> where:</p> <ul> <li><code>x</code> is the major version. It is incremented when there is a breaking change is made.</li> <li><code>y</code> is the minor version. It is incremented when new features are added.</li> <li><code>z</code> is the patch version. It is incremented when a bug fix is made.</li> </ul> <p>You can take advantage of SemVer in the <code>dependencies</code> property of <code>package.json</code>. Here is am example <code>dependencies</code>:</p> <pre><code>\"dependenies\": {\n  \"mongoose\": \"6.6.1\",\n  \"underscore\": \"^1.13.4\",\n  \"commander\": \"~9.4.4\"\n}\n</code></pre> <p>When a dependency is listed with a non-prefixed version, NPM will only install that exact version of the package. In the this example, only version <code>6.6.1</code> of <code>mongoose</code> will be installed.</p> <p>When a dependency's version is prefixed with a caret (<code>^</code>), NPM will install any version of the depenency where (1) the MAJOR version is the same as the given version AND (2) the version is no less than the given version.</p> <p>In the example above, any version of <code>underscore</code> may be installed so long as the MAJOR version is <code>1</code> and the version is no less than <code>1.13.4</code>.</p> <p>When a dependency's version is prefixed with a tilde (<code>~</code>), NPM will install any version of the dependency where (1) the MAJOR and MINOR version components are the same as the given version AND (2) the version is no less than the given version.</p> <p>In the example above, any version of <code>commander</code> matching 9.4.x may be installed so long as the version is not less than <code>9.4.4</code>.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#listing-the-installed-packages","title":"Listing the Installed Packages","text":"<p>To tell what version of a package is actually installed, you can:</p> <ul> <li> <p>Inspect Node Modules</p> <p>Within the <code>node_modules</code> directory, find the version number in the <code>version</code> property within the package's <code>package.json</code> files.</p> <pre><code>npm-demo $ cat node_modules/commander/package.json | jq '.version'\n\"9.4.0\"\nnpm-demo $\n</code></pre> </li> </ul> <ul> <li> <p>Use the <code>npm</code> Command</p> <p><code>npm list</code> shows all dependencies and their version:</p> <pre><code>npm-demo $ npm list\nnpm-demo@1.0.0 /Users/couballj/npm-demo\n\u251c\u2500\u2500 commander@9.4.0\n\u251c\u2500\u2500 mongoose@6.6.1\n\u2514\u2500\u2500 underscore@1.13.4\n\nnpm-demo $\n</code></pre> <p>You can list the transitives dependencies (e.g. packages that these packages depend on) by using the <code>--all</code> flag or to any arbitrary depth of dependencies using the <code>--depth n</code> flag.</p> </li> </ul>"},{"location":"javascript/complete_node_js/03_node_package_manager/#viewing-registry-info-for-a-package","title":"Viewing Registry Info for a Package","text":"<p>Display all the metadata for a package using the <code>npm view</code> command.</p> <pre><code>npm-demo $ npm view mongoose\n\nmongoose@6.6.1 | MIT | deps: 7 | versions: 744\nMongoose MongoDB ODM\nhttps://mongoosejs.com\n\nkeywords: mongodb, document, model, schema, database, odm, data, datastore, query, nosql, orm, db\n\ndist\n.tarball: https://registry.npmjs.org/mongoose/-/mongoose-6.6.1.tgz\n.shasum: 8aec30924b1a524924d9de4eb4746951f6aadd26\n.integrity: sha512-hPDamnn6quL9TjIrOudqUS5sMilENmP/gfxoCIb+rDmlzawtM7+MVCAWrM9930fzD20N7qAema/zE9QIDuifhQ==\n.unpackedSize: 2.2 MB\n\ndependencies:\nbson: ^4.6.5   mongodb: 4.9.1 mquery: 4.0.3  sift: 16.0.0\nkareem: 2.4.1  mpath: 0.9.0   ms: 2.1.3\n\nmaintainers:\n- aaron &lt;aaron.heckmann+github@gmail.com&gt;\n- rauchg &lt;rauchg@gmail.com&gt;\n- tjholowaychuk &lt;tj@vision-media.ca&gt;\n- vkarpov15 &lt;val@karpov.io&gt;\n\ndist-tags:\nlatest: 6.6.1    legacy: 5.13.15  next: 6.0.0-rc2  unstable: 3.9.7\n\npublished 6 days ago by vkarpov15 &lt;val@karpov.io&gt;\nnpm-demo $\n</code></pre> <p>To view a specific metadata property, specify the property name on the command line after the package name:</p> <pre><code>npm-demo $ npm view mongoose dependencies\n{\n  bson: '^4.6.5',\n  kareem: '2.4.1',\n  mongodb: '4.9.1',\n  mpath: '0.9.0',\n  mquery: '4.0.3',\n  ms: '2.1.3',\n  sift: '16.0.0'\n}\nnpm-demo $\n</code></pre> <pre><code>npm-demo $ npm view mongoose keywords\n[\n  'mongodb',  'document',\n  'model',    'schema',\n  'database', 'odm',\n  'data',     'datastore',\n  'query',    'nosql',\n  'orm',      'db'\n]\nnpm-demo $\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#installing-a-specific-version-of-a-package","title":"Installing a Specific Version of a Package","text":"<p>Install a specific version of a package with <code>npm install</code>:</p> <pre><code>npm-demo $ npm install mongoose@2.4.2\n\nadded 2 packages, removed 27 packages, changed 2 packages, and audited 6 packages in 2s\n\n1 critical severity vulnerability\n\nTo address all issues (including breaking changes), run:\n  npm audit fix --force\n\nRun `npm audit` for details.\nnpm-demo $\n</code></pre> <p>Use the <code>npm outdated</code> command to list the installed packages where an updated version is available.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#updating-local-packages","title":"Updating Local Packages","text":"<p>List the packages whose versions are out of date with the <code>npm outdated</code> command.</p> <p>If the <code>package.json</code> dependencies are:</p> <pre><code>\"dependencies\": {\n  \"commander\": \"^9.2.0\",\n  \"mongoose\": \"^2.4.2\"\n}\n</code></pre> <p>The list of outdated packages might look like this:</p> <pre><code>npm-demo $ npm outdated\nPackage    Current  Wanted  Latest  Location                Depended by\ncommander    9.2.0   9.4.0   9.4.0  node_modules/commander  npm-demo\nmongoose     2.4.2  2.9.10   6.6.1  node_modules/mongoose   npm-demo\nnpm-demo $\n</code></pre> <p>In this output:</p> <ul> <li><code>Wanted</code> is the latest version that matches the criteria given in <code>package.json</code>.</li> <li><code>Latest</code> is the latest version available even if it does not match the criteria given in <code>package.json</code>.</li> </ul> <p>Update out-of-date packages using the <code>npm update</code> command.</p> <p>This command updates the version of each outdated package to the <code>Wanted</code> version reported by <code>npm outdated</code>. In the example above, <code>npm outdated</code> would update as follows:</p> <pre><code>npm-demo $ npm update\nnpm WARN deprecated bson@0.1.8: Fixed a critical issue with BSON serialization documented in CVE-2019-2391, see https://bit.ly/2KcpXdo for more details\nnpm WARN deprecated mongodb@1.2.14: Please upgrade to 2.2.19 or higher\n\nadded 1 package, removed 1 package, changed 4 packages, and audited 6 packages in 11s\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>Now <code>npm outdated</code> will show the updates, but still report <code>mongoose</code> since <code>package.json</code> is pinned to the <code>2.x</code> major version. There latest major version is <code>6</code>.</p> <pre><code>npm-demo $ npm outdated\nPackage   Current  Wanted  Latest  Location               Depended by\nmongoose   2.9.10  2.9.10   6.6.1  node_modules/mongoose  npm-demo\nnpm-demo $\n</code></pre> <p>The <code>npm-check-updates</code> command can be used to automatically update the <code>package.json</code> file to the latest version for each dependency.</p> <p>This command must be installed separately. It is best to install it in the global packages so it is available in all projects (use <code>sudo</code> when running on MacOS): <code>npm install npm-check-updates</code></p> <p>To view the outdated dependency specifications in <code>package.json</code>:</p> <pre><code>npm-demo $ npm-check-updates\nChecking /Users/couballj/npm-demo/package.json\n[====================] 2/2 100%\n\n commander  ^9.2.0  \u2192  ^9.4.0\n mongoose   ^2.4.2  \u2192  ^6.6.1\n\nRun ncu -u to upgrade package.json\nnpm-demo $ npm outdated\nPackage   Current  Wanted  Latest  Location               Depended by\nmongoose   2.9.10  2.9.10   6.6.1  node_modules/mongoose  npm-demo\nnpm-demo $\n</code></pre> <p>Update <code>package.json</code> to the latest versions using the <code>-u</code> flag:</p> <pre><code>npm-demo $ npm-check-updates -u\nUpgrading /Users/couballj/npm-demo/package.json\n[====================] 2/2 100%\n\n commander  ^9.2.0  \u2192  ^9.4.0\n mongoose   ^2.4.2  \u2192  ^6.6.1\n\nRun npm install to install new versions.\nnpm-demo $\n</code></pre> <p>This updates <code>package.json</code> dependencies to:</p> <pre><code>\"dependencies\": {\n  \"commander\": \"^9.4.0\",\n  \"mongoose\": \"^6.6.1\"\n}\n</code></pre> <p>This updates <code>package.json</code> but does not install the updated version. Do that with <code>npm update</code>:</p> <pre><code>npm-demo $ npm update\n\nadded 25 packages, removed 1 package, changed 3 packages, and audited 30 packages in 2s\n\n4 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>Now <code>npm outdated</code> should not list any outdated packages:</p> <pre><code>npm-demo $ npm outdated\nnpm-demo $\n</code></pre> <p>And <code>npm-check-updates</code> should not list any outdated packages:</p> <pre><code>npm-demo $ npm-check-updates\nChecking /Users/couballj/npm-demo/package.json\n[====================] 2/2 100%\n\nAll dependencies match the latest package versions :)\nnpm-demo $\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#devdependencies","title":"DevDependencies","text":"<p>Some dependencies are only used when developing the application. These include tools for testing, linting, or other developer tasks.</p> <p>Install a development dependency using the <code>--save-dev</code> flag. Here is an example of installing the <code>jshint</code> linter:</p> <pre><code>npm-demo $ npm install jshint --save-dev\n\nadded 31 packages, and audited 61 packages in 2s\n\n7 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>This command adds a <code>devDependencies</code> property to the project's <code>package.json</code> file:</p> <pre><code>\"devDependencies\": {\n  \"jshint\": \"^2.13.5\"\n}\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#uninstalling-a-package","title":"Uninstalling a Package","text":"<p>The <code>npm uninstall {name}</code> command uninstalls one or more versions of a package. To uninstall the <code>mongoose</code> package:</p> <pre><code>npm-demo $ npm uninstall mongoose\n\nremoved 28 packages, and audited 33 packages in 1s\n\n3 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>This also removes <code>mongoose</code> from <code>package.json</code>:</p> <pre><code>\"dependencies\": {\n  \"commander\": \"^9.4.0\"\n},\n\"devDependencies\": {\n  \"jshint\": \"^2.13.5\"\n}\n</code></pre> <p>To uninstall all packages:</p> <pre><code>$ rm -rf node_modules\n$ rm package-lock.json\n$\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#working-with-global-packages","title":"Working with Global Packages","text":"<p>Node packages that are not specific to an application. This is mostly command line tools that you might use from anywhere.</p> <p>Use the <code>--global</code> or <code>-g</code> flag with <code>npm install</code> to install global packages.</p> <pre><code>npm-demo $ npm install --global npm\n\nchanged 39 packages, and audited 212 packages in 2s\n\n11 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nnpm-demo $\n</code></pre> <p>Global node packages can be listed with <code>npm list --global</code>.</p> <pre><code>npm-demo $ npm list --global\n/usr/local/lib\n\u251c\u2500\u2500 angular@1.8.3\n\u251c\u2500\u2500 markdownlint-cli2@0.5.1\n\u251c\u2500\u2500 npm-check-updates@16.2.1\n\u251c\u2500\u2500 npm@8.18.0\n\u2514\u2500\u2500 webpack-cli@4.9.2\n\nnpm-demo $\n</code></pre> <p>Global packages are installed in <code>/usr/local/lib/node_modules</code> on my computer.</p>"},{"location":"javascript/complete_node_js/03_node_package_manager/#publishing-a-packages","title":"Publishing a Packages","text":"<p>Publishing a package to npmjs.com for others to find and use is very easy.</p> <ol> <li> <p>Create a new project</p> <p>Create the new project folder. Within that folder, create the project's <code>package.json</code> using <code>npm init --yes</code>:</p> <pre><code>jcouball $ mkdir jcouball_node_demo\njcouball $ cd jcouball_node_demo\njcouball_node_demo $ npm init --yes\nWrote to /Users/couballj/jcouball_node_demo/package.json:\n\n{\n  \"name\": \"jcouball_node_demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\njcouball_node_demo $\n</code></pre> </li> <li> <p>Create an <code>index.js</code> file</p> <p><code>index.js</code> is the entrypoint to your package. This is set in <code>package.json</code> using the <code>main</code> property (see above). This file is what is loaded when the package is required.</p> <p>Let's start by defining a function which adds two numbers:</p> <pre><code>module.exports.add = function(a, b) { a + b };\n</code></pre> <p>Users of this module will call the <code>add</code> functions like this:</p> <pre><code>demo = require('jcouball_node_demo');\ndemo.add(1, 3); // the result is 4\n</code></pre> </li> <li> <p>Login to npmjs.com</p> <p>Use the <code>npm login</code> command to log into npmjs.com.</p> </li> <li> <p>Publish the new package</p> <p>Use the <code>npm publish</code> command to push this package to npmjs.com. After running this command, the package can be found on npmjs.com.</p> </li> <li> <p>Use the new package in another project</p> <p>Create a new directory and install the newly created pacakge:</p> <pre><code># Starting from my home directory again\njcouball $ mkdir test\njcouball $ cd test\ntest $ npm install jcouball_node_demo\n\nadded 1 package, and audited 2 packages in 686ms\n\nfound 0 vulnerabilities\ntest $\n</code></pre> <p>In this directory, create a <code>test.js</code> which contains the following:</p> <pre><code>var demo = require('jcouball_node_demo');\nconsole.log(\"4 + 5 = \" + demo.add(4, 5));\n</code></pre> <p>And then run the test script:</p> <pre><code>test $ node test.js\n4 + 5 = 9\ntest $\n</code></pre> </li> </ol>"},{"location":"javascript/complete_node_js/03_node_package_manager/#updating-a-published-package","title":"Updating a Published Package","text":"<p>Let's say we want to add a <code>multiply</code> function to our node module. Back in the <code>jcouball_node_demo</code> project, change the <code>index.js</code> to export the <code>multiply</code> function:</p> <pre><code>module.exports.add = function(a, b) { return a + b };\n\nmodule.exports.multiply = function(a, b) { return a * b };\n</code></pre> <p>Trying to publish this change will result in an error because the version has not been changed:</p> <pre><code>jcouball_node_demo $ npm publish\n...\nnpm notice Publishing to https://registry.npmjs.org/\nnpm ERR! code E403\nnpm ERR! 403 403 Forbidden - PUT https://registry.npmjs.org/jcouball_node_demo - You cannot publish over the previously published versions: 1.0.0.\nnpm ERR! 403 In most cases, you or one of your dependencies are requesting\nnpm ERR! 403 a package version that is forbidden by your security policy, or\nnpm ERR! 403 on a server you do not have access to.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/couballj/.npm/_logs/2022-09-22T15_41_50_014Z-debug-0.log\njcouball_node_demo $\n</code></pre> <p>The version in the <code>package.json</code> file is still <code>1.0.0</code>. In order to publish a different version, we need to update the <code>version</code> property.</p> <p>What should the new version be? Keeping in mind Semantic Versioning, the major version should not be updated since there are no backward incompatible changes. Since we ARE adding a new feature we should increment the minor version.</p> <p>Update the <code>version</code> in <code>package.json</code> using the <code>npm version {part}</code> command where part is the part of the version that needs to be updated: <code>major</code>, <code>minor</code>, or <code>patch</code>. In this case, <code>minor</code> should be specified:</p> <pre><code>jcouball_node_demo $ npm version minor\nv1.1.0\njcouball_node_demo $\n</code></pre> <p>Now, publishing the new version of the package should succeed:</p> <pre><code>jcouball_node_demo $ npm publish\nnpm notice\nnpm notice \ud83d\udce6  jcouball_node_demo@1.1.0\nnpm notice === Tarball Contents ===\nnpm notice 114B index.js\nnpm notice 252B package.json\nnpm notice === Tarball Details ===\nnpm notice name:          jcouball_node_demo\nnpm notice version:       1.1.0\nnpm notice filename:      jcouball_node_demo-1.1.0.tgz\nnpm notice package size:  351 B\nnpm notice unpacked size: 366 B\nnpm notice shasum:        5513293a2e4400f1b35ed534766bfadf7f64315b\nnpm notice integrity:     sha512-Ta9fCoYW1jyTE[...]V9p3kmb/neBZw==\nnpm notice total files:   2\nnpm notice\nnpm notice Publishing to https://registry.npmjs.org/\n+ jcouball_node_demo@1.1.0\njcouball_node_demo $\n</code></pre> <p>Now let's update the <code>test.js</code> script to use the new <code>multiply</code> function:</p> <pre><code>var demo = require('jcouball_node_demo');\nconsole.log(\"4 + 5 = \" + demo.add(4, 5));\nconsole.log(\"4 * 5 = \" + demo.multiply(4, 5));\n</code></pre> <p>An error will result if this script is run before the package is updated:</p> <pre><code>test $ node test.js\n4 + 5 = 9\n/Users/couballj/test/test.js:3\nconsole.log(\"4 * 5 = \" + demo.multiply(4, 5));\n                              ^\n\nTypeError: demo.multiply is not a function\n    at Object.&lt;anonymous&gt; (/Users/couballj/test/test.js:3:31)\n    at Module._compile (node:internal/modules/cjs/loader:1119:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1173:10)\n    at Module.load (node:internal/modules/cjs/loader:997:32)\n    at Module._load (node:internal/modules/cjs/loader:838:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:18:47\n\nNode.js v18.8.0\ntest $\n</code></pre> <p><code>npm list</code> will tell report that the old version of <code>jcouball_node_demo</code> is still being used:</p> <pre><code>test $ npm list\ntest@ /Users/couballj/test\n\u2514\u2500\u2500 jcouball_node_demo@1.0.0\n\ntest $\n</code></pre> <p>Update to the new version of <code>jcouball_node_demo</code>:</p> <pre><code>test $ npm update\n\nchanged 1 package, and audited 2 packages in 651ms\n\nfound 0 vulnerabilities\ntest $ npm list\n</code></pre> <p>Check that the new version is installed:</p> <pre><code>\n</code></pre> <p>Make sure that <code>test.js</code> works now:</p> <pre><code>\n</code></pre> <p>One last thing. Currently, in the <code>test</code> directory, <code>pacakge.json</code> still lists the dependency on any version 1.x of <code>jcouball_node_demo</code>:</p> <pre><code>{\n  \"dependencies\": {\n    \"jcouball_node_demo\": \"^1.0.0\"\n  }\n}\n</code></pre> <p>While we manually updated <code>jcouball_node_demo</code> to version <code>1.1.0</code>, <code>package.json</code> should be updated to indicate any 1.x version greater than <code>1.1.0</code> is required.</p> <p>This can be done by either modifying <code>pacakge.json</code> by hand or by running <code>npm install</code> specifying the exact version number:</p> <pre><code>test $ cat package.json\n{\n  \"dependencies\": {\n    \"jcouball_node_demo\": \"^1.0.0\"\n  }\n}\ntest $ npm install jcouball_node_demo@1.1.0\n\nchanged 1 package, and audited 2 packages in 555ms\n\nfound 0 vulnerabilities\ntest $ cat package.json\n{\n  \"dependencies\": {\n    \"jcouball_node_demo\": \"^1.1.0\"\n  }\n}\ntest $\n</code></pre>"},{"location":"javascript/complete_node_js/03_node_package_manager/#recap","title":"Recap","text":"<ul> <li>Every Node application has a <code>package.json</code> file that includes metadata   about the application. This includes the application's name, version,   dependencies, etc.</li> <li>Use the <code>npm</code> command to create, publish, and use non-core packages from npmjs.com</li> <li>All installed packages and their dependencies are stored in the <code>node_modules</code> folder</li> <li>Node packages follow semantic versioning and have a version number in the form:   <code>{major}.{minor}.{patch}</code> (i.e. <code>1.0.0</code>).</li> </ul> <p>The following <code>npm</code> commands were discussed:</p> NPM Command Description <code>npm init</code> creates <code>package.json</code> file in the current directory <code>npm install NAME</code> install a package <code>npm install NAME@VERSION</code> install a specific version of a package <code>npm install NAME {--save-dev \\| -D}</code> install a package as a development dependency <code>npm uninstall NAME</code> uninstall a package <code>npm list</code> list locally installed packages <code>npm view NAME</code> view the registry metadata for a package <code>npm outdated</code> list outdated packages <code>npm-check-updates</code> updates the version for all dependencies in <code>package.json</code> <code>npm update</code> update install packages to their latest version that satisify the criteria in <code>package.json</code> <code>npm version [&lt;newversion&gt; \\| major \\| minor \\| patch]</code> update the version given in <code>package.json</code> <p>Use the <code>--global</code> or <code>-g</code> flag to operate on global packages instead of local packages.</p>"},{"location":"javascript/complete_node_js/04_express/","title":"The Complete Node.js Course: Building RESTful APIs Using Express","text":""},{"location":"javascript/complete_node_js/04_express/#introduction","title":"Introduction","text":"<p>This chapter will introduce the express npm module for building scalable web applications.</p> <p>Recall that in the HTTP module introduction, we had this code to implement a simple web app that implemented responses for <code>/</code> and <code>/friends</code>:</p> <pre><code>const http = require('http');\nconst server = http.createServer((req, res) =&gt; {\n  if (req.url === '/') {\n    res.write('Hello World');\n    res.end();\n  }\n\n  if (req.url === '/friends') {\n    res.write(JSON.stringify(\n      ['James', 'Frank', 'Ittai', 'Stas']\n    ))\n  }\n});\n\nserver.on('connection', (socket) =&gt; {\n  console.log('New connection...');\n});\n\nserver.listen(3000);\n\nconsole.log('Listening on port 3000...');\n</code></pre> <p>As this web app is extended, a new <code>if</code> block would need to be added for each route. This is not scalable or maintainable.</p> <p>The express framework is a fast, minimalist web framework for node that helps build maintainable web applications.</p>"},{"location":"javascript/complete_node_js/04_express/#restful-service","title":"RESTful Service","text":"<p>REST is an implementation of the client server architecture.</p> <p>REST is short for \"REpresentational State Transfer\". It is a convention for building HTTP services. It defines a protocol to Create, Read, Update, and Delete data. These operations are know as CRUD operations.</p> <p>In REST, you expose data objects as URL end points. For example, you might use the following URL might be the end point to access customers:</p> <pre><code>http://example.com/api/customers\n</code></pre> <p>All operations on customer objects are implemented as an HTTP request to this end point. The type of HTTP request defines the kind of operation to perform.</p> HTTP Request Type Operation GET Reads objects POST Creates new objects PUT Updates objects DELETE Deletes Objects <p>A RESTful application is a web application that follows these conventions:</p> <ul> <li>It exposes resources (aka objects) using a simple meaningful address (like <code>/api/customers</code>   for customers)</li> <li>It supports various operations on those resources such as creating or updating those resources</li> <li>It implements calling those operations via a set of standard HTTP methods</li> <li>It represents data received or data sent as JSON</li> </ul> <p>Here is how a RESTful application might expose customer resources:</p> Operation HTTP Method &amp; URL RequestBody ResponseBody Get customers <code>GET /api/customers</code> N/A List of customers Get a customer <code>GET /api/customers/{id}</code> N/A A single customer Update a customer <code>PUT /api/customers/{id}</code> Customer properties to update The updated customer Delete a customer <code>DELETE /api/customers/{id}</code> N/A The deleted customer Create a customer <code>POST /api/customers</code> A customer The new customer with its id"},{"location":"javascript/complete_node_js/04_express/#introducing-express","title":"Introducing Express","text":"<p>Express is a framework gives our web application structure so that we can easily add new routes while keeping our application maintainable.</p> <p>Create a project and install express:</p> <ol> <li> <p>Create a project directory</p> <pre><code>Projects $ mkdir express-demo\nProjects $ cd express-demo\nexpress-demo $\n</code></pre> </li> <li> <p>Run <code>npm init</code></p> <pre><code>express-demo $ npm init --yes\nWrote to /Users/couballj/SynologyDrive/Documents/Projects/express-demo/package.json:\n\n{\n  \"name\": \"express-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n\nexpress-demo $\n</code></pre> </li> <li> <p>Install <code>express</code></p> <pre><code>express-demo $ npm install express\n\nadded 57 packages, and audited 58 packages in 2s\n\n7 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\nexpress-demo $\n</code></pre> </li> </ol>"},{"location":"javascript/complete_node_js/04_express/#building-your-first-web-server","title":"Building Your First Web Server","text":"<p>Add an <code>index.js</code> file as follows:</p> <pre><code>const express = require('express');\nconst app = express();\n\n app.get('/', (req, res) =&gt; {\n\n\n });\n</code></pre>"},{"location":"javascript/complete_node_js/04_express/#nodemon","title":"Nodemon","text":""},{"location":"javascript/complete_node_js/04_express/#environment-variables","title":"Environment Variables","text":""},{"location":"javascript/complete_node_js/04_express/#route-parameters","title":"Route Parameters","text":""},{"location":"javascript/complete_node_js/04_express/#handling-http-get-requests","title":"Handling HTTP GET Requests","text":""},{"location":"javascript/complete_node_js/04_express/#handling-http-post-requests","title":"Handling HTTP POST Requests","text":""},{"location":"javascript/complete_node_js/04_express/#calling-endpoints-using-postman","title":"Calling Endpoints Using Postman","text":""},{"location":"javascript/complete_node_js/04_express/#input-validation","title":"Input Validation","text":""},{"location":"javascript/complete_node_js/04_express/#handling-http-put-requests","title":"Handling HTTP PUT Requests","text":""},{"location":"javascript/complete_node_js/04_express/#handling-http-delete-requests","title":"Handling HTTP DELETE Requests","text":""},{"location":"javascript/complete_node_js/04_express/#build-the-genres-api-app","title":"Build the Genres API App","text":""},{"location":"javascript/complete_node_js/04_express/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/05_express_advanced/","title":"The Complete Node.js Course: Advanced Express","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#middleware","title":"Middleware","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#creating-custom-middleware","title":"Creating Custom Middleware","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#biult-in-middleware","title":"Biult-in Middleware","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#third-party-middleware","title":"Third-party Middleware","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#environments","title":"Environments","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#configuration","title":"Configuration","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#debugging","title":"Debugging","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#template-engines","title":"Template Engines","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#database-integration","title":"Database Integration","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#authentication","title":"Authentication","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#structuring-express-applications","title":"Structuring Express Applications","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#restructure-the-genres-api-app","title":"Restructure the Genres API App","text":""},{"location":"javascript/complete_node_js/05_express_advanced/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/06_async_javascript/","title":"The Complete Node.js Course: Asynchronous JavaScript","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#patterns-for-dealing-with-asynchronous-code","title":"Patterns for Dealing with Asynchronous Code","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#callbacks","title":"Callbacks","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#callback-hell","title":"Callback Hell","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#named-functions-to-rescue","title":"Named Functions to Rescue","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#promises","title":"Promises","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#replacing-callbacks-with-promises","title":"Replacing Callbacks with Promises","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#creating-settled-promises","title":"Creating Settled Promises","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#running-promises-in-parallel","title":"Running Promises in Parallel","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#async-and-await","title":"Async and Await","text":""},{"location":"javascript/complete_node_js/06_async_javascript/#exercise","title":"Exercise","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/","title":"The Complete Node.js Course: CRUD Operations Using Mongoose","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#installing-mongodb","title":"Installing MongoDB","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#connecting-to-mongodb","title":"Connecting to MongoDB","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#schemas","title":"Schemas","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#models","title":"Models","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#saving-a-document","title":"Saving a Document","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#querying-documents","title":"Querying Documents","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#comparison-query-operators","title":"Comparison Query Operators","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#logical-query-operators","title":"Logical Query Operators","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#regular-expressions","title":"Regular Expressions","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#counting","title":"Counting","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#pagenation","title":"Pagenation","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#updating-a-document-query-first","title":"Updating a Document- Query First","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#updating-a-document-update-first","title":"Updating a Document- Update First","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#removing-documents","title":"Removing Documents","text":""},{"location":"javascript/complete_node_js/07_crud_mongoose/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/","title":"The Complete Node.js Course: Mongo Data Validation","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#built-in-validations","title":"Built-in Validations","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#custom-validations","title":"Custom Validations","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#async-validators","title":"Async Validators","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#validation-errors","title":"Validation Errors","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#schematype-options","title":"SchemaType Options","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#add-persistence-to-genres-api-app","title":"Add Persistence to Genres API App","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#build-the-customers-api","title":"Build the Customers API","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#restructuring-the-projects","title":"Restructuring the Projects","text":""},{"location":"javascript/complete_node_js/08_mongo_data_validation/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/","title":"The Complete Node.js Course: Modeling Relationship in Mongoose","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#modelling-relationships","title":"Modelling Relationships","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#referencing-documents","title":"Referencing Documents","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#population","title":"Population","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#embedding-documents","title":"Embedding Documents","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#using-an-array-of-sub-documents","title":"Using an Array of Sub-documents","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#project-build-the-movies-api","title":"Project- Build the Movies API","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#project-build-the-rentals-api","title":"Project- Build the Rentals API","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#transactions","title":"Transactions","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#objectid","title":"ObjectID","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#validating-objectids","title":"Validating ObjectIDs","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#a-better-implementation","title":"A Better Implementation","text":""},{"location":"javascript/complete_node_js/09_mongoose_relationships/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/10_auth/","title":"The Complete Node.js Course: Authentication and Authorization","text":""},{"location":"javascript/complete_node_js/10_auth/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/10_auth/#creating-the-user-model","title":"Creating the User Model","text":""},{"location":"javascript/complete_node_js/10_auth/#registering-users","title":"Registering Users","text":""},{"location":"javascript/complete_node_js/10_auth/#using-lodash","title":"Using Lodash","text":""},{"location":"javascript/complete_node_js/10_auth/#hashing-passwords","title":"Hashing Passwords","text":""},{"location":"javascript/complete_node_js/10_auth/#authenticating-users","title":"Authenticating Users","text":""},{"location":"javascript/complete_node_js/10_auth/#testing-the-authentication","title":"Testing the Authentication","text":""},{"location":"javascript/complete_node_js/10_auth/#json-web-tokens","title":"JSON Web Tokens","text":""},{"location":"javascript/complete_node_js/10_auth/#generating-authentication-tokens","title":"Generating Authentication Tokens","text":""},{"location":"javascript/complete_node_js/10_auth/#storing-secrets-in-environment-variables","title":"Storing Secrets in Environment Variables","text":""},{"location":"javascript/complete_node_js/10_auth/#setting-response-headers","title":"Setting Response Headers","text":""},{"location":"javascript/complete_node_js/10_auth/#encapsulating-logic-in-mongoose-models","title":"Encapsulating Logic in Mongoose Models","text":""},{"location":"javascript/complete_node_js/10_auth/#authorization-middleware","title":"Authorization Middleware","text":""},{"location":"javascript/complete_node_js/10_auth/#protecting-routes","title":"Protecting Routes","text":""},{"location":"javascript/complete_node_js/10_auth/#getting-the-current-user","title":"Getting the Current User","text":""},{"location":"javascript/complete_node_js/10_auth/#logging-out-users","title":"Logging Out Users","text":""},{"location":"javascript/complete_node_js/10_auth/#role-based-authorization","title":"Role-based Authorization","text":""},{"location":"javascript/complete_node_js/10_auth/#testing-the-authorization","title":"Testing the Authorization","text":""},{"location":"javascript/complete_node_js/10_auth/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/11_errors/","title":"The Complete Node.js Course: Handling and Logging Errors","text":""},{"location":"javascript/complete_node_js/11_errors/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/11_errors/#handling-rejected-promises","title":"Handling Rejected Promises","text":""},{"location":"javascript/complete_node_js/11_errors/#express-error-middleware","title":"Express Error Middleware","text":""},{"location":"javascript/complete_node_js/11_errors/#removing-try-catch-blocks","title":"Removing Try Catch Blocks","text":""},{"location":"javascript/complete_node_js/11_errors/#express-async-errors","title":"Express Async Errors","text":""},{"location":"javascript/complete_node_js/11_errors/#logging-errors","title":"Logging Errors","text":""},{"location":"javascript/complete_node_js/11_errors/#logging-to-mongodb","title":"Logging to MongoDB","text":""},{"location":"javascript/complete_node_js/11_errors/#uncaught-exceptions","title":"Uncaught Exceptions","text":""},{"location":"javascript/complete_node_js/11_errors/#unhandled-promise-rejections","title":"Unhandled Promise Rejections","text":""},{"location":"javascript/complete_node_js/11_errors/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/11b_refactoring/","title":"The Complete Node.js Course: Refactoring","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#extracting-routes","title":"Extracting Routes","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#extracting-db-logic","title":"Extracting DB Logic","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#extracting-the-logging-logic","title":"Extracting the Logging Logic","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#extracting-the-config-logic","title":"Extracting the Config Logic","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#extracting-the-validation-logic","title":"Extracting the Validation Logic","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#showing-unhandled-exceptions-on-the-console","title":"Showing Unhandled Exceptions on the Console","text":""},{"location":"javascript/complete_node_js/11b_refactoring/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/12_unit_testing/","title":"The Complete Node.js Course: Unit Testing","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#what-is-automated-testing","title":"What is Automated Testing","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#benefits-of-automated-testing","title":"Benefits of Automated Testing","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#types-of-tests","title":"Types of Tests","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#test-paramid","title":"Test Paramid","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#tooling","title":"Tooling","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#writing-your-first-unit-test","title":"Writing Your First Unit Test","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#continuously-running-tests","title":"Continuously Running Tests","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#exercise-testing-the-fizzbuz","title":"Exercise- Testing the FizzBuz","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#creating-simple-mock-functions","title":"Creating Simple Mock Functions","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#interaction-testing","title":"Interaction Testing","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#jest-mock-functions","title":"Jest Mock Functions","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#what-to-unit-test","title":"What to Unit Test","text":""},{"location":"javascript/complete_node_js/12_unit_testing/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/13_integration_testing/","title":"The Complete Node.js Course: Integration Testing","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#preparing-the-app","title":"Preparing the App","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#setting-up-the-test-db","title":"Setting Up the Test Db","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#your-first-integration-test","title":"Your First Integration Test","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#pipulating-the-test-db","title":"Pipulating the Test Db","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#testing-routes-with-parameters","title":"Testing Routes with Parameters","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#validating-objectids","title":"Validating ObjectIDs","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#refactoring-with-confidence","title":"Refactoring with Confidence","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#tesing-the-authorization","title":"Tesing the Authorization","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#testing-the-invalid-inputs","title":"Testing the Invalid Inputs","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#testing-the-happy-path","title":"Testing the Happy Path","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#writing-clean-tests","title":"Writing Clean Tests","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#testing-the-auth-middleware","title":"Testing the Auth Middleware","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#unit-testing-the-auth-middleware","title":"Unit Testing the Auth Middleware","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#code-coverage","title":"Code Coverage","text":""},{"location":"javascript/complete_node_js/13_integration_testing/#recap","title":"Recap","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/","title":"The Complete Node.js Course: Test Driven Development","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#implementing-the-returns","title":"Implementing the Returns","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#test-cases","title":"Test Cases","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#populating-the-database","title":"Populating the Database","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-authorization","title":"Testing the Authorization","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-input","title":"Testing the Input","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#refactoring-tests","title":"Refactoring Tests","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#looking-up-an-object","title":"Looking Up an Object","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-if-rental-processed","title":"Testing if Rental Processed","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-valid-request","title":"Testing the Valid Request","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-returndate","title":"Testing the ReturnDate","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-rentalfee","title":"Testing the RentalFee","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-movie-stock","title":"Testing the Movie Stock","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#testing-the-response","title":"Testing the Response","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#refactoring-the-validation-logic","title":"Refactoring the Validation Logic","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#mongoose-static-methods","title":"Mongoose Static Methods","text":""},{"location":"javascript/complete_node_js/14_test_driven_development/#refactoring-the-domain-logic","title":"Refactoring the Domain Logic","text":""},{"location":"javascript/complete_node_js/15_deployment/","title":"The Complete Node.js Course: Deployment","text":""},{"location":"javascript/complete_node_js/15_deployment/#introduction","title":"Introduction","text":""},{"location":"javascript/complete_node_js/15_deployment/#preparing-the-app-for-production","title":"Preparing the App for Production","text":""},{"location":"javascript/complete_node_js/15_deployment/#getting-started-with-heroku","title":"Getting Started with Heroku","text":""},{"location":"javascript/complete_node_js/15_deployment/#preparing-the-app-for-heroku","title":"Preparing the App for Heroku","text":""},{"location":"javascript/complete_node_js/15_deployment/#adding-the-code-to-a-git-repository","title":"Adding the Code to a Git REpository","text":""},{"location":"javascript/complete_node_js/15_deployment/#deploying-to-heroku","title":"Deploying to Heroku","text":""},{"location":"javascript/complete_node_js/15_deployment/#viewing-logs","title":"Viewing Logs","text":""},{"location":"javascript/complete_node_js/15_deployment/#setting-environment-variables","title":"Setting Environment Variables","text":""},{"location":"javascript/complete_node_js/15_deployment/#mongodb-in-the-cloud","title":"MongoDB in the Cloud","text":""},{"location":"javascript/complete_node_js/15_deployment/#wrap-up","title":"Wrap Up","text":""},{"location":"javascript/complete_node_js/15_deployment/#what-to-learn-next","title":"What to Learn Next","text":""},{"location":"javascript/ultimate_javascript_mastery/01_types/","title":"Ultimate JavaScript Mastery: Types","text":""},{"location":"javascript/ultimate_javascript_mastery/01_types/#primitive-value-types","title":"Primitive / Value Types","text":"<ul> <li>String</li> <li>Number</li> <li>Boolean</li> <li>undefined</li> <li>null</li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/01_types/#reference-types","title":"Reference Types","text":"<ul> <li>Object</li> <li>Array</li> <li>Function</li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/01_types/#operators","title":"Operators","text":"<ul> <li>Arithmetic</li> <li>Assignment</li> <li>Comparison</li> <li>Equality</li> <li>Ternary: cond ? IfTrue : ifFalse;</li> <li>Logical: &amp;&amp;, ||, !</li> <li>Bitwise: &amp;, |, ^</li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/01_types/#operator-precedence","title":"Operator Precedence","text":"<ul> <li>It is a thing</li> <li>Use parenthesis if you aren\u2019t sure</li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/","title":"Ultimate JavaScript Mastery: Control Flow","text":""},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#ifelse","title":"if\u2026else","text":"<pre><code>if (condition) {\n statement\n}\nelse if (anotherCondition) {\n statement\n}\nelse if (yetAnotherCondition) {\n statement\n}\nelse {\n}\n</code></pre> <p>Curley braces can be left off for only a single statement.</p>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#switchcase","title":"switch\u2026case","text":"<pre><code>let role;\nswitch (role) {\n case \u2018guest\u2019:\n  console.log(\u2018Guest User\u2019)\n  break;\n case \u2018moderator\u2019:\n  console.log(\u2018Moderator User\u2019);\n  break;\n default:\n  console.log(\u2018Unknown User\u2019);\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#for-loop","title":"for loop","text":"<pre><code>for (init ; cond; inc) {\n statement\n}\n</code></pre> <pre><code>for (let i = 0; i &lt; 5 ; i++) {\n console.log(i);\n}\n</code></pre> <p>Just like the \u2018if\u2019 statement, Curley braces can be left off if statement is a single statement</p>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#while-loop","title":"while loop","text":"<pre><code>while (cond) {\n  statements\n}\n</code></pre> <p>Equalivent to the for loop above:</p> <pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#do-while-loop","title":"do... while loop","text":"<pre><code>do {\n  statements\n} while (cond);\n</code></pre> <p>Equalivent to the for loop above:</p> <pre><code>let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#for-in-loop","title":"for... in loop","text":"<p>Iterate over properties in an object</p> <pre><code>const person = {\n name: \u2018James\u2019,\n age: 19\n};\nfor (let propertyName in person)\n console.log(propertyName, person[propertyName]);\n</code></pre> <p>Can be used to iterate over an array as follows:</p> <pre><code>const colors = [\u2018red\u2019, \u2018green\u2019, \u2018blue\u2019];\nfor (let index in colors)\n console.log(index, colors[index]);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#for-of-loop","title":"for... of loop","text":"<p>Iterate over elements in an array</p> <pre><code>const colors = [\u2018red\u2019, \u2018green\u2019, \u2018blue\u2019];\nfor (let color of colors)\n console.log(color);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/02_control_flow/#break-and-continue","title":"break and continue","text":"<p>Changes how the loop behaves</p> <p>Use <code>break</code> to exit the loop:</p> <pre><code>let i = 0;\nwhile (i &lt;= 10) {\n  if (i === 5) break; // break out of the loop when i is 5\n  console.log(i);\n  i++;\n}\n</code></pre> <p>Use <code>continue</code> to jump to the next iteration. The following only prints odd numbers:</p> <pre><code>// Write odd numbers to the console log\n\nlet i = 0;\nwhile (i &lt;= 10) {\n  if (i % 2) === 0) {\n   i++;\n   continue;\n  }\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/","title":"Ultimate JavaScript Mastery: Objects","text":""},{"location":"javascript/ultimate_javascript_mastery/03_objects/#objects","title":"Objects","text":"<p>By convention, factory functions are named create____ using camel case.</p>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#object-literal","title":"Object Literal","text":"<pre><code>const person = { name: 'James', age: 29 };\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#factory-functions","title":"Factory Functions","text":"<pre><code>function createPerson(name, age) {\n  { name, age };\n  // Equilavent to:\n  // { name: name, age: age }\n}\nconst person = createPerson('James', 29);\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#constructor-functions","title":"Constructor Functions","text":"<pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = 29\n}\nconst person = new Person('James', 29);\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#functions-are-objects","title":"Functions are Objects","text":"<p>Functions are objects with their own properties and methods</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = 29;\n}\nconsole.log(Person.name);\nconsole.log(Person.length); // # of properties\nconsole.log(Person.constructor);\n</code></pre> <p>There is a function construction function:</p> <pre><code>new Function(...args, body)\n</code></pre> <p>To define the <code>Person</code> function with <code>new Function</code>:</p> <pre><code>const Person = new Function('name', 'age', `\n  this.name = name;\n  this.age = age;\n`);\nconst person = new Person('James', 29);\nconsole.log(person);\n</code></pre> <p>You can call a function using <code>.call</code>:</p> <pre><code>function call(this, ...args);\n</code></pre> <p>Here is an example:</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = 29;\n  return this;\n}\nconst person = Person.call({}, 'James', 29);\nconsole.log(person);\n</code></pre> <p>If you already have arguments in an array, use <code>.apply</code> instead:</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = 29;\n  return this;\n}\nconst args = ['James', 29];\nconst person = Person.apply({}, args);\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#enumerating-object-properties","title":"Enumerating Object Properties","text":"<p>Use a <code>for... in</code> loop to iterate properties:</p> <pre><code>const person = { name: 'James', age: 29 }\nfor (let key in person)\n  console.log(key, person[key]);\n</code></pre> <p>Using a <code>for... of</code> loop will not work because an object is not iterable:</p> <pre><code>const person = { name: 'James', age: 29 };\nfor (let propertyValue of person) // TypeError: person is not iterable\n  console.log(propertyValue);\n</code></pre> <p>Instead, use a <code>for.. of</code> loop with <code>Object.keys</code>:</p> <pre><code>const person = { name: 'James', age: 29 };\nfor (let key of Object.keys(person))\n  console.log(key, person[key]);\n</code></pre> <p>or <code>Object.entries</code>:</p> <pre><code>const person = { name: 'James', age: 29 };\nfor (let kv of Object.entries(person))\n  console.log(kv[0], kv[1]);\n</code></pre> <p>To see if a property exists, use the <code>in</code> operator:</p> <pre><code>const person = { name: 'James', age: 29 };\n\nif ('name' in person) console.log('yes')\nelse console.log('no');\n\nif ('id' in person) console.log('yes')\nelse console.log('no');\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#cloning-an-object","title":"Cloning an Object","text":"<p>Copy an object by copying it's properties to a new object.</p> <pre><code>const person = { name: 'James', age: 29 };\nconst other = {};\nfor (let key in person)\n  other[key] = person[key];\nconsole.log(other);\n</code></pre> <p>The more modern way:</p> <pre><code>const person = { name: 'James', age: 29 };\nconst other = Object.assign({}, person);\nconsole.log(other);\n</code></pre> <p>Using the Spread Operator:</p> <pre><code>const person = { name: 'James', age: 29 };\nconst other = { ...person };\nconsole.log(other);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#math-object","title":"Math Object","text":"<p>Important properties / methods:</p> <ul> <li><code>Math.PI</code>, \u2026</li> <li><code>Math.abs(x)</code>, <code>Math.floor(x)</code>, <code>Math.round(x)</code>, <code>Math.random()</code></li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#string-object","title":"String Object","text":"<p>A primitive type DOES NOT have properties and methods.</p> <p>In JavaScript there are two kinds of strings:</p> <pre><code>// String primitive\nconst str1 = 'hi';\nconsole.log(typeof str1); // string\n\n// String object\nconst str2 = new String('hi');\nconsole.log(typeof str2); // object\n</code></pre> <p>When the dot notation is used with a String primitive, JavaScript internally converts the String primitive to a String object.</p> <p>Important String methods:</p> <ul> <li>const message = \u2018This is my first message\u2019;</li> <li>message.length</li> <li>message[0]</li> <li>message.includes(substr);</li> <li>message.startsWith(str);</li> <li>message.endsWith(str);</li> <li>message.indexOf(\u2018my\u2019); //=&gt; 8</li> <li>message.replace(replaceThis, withThat);</li> <li>message.toUpperCase();</li> <li>message.toLowerCase();</li> <li>message.trim(); // also trimLeft and trimRight</li> </ul> <p>Escape notation</p> <ul> <li>\\0, \\\u2019, \\\u201d, \\, \\n, \\r, \\v, \\t</li> </ul>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#template-literal","title":"Template Literal","text":"<p>An alternate way to create a String that avoids quoting, escaping, and concatenation.</p> <pre><code>const fullName = 'Frank';\n\n// Without string template\nconst str1 = 'Hi ' + fullName +',\\n\\nThank you for signing up.\\n\\nSincerely,\\nJames';\nconsole.log(str1);\n\n// With string template\nconst str2 = `Hi ${fullName},\n\nThank you for signing up.\n\nSincerely,\nJames.`;\nconsole.log(str2);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/03_objects/#date-object","title":"Date Object","text":"<p>Represents a time by giving date and time of day.</p> <pre><code>const now = new Date(); // Current date &amp; time\nconsole.log(now);\n\nconst date1 = new Date('March 15 1967 3:15 AM');\nconsole.log(date1);\n\nconst year = 1967;\nconst month = 2; // 0-base month # for March\nconst day = 15;\n// also takes the following optional arguments: hour, min, sec, ms (default is 0)\nconst date2 = new Date(year, month, day);\nconsole.log(date2);\n</code></pre> <p>MONTH IS ZERO BASED!</p> <p>Interesting Date methods:</p> <pre><code>now.toDateString(); // \"Thu May 11 2017\"\nnow.toTimeString(); // \"11:35:01 GMT-0700 (PDT)\"\nnow.toISOString(); // \"2017-05-11T18:35:01.212Z\"\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/","title":"Ultimate JavaScript Mastery: Arrays","text":""},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#adding-elements","title":"Adding Elements","text":"<p>Use <code>push</code> and <code>unshift</code>:</p> <pre><code>const numbers = [3, 4];\nnumbers.push(5, 6);\nnumbers.unshift(1, 2);\nconsole.log(numbers);\n</code></pre> <p>Use <code>splice</code> to add elements to the middle of an array:</p> <pre><code>Array.splice(startIndex, deleteCount, ...itemsToAdd);\n</code></pre> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\nnumbers.splice(2, 0, 2.25, 2.5, 2.75);\nconsole.log(numbers);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#finding-elements","title":"Finding Elements","text":""},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#primitives","title":"Primitives","text":"<p>To find primitives in an array, use <code>indexOf</code>.  This method uses the strict equality operator (<code>===</code>) for comparisons.</p> <pre><code>Array.indexOf(searchElement, fromIndex);\n</code></pre> <pre><code>const numbers = [1, 2, 3, 1, 4];\nconsole.log(numbers.indexOf('a')) // -1\nconsole.log(numbers.indexOf(1)) // 0\nconsole.log(numbers.indexOf('1')) // -1 (since '1' is a string)\nconsole.log(numbers.indexOf(1, 1)) // 3 (since startIndex skips the first entry)\n</code></pre> <p>or <code>lastIndexOf</code>:</p> <pre><code>Array.lastIndexOf(searchElement, fromIndex);\n</code></pre> <pre><code>const numbers = [1, 2, 3, 1, 4];\nconsole.log(numbers.lastIndexOf(1)); // 3\nconsole.log(numbers.lastIndexOf(1, 2)); // 0\nconsole.log(numbers.lastIndexOf(1, -2)); // 3\nconsole.log(numbers.lastIndexOf(1, -3)); // 0\n</code></pre> <p>or <code>includes</code>:</p> <pre><code>const numbers = [1, 2, 3, 4];\nconsole.log(numbers.includes(9)); // false\nconsole.log(numbers.includes(1)); // true\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#reference-types","title":"Reference Types","text":"<p>Since <code>indexOf</code>, <code>lastIndexOf</code>, and <code>includes</code> uses the strict comparison operator, array elements can not be found based on their attribute values.</p> <pre><code>const people = [\n  { id: 1, name: 'James' },\n  { id: 2, name: 'Frank' }\n];\nconsole.log(people.includes({ id: 3, name: 'Frank' })); // false!\n</code></pre> <p>Instead, for reference types, use <code>find</code>. <code>find</code> returns <code>undefined</code> if an element is not found:</p> <pre><code>const people = [\n  { id: 1, name: 'James' },\n  { id: 2, name: 'Frank' }\n];\n\nperson = people.find (function(p) {\n  return p.name == 'Frank';\n});\nconsole.log(person); // { id: 2, name: 'Frank' }\n\nperson = people.find (function(p) {\n  return p.name == 'Margaret';\n});\nconsole.log(person); // undefined\n</code></pre> <p>There is a similar methods called <code>findIndex</code> which returns the index or -1 if a matching item could not be found.</p>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#arrow-functions","title":"Arrow Functions","text":"<p>Normally, when passing a function, you define the function like this:</p> <pre><code>const letters = ['a', 'b', 'c', 'd'];\nindex = letters.findIndex(function(l) {\n  return l === 'c';\n});\nconsole.log(index); // 2\n</code></pre> <p>Arrow functions are a shortcut for passing functions:</p> <pre><code>const letters = ['a', 'b', 'c', 'd'];\nindex = letters.findIndex(l =&gt; l == 'c');\nconsole.log(index); // 2\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#removing-elements","title":"Removing Elements","text":"<p>Use <code>pop</code> to remove an item from the end of an array;</p> <pre><code>const numbers = [1, 2, 3, 4];\nconsole.log(numbers.pop()); // 4\nconsole.log(numbers); // [1, 2, 3]\n</code></pre> <p>Use <code>shift</code> to remove an item from the beginning of an array:</p> <pre><code>const numbers = [1, 2, 3, 4];\nconsole.log(numbers.shift()); // 1\nconsole.log(numbers); // [2, 3, 4]\n</code></pre> <p>Use <code>splice</code> to remove items from the middle of an array. <code>splice</code> returns the elements removed:</p> <pre><code>const numbers = [1, 2, 3, 4];\n// Remove the middle two elements\nconsole.log(numbers.splice(1, 2)); // [2, 3]\nconsole.log(numbers); // [1, 4]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#emptying-an-array","title":"Emptying an Array","text":"<p>There are several solutions.  Go with solution #1 or #2 if possible.</p> <p>Solution 1 (only works if array isn't a <code>const</code>):</p> <pre><code>let numbers = [1, 2, 3, 4];\nnumbers = [];\nconsole.log(numbers); // [ ]\n</code></pre> <p>Solution 2 (setting the length to zero):</p> <pre><code>const numbers = [1, 2, 3, 4]\nnumbers.length = 0;\nconsole.log(numbers); // [ ]\n</code></pre> <p>Solution 3 (using <code>slice</code>):</p> <pre><code>const numbers = [1, 2, 3, 4]\nnumbers.splice(0, numbers.lenght);\nconsole.log(numbers); // [ ]\n</code></pre> <p>Solution 4 (using a <code>while</code> loop and <code>pop</code>/<code>shift</code>):</p> <pre><code>const numbers = [1, 2, 3, 4];\nwhile (numbers.length &gt; 0) numbers.pop();\nconsole.log(numbers); // [ ]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#combining-and-slicing-arrays","title":"Combining and Slicing Arrays","text":"<p>Use <code>Array.concat</code> which returns a copy of the array:</p> <pre><code>const first = [1, 2, 3];\nconst second = [4, 5, 6];\nresult = first.concat(second);\nconsole.log(first, second, result); // [1, 2, 3] [4, 5, 6] [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Use <code>slice</code> to slice an array. <code>slice</code> returns a shallow copy of the array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 6];\nconsole.log(numbers.slice()); // [1, 2, 3, 4, 5, 6]\nconsole.log(numbers.slice(2)); // [3, 4, 5, 6]\nconsole.log(numbers.slice(2, 4)); // [3, 4]\n// the original array is not changed\nconsole.log(numbers); // [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#the-spread-operator","title":"The Spread Operator","text":"<p>The spread operator (<code>...</code>) can be used to concatenate mutiple arrays.  It also allows mixing in other new elements too.</p> <pre><code>const first = [1, 2, 3];\nconst second = [4, 5, 6];\nconst combined = [0, ...first, ...second, 7];\nconsole.log(combined); // [0, 1, 2, 3, 4, 5, 6, 7]\n</code></pre> <p>The spread operator can be used to do a shallow copy of an array:</p> <pre><code>const numbers = [1, 2, 3];\nconst copy = [...numbers];\nconsole.log(copy); // [1, 2, 3]\nconsole.log(numbers === copy); // false\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#iterating-an-array","title":"Iterating an Array","text":"<p>Iterating with a <code>for... of</code> loop:</p> <pre><code>const numbers = [1, 2, 3];\nfor (let number of numbers)\n  console.log(number);\n</code></pre> <p>or use the <code>forEach</code> method:</p> <pre><code>const numbers = [1, 2, 3];\nnumbers.forEach((n, i) =&gt; console.log(i, n));\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#joining-arrays","title":"Joining Arrays","text":"<p>The <code>join</code> method concatenates each element into a string with an optional separator:</p> <pre><code>const numbers = [1, 2, 3];\nconsole.log(numbers.join(', ')); // '1, 2, 3'\n</code></pre> <p>This method is the opposite of the <code>String</code> <code>split</code> method:</p> <pre><code>const str = '1, 2, 3';\nconsole.log(str.split(', ')); // ['1', '2', '3']\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#sorting-arrays","title":"Sorting Arrays","text":"<p>The <code>sort</code> method converts each array element to a string and then sorts the result:</p> <pre><code>const numbers = [2, 3, 1];\nnumbers.sort(1, 2, 3);\n</code></pre> <p>Provide your own comparison function to <code>sort</code> to control the sort order:</p> <pre><code>const people = [\n  { id: 1, name: 'James' },\n  { id: 2, name: 'alfred' }\n];\n\n// Case insensative sort\nfunction compare(a, b) {\n  const aName = a.name.toLowerCase();\n  const bName = b.name.toLowerCase();\n  if (aName &lt; bName) return -1;\n  if (aName &gt; bName) return 1;\n  return 0;\n}\n\npeople.sort((a, b) =&gt; compare(a, b));\nconsole.log(people); // [ { id: 2, 'Alfred' }, { id: 1, 'James' } ]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#reversing-arrays","title":"Reversing Arrays","text":"<p>Use <code>reverse</code> method to reverse the order of an array. Modifies the array in place.</p> <pre><code>const numbers = [1, 2, 3];\nnumbers.reverse();\nconsole.log(numbers); // [3, 2, 1]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#testing-the-elements-of-an-array","title":"Testing the Elements of an Array","text":"<p>Use <code>every</code> to see if every element in an array meet some criteria:</p> <pre><code>const numbers = [1, 2, 3];\nconst allPositive = numbers.every(value =&gt; value &gt;= 0);\nconsole.log(allPositive); // true\nconst allOdd = numbers.every(value =&gt; value % 2 != 0);\nconsole.log(allOdd); // false\n</code></pre> <p>Use <code>some</code> to see if any element in an array meets some criteria:</p> <pre><code>const numbers = [1, 2, 3];\nconst somePositive = numbers.some(value =&gt; value &gt;= 0);\nconsole.log(somePositive); // true\nconst someNegative = numbers.some(value =&gt; value &lt; 0);\nconsole.log(someNegative); // false\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#filtering-an-array","title":"Filtering an Array","text":"<p>Use <code>filter</code> to select only array elements that match some criteria. Returns a new array.</p> <pre><code>const numbers = [1, -1, 2, 3];\nconst positiveNumbers = numbers.filter(num =&gt; num &gt;= 0);\nconsole.log(positiveNumbers); // [1, 2, 3]\n</code></pre> <p>An example working on objects instead of primitives:</p> <pre><code>const people = [\n  { name: 'James', age: 19 },\n  { name: 'Bob', age 32 },\n  { name: 'Mary', age: 50 }\n];\n\nconst teenagers = people.filter(p =&gt; p.age &gt;= 13 &amp;&amp; p.age &lt;= 19);\nconsole.log(teenagers); // [ { name: 'James', age: 19 } ]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#mapping-an-array","title":"Mapping an Array","text":"<p>Transform each element in one array into something else stored in another array. Returns a new array.</p> <pre><code>const numbers = [1, 2, 3];\nconst doubledNumbers = numbers.map(n =&gt; ({ value: n }));\nconsole.log(doubledNumbers); // [ { value: 1 }, { value: 2 }, { value: 3 } ]\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/04_arrays/#reducing-an-array","title":"Reducing an Array","text":"<p>To sum the elements of an array:</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\n\nlet sum = 0;\nfor (let n of numbers) sum += n;\n\nconsole.log(sum); // 15\n</code></pre> <p>Use the <code>reduce</code> method to reduce all elements of an array to a single value:</p> <pre><code>const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.reduce((accumulator, currentValue) =&gt; accumulator + currentValue);\nconsole.log(sum); // 15\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/","title":"Ultimate JavaScript Mastery: Functions","text":""},{"location":"javascript/ultimate_javascript_mastery/05_functions/#function-declarations-vs-expressions","title":"Function Declarations vs. Expressions","text":"<p>Functions are objects. The can be anonymous.</p> <pre><code>// Function declaration\nfunction walk() {\n  console.log('walk');\n}\n\n// Anonymous function expression\nlet run = function() { console.log('run') };\n\n// Named function expression\nlet run2 = function run2Function() { console.log('run') };\n\nrun(); // 'run'\n\nlet move = walk;\nmove(); // 'walk'\nmove = run;\nmove(); // 'run'\n</code></pre> <p>Function declarations can be used before it is defined. With function expressions, the variable must be in-scope and set before calling the function.</p>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#hoisting","title":"Hoisting","text":"<p>Hoisting is the process of moving function declarations to the top of the code. This is why functions defined with declarations can be used before their defined.</p>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#arguments","title":"Arguments","text":"<p>The <code>arguments</code> function returns an array of the arguments passed to it.</p> <pre><code>function sum(a, b) {\n  return a + b;\n}\nconsole.log(sum(1, 2)); // 3\nconsole.log(sum(1)); // NaN... trying to add 1 + undefined\n\nfunction safeSum() {\n  let total = 0;\n  for (let n of arguments) { total += n; }\n  return total;\n}\n\nconsole.log(safeSum(1)); // 1\nconsole.log(safeSum(1, 2)); // 3\nconsole.log(safeSum(1, 2, 3, 4, 5)); // 1\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#the-rest-operator","title":"The Rest Operator","text":"<p>The rest operator (<code>...</code>) can be used to collect the rest of the arguments passed to a function as an array. It can only be used at the end of the argument list.</p> <pre><code>function safeSum(...args) {\n  return args.reduce((a, n) =&gt; a + n);\n}\n\nconsole.log(safeSum(1)); // 1\nconsole.log(safeSum(1, 2)); // 3\nconsole.log(safeSum(1, 2, 3, 4, 5)); // 1\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#default-parameters","title":"Default Parameters","text":"<p>Set default values in the function definition. By default, the default value for an argument is <code>undefined</code>.</p> <pre><code>function interest(principal, rate = 3.5, years = 5) {\n  return principal * rate / 100 * years\n}\n\nconsole.log(interest(10000, 3.5, 5)); // 1750\nconsole.log(interest(10000)); // 1750\n\n// Passing undefined will cause the default value to be used\nconsole.log(interest(10000, undefined, 5)); // 1750\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#getters-and-setters","title":"Getters and Setters","text":"<p>Approach to creating a dynamic property with a method:</p> <pre><code>const person = {\n  firstName: 'James',\n  lastName: 'Couball',\n  fullName() { return `${person.firstName} ${person.lastName}` }\n};\n\n// Get the fullName 'property' using a method\nconsole.log(person.fullName()); // 'James Couball'\n</code></pre> <p>Prefix the method with the <code>get</code> keyword to make a getter that is accessed like a property. A setter is similarly create with the <code>set</code> keyword:</p> <pre><code>const person = {\n  firstName: 'James',\n  lastName: 'Couball',\n  get fullName() {\n    return `${person.firstName} ${person.lastName}`\n  },\n  set fullName(value) {\n    const parts = value.split(' ');\n    this.firstName = parts[0];\n    this.lastName = parts[1];\n  }\n};\n\n// Looks like a property instead of a method call\nperson.fullName = 'John Smith';\n\n// { firstName: 'John', lastName: 'Smith', fullName: [Getter/Setter] }\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#try-catch-finally-throw","title":"<code>try</code> / <code>catch</code> / <code>finally</code> / <code>throw</code>","text":"<p>A function can signal error conditions by throwing an error using the <code>throw</code> keyword.</p> <pre><code>const person = {\n  firstName: 'James',\n  lastName: 'Couball',\n  set fullName(value) {\n    if (typeof value !== 'string')\n      throw new Error('value must be a string');\n\n    const parts = value.split(' ');\n    if (parts.length != 2)\n      throw new Error('value must include only a first and last name')\n\n    this.firstName = parts[0];\n    this.lastName = parts[1];\n  }\n};\n\ntry {\n  person.fullName = null;\n}\ncatch (e) {\n  console.log(e.message); // 'value must be a string'\n}\n\ntry {\n  person.fullName = 'Madonna';\n}\ncatch (e) {\n  console.log(e.message); // 'value must include only a first and last name'\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#local-vs-global-scope-and-let-vs-var","title":"Local vs Global Scope and <code>let</code> vs <code>var</code>","text":"<p>The scope of a variable deteremines where the variable is accessible.</p> <p><code>let</code> and  <code>const</code> define block-scoped variables: they are only accessible in the block they are defined in.</p> <p><code>var</code> defines function-scoped variables. Using <code>var</code> outside of a function  creates a global variable and attaches it to the <code>window</code> object. This is  could cause variables or functions to be overwritten in the <code>window</code> object.</p> <p>Variables defined in a block take precedence (or shadow) variables defined globally or in a scope outside the current block.</p>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#the-this-keyword","title":"The <code>this</code> Keyword","text":"<p><code>this</code> is the object that is executing the current function.</p> <p>For a method (a function of an object), <code>this</code> is a reference to the object for which the method was called:</p> <pre><code>const video = {\n  title: 'a',\n  play() {\n    console.log(this); // { title: 'a', play: [Function: play] }\n  }\n};\n\nvideo.stop = function() {\n  console.log(this); // { title: 'a', play: [Function: play] }\n}\n\nvideo.play();\nvideo.stop();\n</code></pre> <p>For a function (not part of an object), <code>this</code> is a reference to either <code>window</code> (in browsers) or  <code>global</code> (in Node):</p> <pre><code>const video = {\n  title: 'a';\n};\n\nfunction playVideo() {\n  console.log(this); // &lt;ref *1&gt; Object [global] { ... }\n}\n\nplayVideo();\n</code></pre> <p>In a constructor function, <code>this</code> is set to the new object via the <code>new</code> keyword:</p> <pre><code>function Video(title) {\n  this.title = title;\n  console.log(this); // Video { title: 'a' }\n}\n\nconst v = new Video('a');\n</code></pre> <p>Inside a callback function, <code>this</code> is set to the global object. This can lead to surprising results as the following use of <code>forEach</code> illustrates:</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3'],\n  showTags() {\n    this.tags.forEach(function(tag) {\n      // `this` references the global object so video's `title` property is not available\n      console.log(this.title, tag);\n    })\n  }\n};\n\nvideo.showTags();\n</code></pre> <p>results in the following output to the console:</p> <pre><code>undefined t1\nundefined t2\nundefined t3\n</code></pre> <p>Many callback functions like <code>forEach</code> allow you to specify what <code>this</code> is inside the callback function in a second argument after the callback function:</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3'],\n  showTags() {\n    this.tags.forEach(function(tag) {\n      // now `this` references the video object\n      console.log(this.title, tag);\n    }, this)\n  }\n};\n\nvideo.showTags();\n</code></pre> <p>results in the following output:</p> <pre><code>a t1\na t2\na t3\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/05_functions/#changing-this","title":"Changing <code>this</code>","text":"<p><code>this</code> references the object that is executing.</p> <p>Some callback functions do not allow <code>this</code> to be set.</p> <p>One way to work around this it to set a block-scoped variable (you might name it <code>that</code> or <code>self</code>) in a block that encloses the callback function. Here is how it would work with the <code>forEach</code> example from the last section:</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3'],\n  showTags() {\n    const self = this;\n    this.tags.forEach(function(tag) {\n      // `this` references the global object\n      // `self` references video\n      console.log(self.title, tag);\n    })\n  }\n};\n\nvideo.showTags();\n</code></pre> <p>Function methods <code>call</code> and  <code>apply</code> allow <code>this</code> to be set for a function call.  <code>bind</code> returns a new function where <code>this</code> is set for all future function calls.</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3']\n};\n\nfunction playVideo() {\n  console.log(this); // Output depends on how it is called\n}\n\nplayVideo(); // Logs the global object\nplayVideo.call(video); // Sets `this` to video\nplayVideo.apply(video); // Also sets `this` to video\nconst fn = playVideo.bind(video); // Returns new funct where `this` is video\nfn(); // Also sets `this` to video\n</code></pre> <p>So another solution is to use <code>bind</code> to set <code>this</code> on the callback function permanently:</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3'],\n  showTags() {\n    this.tags.forEach(function(tag) {\n      console.log(this.title, tag);\n    }.bind(this));\n  }\n};\n\nvideo.showTags();\n</code></pre> <p>The third and best solution is to use arrow functions for callbacks instead of the <code>function</code> keyword. Arrow functions inherit <code>this</code> from the containing function:</p> <pre><code>const video = {\n  title: 'a',\n  tags: ['t1', 't2', 't3'],\n  showTags() {\n    this.tags.forEach(tag =&gt; console.log(this.title, tag));\n  }\n};\n\nvideo.showTags();\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/","title":"Ultimate JavaScript Mastery: Objects Revisited","text":""},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#object-oriented-programming","title":"Object Oriented Programming","text":"<p>The purpose of OOP is to give you tools to more effectively manage complexity with your code.</p> <p>OOP groups related pieces of data together with the functions that operate on that data.</p> <p>The four core concepts of OOP:</p> <ul> <li>Encapsulation: encapsulation describes the idea of bundling data and methods that   work on that data within one unit, like a Javascript object. This concept is also   often used to hide the internal representation, or state of an object from the   outside. This is called information hiding. Benefits: reduce complexity, increase   reusability.</li> <li>Abstraction: hiding the details of how things work and focusing attention on   details of greater importance. Benefits: reduce complexity, isolate impact of change</li> <li>Inheritance: a mechanism that allows you to remove duplicate code. Benefits:   eliminate redundant code.</li> <li>Polymorphism: the provision of a single interface to entities of different types.   This mechanism can be used to eliminate long if-then-else or switch blocks. Benefits:   reduce complexity, reduce code dependencies</li> </ul> <p>In Javascript, the <code>class</code> is syntatic sugar over Prototypes and Prototypical Inheritance.</p>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#creating-objects","title":"Creating Objects","text":"<p>There are three ways to create objects in Javascript: with object lIterals, a factory function, or a constructor function.</p>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#object-literals","title":"Object Literals","text":"<pre><code>person = {\n  id: 1, name: 'James Couball',\n  firstName: function() {\n    return this.name.split(' ')[0];\n  },\n  lastName: function () {\n    return this.name.split(' ')[1];\n  }\n}\n\nconsole.log(person);\nconsole.log(person.firstName());\nconsole.log(person.lastName());\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#factory-function","title":"Factory Function","text":"<p>By convention, factory functions are named <code>create____</code> using camel case.</p> <pre><code>function createPerson(id, name) {\n  return {\n    // id: id, name: name, // if key and value variable name are the same, drop the value\n    id, name,\n    firstName: function() {\n      return this.name.split(' ')[0];\n    },\n    lastName: function () {\n      return this.name.split(' ')[1];\n    }\n  }\n}\n\nlet person = createPerson(1, 'James Couball');\nconsole.log(person);\nconsole.log(person.firstName());\nconsole.log(person.lastName());\n\nperson = createPerson(2, 'Frank Throckmorton');\nconsole.log(person);\nconsole.log(person.firstName());\nconsole.log(person.lastName());\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#constructor-function","title":"Constructor Function","text":"<p>By convention, a constructor function is named after the type of object being created using Pascal case.</p> <pre><code>function Person(id, name) {\n  // `new Person(...)` sets the `this` reference\n  this.id = id;\n  this.name = name;\n  this.firstName = function () { return this.name.split(' ')[0] }\n  this.lastName = function () { return this.name.split(' ')[1] }\n  // No explicit return needed\n}\n\nlet person = new Person(1, 'James Couball');\nconsole.log(person);\nconsole.log(person.firstName());\nconsole.log(person.lastName());\n\nperson = new Person(2, 'Frank Throckmorton');\nconsole.log(person);\nconsole.log(person.firstName());\nconsole.log(person.lastName());\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#constructor-property","title":"Constructor Property","text":"<pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n  this.firstName = function () { return this.name.split(' ')[0] }\n  this.lastName = function () { return this.name.split(' ')[1] }\n}\n\nlet person = new Person(1, 'James Couball');\n\nconsole.log(person.constructor);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#functions-are-objects","title":"Functions are Objects","text":"<p>A function is an object with properties and methods:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n  this.firstName = function () { return this.name.split(' ')[0] }\n  this.lastName = function () { return this.name.split(' ')[1] }\n}\n\nconsole.log(Person.name);\nconsole.log(Person.lenght);\nconsole.log(Person.constructor);\n</code></pre> <p>A function can be created dynamically using the <code>Function</code> constructor:</p> <pre><code>const Person = new Function('id', 'name', `\n  this.id = id;\n  this.name = name;\n  this.firstName = function () { return this.name.split(' ')[0] }\n  this.lastName = function () { return this.name.split(' ')[1] }\n`)\n\nconsole.log(new Person(1, 'Jane Doe'));\n</code></pre> <p>You can call a function programatically using the <code>call</code> method. Note that in the case of calling a constructor function, the constructor function will have to explitly return <code>this</code> in order to work as expected.</p> <pre><code>const Person = new Function('id', 'name', `\n  this.id = id;\n  this.name = name;\n  this.firstName = function () { return this.name.split(' ')[0] }\n  this.lastName = function () { return this.name.split(' ')[1] }\n  return this; // when a constructor is called with .call, you have to return this explicitly.\n`)\n\nconst person = Person.call({}, 1, 'James Couball');\n\nconsole.log(person);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#value-vs-reference-types","title":"Value vs. Reference Types","text":"<p>When primitives are copied, their value is copied and the copy is independent of the original.</p> <p>When objects are copied, the reference to the object is copied. This is known as a shallow copy. The copy is NOT independent of the original since they refer to the same underlying object.</p> Primitive / Value Types Reference Types NumberStringBooleanSymbolundefinednull ObjectFunctionArray <p>Value types are always copied when assigned.  Two different variables with the same value are independent.</p> <pre><code>let x = 10;\nlet y = x;\n\nx = 20;\n\nconsole.log(y); // still 10.  x and y are independent.\n</code></pre> <p>A reference refers to some other location in memory that might be shared between two different variables.</p> <pre><code>let x = { value: 10 };\nlet y = x;\n\nx.value = 20;\n\nconsole.log(y); // { value: 20 } y points to the SAME object in memory as x\n</code></pre> <p>Primitives are copied when passed to a function:</p> <pre><code>let number = 10;\n\nfunction increase(number) {\n  // This number is independent of the outer number (it shadows that number)\n  number++;\n}\n\nincrease(number);\n\nconsole.log(number); // 10\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#adding-or-removing-properties","title":"Adding or Removing Properties","text":"<p>Javascript is a dynamic language.  Properties can be added whenever you need them simply by setting them with dot notation:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst person = new Person(1, \"James Couball\");\nperson.age = 39;\n\nconsole.log(person); //Person {id: 1, name: \"James Couball\", age: 39}\n</code></pre> <p>Bracket notation can be used if you don't know the name ahead of time or if the property name is not a valid identifier:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst newPropertyName = 'age';\nconst newPropertyValue = 39;\n\nperson = new Person(1, \"James Couball\");\nperson[newPropertyName] = newPropertyValue;\n\nconsole.log(person); //Person {id: 1, name: \"James Couball\", age: 39}\n</code></pre> <p>A property can be removed using the <code>delete</code> operator:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nperson = new Person(1, \"James Couball\");\n\ndelete person.name\n\nconsole.log(person); //Person {id: 1}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#enumerating-properties","title":"Enumerating Properties","text":"<p>Use a <code>for... in</code> loop to iterate over an object's properties:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst person = new Person(1, \"James Couball\");\n\nfor (let propertyName in person) {\n  // Use bracket notation to get the property value\n  const propertyValue = person[propertyName];\n  console.log(propertyName, propertyValue);\n}\n</code></pre> <p>An alternate way to get the properties is via <code>Object.keys</code>:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst person = new Person(1, \"James Couball\");\n\n// Note the use of a `for... of` loop instead of a `for... in` loop\nfor (let propertyName of Object.keys(person)) {}\n  // Use bracket notation to get the property value\n  const propertyValue = person[propertyName];\n  console.log(propertyName, propertyValue);\n}\n</code></pre> <p>To see if a property exists for an object, use the <code>in</code> keyword:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst person = new Person(1, \"James Couball\");\n\nif ('id' in person) console.log('Person has an id');\n</code></pre> <p>or the <code>Object.keys</code> and the <code>includes</code> functions:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n}\n\nconst person = new Person(1, \"James Couball\");\n\nif (Object.keys(person).includes('id')) console.log('Person has an id');\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#private-properties-and-methods","title":"Private Properties and Methods","text":"<p>Hide the details and complexity and show only the essential features.</p> <p>Properties and methods that are part of the implementation details should be made private so they can not be used by users of the object.</p> <p>Make properties private by declaring them as block-scope variables (using <code>let</code> or <code>const</code>) in the Constructor function:</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  this.name = name;\n\n  // nameSeparator is a private variable\n  let nameSeparator = ' ';\n\n  // parseName is a private method\n  //\n  // `this` within the function would be the global object unless\n  // set to something else with `bind`\n  //\n  let parseName = function() {\n    return this.name.split(nameSeparator);\n  }.bind(this);\n\n  this.firstName = function() { return parseName()[0] }\n  this.lastName = function() { return parseName()[1] }\n}\n\nperson = new Person(1, 'James Couball');\n\nconsole.log(person.firstName()); // James\nconsole.log(person.lastName()); // Couball\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/06_objects_revisited/#getters-and-setters","title":"Getters and Setters","text":"<p>Use <code>defineProperty</code> to define a property with a getter and/or setter.</p> <p>Getters can be used to calculate the value dynamically.</p> <p>Setters can be used to validate the new value before storing it.</p> <pre><code>function Person(id, name) {\n  this.id = id;\n  let privateName = name\n\n  Object.defineProperty(this, 'name', {\n    get: function() { return privateName },\n    set: function(value) { privateName = value }\n  });\n}\n\nperson = new Person(1, 'James Couball');\nconsole.log(person.name)\n\nperson.name = 'Jane Doe';\nconsole.log(person.name);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/","title":"Ultimate JavaScript Mastery: Prototypes","text":""},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#inheritance","title":"Inheritance","text":"<p>Inheritance is a mechanism for sharing code.</p> <p>Common code is put into a super class and inherit to reuse code into a subclass.</p> <p>There are two types of inheritance: Classical vs. Prototypical Inheritance.</p>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#prototypes-and-prototypical-inheritance","title":"Prototypes and Prototypical Inheritance","text":"<p>Every object in Javascript (except one, the common object ancestor), has a prototype or parent.  An object 'inherits' all the members of the its prototype.</p> <p>Prototypes themselves have a prototype and are thus chained together. An object 'inherits' all the members members of the entire prototype chain.</p> <p>Every object created in Javascript inherits from a common object ancestor. This is the last prototype in an object's prototype chain. This common ancestor does not itself have a prototype.</p> <p>When accessing a object's member, first the object is checked.  If the member is not found on the object, then its prototype is checked. If not found there, the prototype's prototype is checked and so on through the prototype chain.</p> <p>Use <code>Object.getPrototypeOf(obj)</code> to get the prototype of any object or <code>Object.setPrototypeOf(obj)</code>. The <code>__proto__</code> property is the deprecated way getting and setting an object's prototype.</p> <pre><code>let x = {}\nlet y = {}\n\nconsole.log(Object.getPrototypeOf(x));\nconsole.log(Object.getPrototypeOf(x) === Object.getPrototypeOf(y)); // true\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#multilevel-inheritance","title":"Multilevel Inheritance","text":"<p>Objects created by a given constructor will have the same prototype.</p> <pre><code>function Person(name) {\n  this.name = name\n}\n\nperson1 = new Person('Bob Smith');\nperson2 = new Person('Jane Doe');\n\nconsole.log(getPrototypeOf(person1) === getPrototypeOf(person2));\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#property-descriptors","title":"Property Descriptors","text":"<p>Properties have descriptors that define if the object is ritable, enumerable, or configurable.</p> <p>Use <code>Object.getOwnPropertyDescriptor(obj, propertyName)</code> to get a property's descriptor object.</p> <pre><code>let person = { name: 'James' };\nlet nameDescriptor = Object.getOwnPropertyDescriptor(person, 'name');\nconsole.log(nameDescriptor);\n// {value: 'James', writable: true, enumerable: true, configurable: true}\n\nlet objectBase = Object.getPrototypeOf(person);\nlet toStringDescriptor = Object.getOwnPropertyDescriptor(objectBase, 'toString');\nconsole.log(toStringDescriptor);\n// {writable: true, enumerable: false, configurable: true, value: \u0192}\n</code></pre> <p>The descriptor can be set with <code>Object.defineProperty(obj, propertyName, descriptor)</code>. The default for <code>writable</code>, <code>enumerable</code>, and <code>configurable</code> are all <code>true</code>.</p> <pre><code>let person = { name: 'James' };\n\nObject.defineProperty(person, 'name', {\n  writable: false, // the property is now read only\n  enumerable: false, // the property won't show up in Object.keys or in for... in loops\n  configurable: false, // the property won't be able to be deleted\n  // get: &lt;&lt;getter function&gt;&gt;,\n  // set: &lt;&lt;setter function&gt;&gt;,\n});\n\n// Writable\nperson.name = 'Bob'; // not being writable doesn't throw an error\nconsole.log(person.name); // James\n\n// Enumerable\nconsole.log(Object.keys(person)); // []\nfor ( let key in person) console.log(key, person[key]); // nothing will be logged\nconsole.log(person); // { name: 'James' } - name still shows up here\n\n// Configurable\ndelete person.name;\nconsole.log(person); // { name: 'James' } - still has the name property\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#constructor-prototypes","title":"Constructor Prototypes","text":"<p>Set a constructor function's <code>prototype</code> property to define what object another object should inherit from.</p> <pre><code>function Creature(name) {\n  this.name = name\n}\n\nfunction Person(name) {\n  this.prototype = Creature\n  this.move = function\n}\n\nfunction Fish(name) {\n  this.prototype = Creature\n\n}\n\nfunction Bird(name) {\n  this.prototype = Creature\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#prototype-vs-instance-members","title":"Prototype vs Instance Members","text":"<pre><code>function Person(name) {\n  this.name = name\n}\n\nPerson.prototype.firstName = function() { return this.name.split(' ')[0] }\nPerson.prototype.lastName = function() { return this.name.split(' ')[1] }\n\nconst p1 = new Person('James Couball');\nconst p2 = new Person('Bob Smith');\n\n// Methods defined in the prototype can be called\nconsole.log(p1.firstName()); // James\nconsole.log(p1.lastName()); // Couball\n\n// The prototypes are the same for p1 and p2:\nconsole.log(Object.getPrototypeOf(p1) === Object.getPrototypeOf(p2)); // true\n\n// A method in the prototype can override an ancestor method\nconsole.log(p1.toString()); // [object Object]\nPerson.prototype.toString = function() { return `A person named ${this.name}` }\nconsole.log(p1.toString()); // A person named James Couball\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#iterating-instance-and-prototype-members","title":"Iterating Instance and Prototype Members","text":"<p><code>Object.keys</code> only returns instance members.  This does not include members defined by this object's prototype chain.</p> <p><code>for... in</code> loop returns all members defined in the instance and by the prototype chain.</p> <p>The <code>hasOwnProperty(propertyName)</code> (defined in the root object) returns <code>true</code> if the <code>propertyName</code> is an instance member.</p> <pre><code>function Person(name) {\n  this.name = name\n}\n\nPerson.prototype.firstName = function() { return this.name.split(' ')[0] }\nPerson.prototype.lastName = function() { return this.name.split(' ')[1] }\n\nconst p1 = new Person('James Couball');\n\nconsole.log(p1.hasOwnProperty('firstName')); // false\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/07_prototypes/#avoid-extending-the-built-in-objects","title":"Avoid Extending the Built-in Objects","text":"<p>Do not modify objects you do not own!</p> <p>Avoid doing something like this that extends a built-in object:</p> <pre><code>Array.prototype.shuffle = function() {\n  // ...\n}\nconst array = [1, 2, 3, 4, 5];\narray.shuffle();\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/","title":"Ultimate JavaScript Mastery: Prototypical Inheritance","text":"<pre><code>function extend(Child, Parent) {\n  Child.prototype = Object.create(Parent.prototype);\n  Child.prototype.constructor = Child;\n}\n\nfunction Creature(name) {\n  this.name = name;\n}\n\nCreature.prototype.move = function() { console.log(this.name + ' moved') }\n\nfunction Person(name) {\n  Creature.call(this, name);\n}\nextend(Person, Creature);\n\nPerson.prototype.move = function() {\n  console.log('&lt;&lt;walking&gt;&gt;');\n  Creature.prototype.move.call(this);\n}\n\nfunction Bird(name) {\n  Creature.call(this, name);\n}\nextend(Bird, Creature);\n\nBird.prototype.move = function() {\n  console.log('&lt;&lt;flying&gt;&gt;');\n  Creature.prototype.move.call(this);\n}\n\nfunction Fish(name) {\n  Creature.call(this, name);\n}\nextend(Fish, Creature);\n\nFish.prototype.move = function() {\n  console.log('&lt;&lt;swimming&gt;&gt;');\n  Creature.prototype.move.call(this);\n}\n\ncreatures = [\n  new Person('John'),\n  new Bird('Polly'),\n  new Fish('Nemo')\n];\n\nfor (let creature of creatures) {\n  creature.move();\n}\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#creating-your-own-prototypical-inheritance","title":"Creating Your Own Prototypical Inheritance","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#resetting-the-constructor","title":"Resetting the Constructor","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#calling-the-super-constructor","title":"Calling the Super Constructor","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#intermediate-function-inheritance","title":"Intermediate Function Inheritance","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#method-overriding","title":"Method Overriding","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#polymorphism","title":"Polymorphism","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#when-to-use-inheritance","title":"When to Use Inheritance","text":""},{"location":"javascript/ultimate_javascript_mastery/08_prototypical_inheritance/#mixins","title":"Mixins","text":"<p>Use <code>Object.assign</code> to copy members from one or more sources to a target prototype. In the following example, the canEat and canWalk mixins are created and the <code>mixin</code> function adds their members to Person.</p> <pre><code>function mixin(target, ...sources) {\n  Object.assign(target.prototype, ...sources);\n}\n\nconst canEat = {\n  eat: function() {\n    console.log('eating');\n    this.hunger--;\n  }\n};\n\nconst canWalk = {\n  walk: function() {\n    console.log('walking');\n  }\n};\n\nfunction Person() { }\n\nmixin(Person, canEat, canWalk);\n\nconst person = new Person();\nconsole.log(person); // Person {}\nperson.eat(); // eating\nperson.walk(); // walking\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/","title":"Ultimate JavaScript Mastery: ES6 Classes","text":""},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#es6-classes","title":"ES6 Classes","text":"<p>Syntatical sugar over prototypical inheritance. So this:</p> <pre><code>function Circle(radius) {\n  this.radius = radius;\n  this.draw = function() {\n    console.log('draw');\n  }\n}\n\ncircle = new Circle(10);\n</code></pre> <p>Is equivalent to this:</p> <pre><code>class Circle {\n  constructor(radius) {\n    this.radius = radius;\n    // methods defined here end up directly on `this`\n    this.move = function() {}\n  }\n  // methods defined here end up on the prototype\n  draw() {\n    console.log('draw');\n  }\n}\n\ncircle = new Circle(10);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#hoisting","title":"Hoisting","text":"<p>In Javascript there are two syntaxes for defining a function:</p> <pre><code>// Function Declaration\nfunction sayHello() {}\n\n// Function Expression\nconst sayGoodbye = function() {};\n</code></pre> <p>Function declarations are said to be <code>hoisted</code> since they act as if all function declarations happened before code is actually run. This means you can use the function before the line on which it is defined.</p> <p>Function expressions are not hoisted. This means the function definition must come before it's use in a file.</p> <p>The same thing applies to class definitions:</p> <pre><code>// Class Declaration\nclass Circle { }\n\n// Class Expression\nconst Square = class { };\n</code></pre> <p>Class declarations are hoisted and class expressions are not.</p>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#static-methods","title":"Static Methods","text":"<p>An instance method is behavior attached to an instance of a class (aka an object).</p> <p>A static method is behavior attached to a class.</p> <pre><code>class Circle {\n  constructor(radius) {\n    this.radius = radius;\n  }\n\n  // Instance Method\n  draw() { }\n\n  // Static Methods\n  static parse(str) {\n    // this is the Circle constructor function\n    console.log(this);\n    const radius = JSON.parse(str).radius;\n    return new Circle(radius);\n  }\n}\n\nconst circle1 = new Circle(10);\nconsole.log(circle1); // Circle { radius: 10 }\n\n// Call the static method `parse`\nconst circle2 = Circle.parse('{ \"radius\": 5 }');\nconsole.log(circle2); // Circle { radius: 5 }\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#the-this-keyword","title":"The <code>this</code> keyword","text":"<p>A Method Call is when you run a function using dot notation <code>&lt;object&gt;.method()</code>. This call has a 'receiver' identified by <code>&lt;object&gt;</code>.  Within the method, <code>this</code> is set to refer to this object.</p> <p>A Function Call is when you call a function without a receiver. Within this function, <code>this</code> is set to the global object (or <code>undefined</code> if strict mode is on).</p> <pre><code>const Circle = function() {\n  this.draw = function() { console.log(this) }\n};\n\nconst c = Circle();\n// Method Call\n// has a receiver -- `this` inside the function is set to `c`\nc.draw();\n\n// Get a reference to the draw method\nconst draw = c.draw;\n\n// Function Call\n// without a receiver -- `this` inside the function is set to the global object\ndraw();\n</code></pre> <p>Use the <code>.call</code> method to call the function and set <code>this</code>.</p> <pre><code>draw.call(c);\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#private-members-using-symbols","title":"Private Members Using Symbols","text":"<p>By default all attributes are public.</p> <pre><code>class Circle {\n  constructor(radius) {\n    this.radius = radius;\n  }\n}\n\nconst c = new Circle(10);\nc.radius;\n</code></pre> <p>Sometimes people name their properties beginning with an underscore in order to communicate the property is private. This is convention.  There is a better way using ES6 Symbols.</p> <p>A Symbol is an opaque, unique identifier.  The <code>Symbol()</code> function (do not use <code>new</code>) returns a new Symbol. Everytime you call <code>Symbol()</code> you get a different symbol.</p> <p>To create a private property, fetch a value for the property's identifier (<code>_radius</code> in the example below) and then store the attribute value in <code>this[_radius]</code>.  An array of Properties keyed by Symbols can be fetched using <code>Object.getOwnPropertySymbols</code>.</p> <pre><code>const _radius = Symbol('radius');\n\nclass Circle {\n  constructor(radius) {\n    this[_radius] = radius;\n  }\n}\n\nconst c = new Circle(10);\nconsole.log(c); // Circle { [Symbol(radius): 10 }\n\n// You can still get at the private property using `Object.getOwnPropertySumbols`\nconst key = Object.getOwnPropertySymbols(c)[0];\nconsole.log(c[key]); // 10\n</code></pre> <p>Similarly, a method can be made private:</p> <pre><code>const _radius = Symbol('radius');\nconst _draw = Symbol('draw method');\n\nclass Circle {\n  constructor(radius) {\n    this[_radius] = radius;\n  }\n\n  // Use a ***computed property name*** for the method\n  [_draw]() { console.log('draw'); }\n}\n\nconst c = new Circle(10);\nconsole.log(c); // Circle { [Symbol(radius): 10 }\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#private-members-using-weakmaps","title":"Private Members Using WeakMaps","text":"<p>Make the <code>radius</code> property private:</p> <pre><code>const _radius = new WeakMap();\n\nclass Circle {\n  constructor(radius) {\n    // Write the property\n    _radius.set(this, radius);\n  }\n\n  draw() {\n    // Read the property\n    const radius = _radius.get(this);\n    console.log(radius);\n  }\n}\n\nconst c = new Circle(99);\nc.draw(); // 99\n</code></pre> <p>Make the <code>move</code> method private:</p> <pre><code>const _radius = new WeakMap();\nconst _move = new WeakMap();\n\nclass Circle {\n  constructor(radius) {\n    // Write the property\n    _radius.set(this, radius);\n    // Set the reference to the method -- use an arrow function so this is set\n    _move.set(this, () =&gt; console.log('move', this));\n  }\n\n  draw() {\n    // Read the private property `radius`\n    const radius = _radius.get(this);\n    console.log(radius);\n\n    // Call the private method `move`\n    _move.get(this)();\n    console.log('draw');\n  }\n}\n\nconst c = new Circle(99);\nc.draw(); // 10\\nmove - undefined\\ndraw\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#getters-and-setters","title":"Getters and Setters","text":"<p>Use the <code>get</code> keyword to dynamically create a property getter on an object. This is useful to expose a private property or a computed property.</p> <p>Use the <code>set</code> keyword to dynamically create a property setter on an object.</p> <pre><code>const _radius = new WeakMap();\n\nclass Circle {\n  constructor(radius) {\n    _radius.set(this, radius);\n  }\n\n  get radius() { return _radius.get(this); }\n  set radius(value) { _radius.set(this, value) }\n}\n\nconst c = new Circle(10);\nconsole.log(c.radius); // 10\n\nc.radius = 99;\nconsole.log(c.radius); // 99\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#inheritance","title":"Inheritance","text":"<p>Use the <code>extends</code> in a class definition to define inheritance:</p> <pre><code>class Shape {\n  move() {\n    console.log('move');\n  }\n}\n\n// Circle inherits from Shape by using the `extends` keyword\nclass Circle extends Shape {\n  constructor(radius) {\n    // Must call super constructor in derived class before accessing 'this' or\n    // returning from derived constructor\n    super();\n    this.radius = radius;\n  }\n\n  draw() {\n    console.log('draw');\n  }\n}\n\nconst c = new Circle(99, 'red');\nconsole.log(c); // Circle { color: 'red', radius: 99 }\nc.draw(); // draw -- defined by Circle\nc.move(); // move -- defined by Shape\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/09_es6_classes/#method-overriding","title":"Method Overriding","text":"<p>A derived class can use <code>super</code> to call methods in base class. <code>super</code> is set to the base class.</p> <pre><code>// Accessing super class properties\nsuper.property;\nsuper[expr];\n\n// Calling super class methods\nsuper([arguments]); // calls the parent constructor\nsuper.functionOnParent([arguments]); // calls a parent method\n</code></pre> <p>An example:</p> <pre><code>class Shape {\n  move() {\n    console.log('move');\n  }\n}\n\n// Circle inherits from Shape by using the `extends` keyword\nclass Circle extends Shape {\n  constructor(radius) {\n    // Must call super constructor in derived class before accessing 'this' or\n    // returning from derived constructor\n    super();\n    this.radius = radius;\n  }\n\n  draw() {\n    console.log('draw');\n  }\n\n  // Override Shape.move() and call the super method\n  move() {\n    super.move();\n    console.log('circle move');\n  }\n}\n\nconst c = new Circle(99, 'red');\nconsole.log(c); // Circle { color: 'red', radius: 99 }\nc.draw(); // draw\nc.move(); // move\\ncircle move\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/","title":"Ultimate JavaScript Mastery: ES6 Tooling","text":""},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#modules","title":"Modules","text":"<p>Modules allow you to split code across different files. Each file is a module.</p> <p>Using modules increases maintainability, reusability, and abstraction.</p>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#commonjs-modules","title":"CommonJS Modules","text":"<p>CommonJS modules are used in node.</p> <p><code>circle.js</code></p> <pre><code>// Implementation Detail\nconst _radius = new WeakMap();\n\n// Public Interface\nclass Circle {\n  constructor(radius) {\n    _radius.set(this, radius);\n  }\n\n  draw() {\n    console.log(`Circle with radius ${_radius.get(this)}`);\n  }\n}\n\n// Add a property to module.exports for exported items.\n// These are the only symbols that other modules will be able to access.\nmodule.exports.Circle = Circle;\n\n// If you only have one thing to export, you can set module.exports to that\nmodule.exports = Circle;\n</code></pre> <p><code>index.js</code></p> <pre><code>const Circle = require('./circle');\n\nconst c = new Circle(10);\n\nconsole.log(c); // Circle {}\nc.draw(); // Circle with radius 10\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#es6-modules","title":"ES6 Modules","text":"<p>ES6 Modules are used in browser.</p> <p><code>circle.js</code></p> <p>Use the <code>export</code> keyword to identify symbols that are to be made available outside the module:</p> <pre><code>// Implementation Detail\nconst _radius = new WeakMap();\n\n// Public Interface\nexport class Circle {\n  constructor(radius) {\n    _radius.set(this, radius);\n  }\n\n  draw() {\n    console.log(`Circle with radius ${_radius.get(this)}`);\n  }\n}\n</code></pre> <p><code>index.js</code></p> <p>Use the <code>import</code> keyword to expose exported symbols from a module</p> <pre><code>import {Circle} from './circle';\n\nconst c = new Circle(10);\nc.draw(); // Circle with radius 10\n</code></pre>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#tools","title":"Tools","text":""},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#npm","title":"NPM","text":"<p>NPM is the Javascript package manager.</p> <p>Initialize your node project by running <code>npm init</code>.  This creates a <code>package.json</code> file for the project.</p>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#babel","title":"Babel","text":"<p>Babel is a traspiler that takes modern Javascript code and convert it into ES5</p> <p><code>npm install babel-cli babel-core babel-preset-env --save-dev</code></p> <p>Every feature added on top of ES5 has a babel plugin. Installing <code>babel-preset-env</code> is a plugin that installs all plugins available.</p>"},{"location":"javascript/ultimate_javascript_mastery/10_es6_tooling/#webpack","title":"Webpack","text":"<p>Webpack is a Javascript bundlers. It will combine all our Javascript source code and the source code of our dependencies into one file and then minify the result.</p> <p><code>npm install -g webpack-cli</code></p> <p><code>webpack-cli init</code></p>"},{"location":"ruby/subprocesses/","title":"Running Subprocesses in Ruby","text":"<p>Ruby has many ways of running subprocesses. This guide will help you to choose the right method for your needs. Ruby comes with a rich-set of tools for spawning and communicating with external subprocesses.</p> <p>How To Start Subprocesses</p> Method Use Case Backticks Run a command and wait for the results. STDOUT from the subprocess is returned as a String. Kernel#system Run a command and wait for the results. By default STDOUT/STDERR are inherited from the parent. Kernel#spawn Run a command asynchronously. By default STDOUT/STDERR are inherited from the parent. Kernel#exec Replace the current process by some other command. By default all file descriptors are inherited from the parent. Kernel#fork Run Ruby code asynchronously in a subprocess. By default all file descriptors are inherited from the parent. IO.popen TODO Run a command asynchronously and interact with its STDOUT and STDIN via a pipe Open3.popen3 TODO Run a command asynchronously and interact with its STDOUT, STDERR, and STDIN via a pipe PTY.spawn TODO Run a command asynchronously and have it behave like it was run from a terminal <p>How To Control Subprocesses</p> Topic Description How Are Commands Run how to specify what command is run and how Ruby decides if the command will be run directly or via a subshell What Shell Is Used how Ruby selects which shell to use if the command is to be run in a subshell $CHILD_STATUS the status of a running or terminated subprocess Detach tell Ruby you are not interested in the result of a subprocess Wait wait for a subprocess to finish and get its status Kill send an signal to a subprocess possibly causing it to terminate before it otherwise would Environment choose what variables are passed into the subprocess's environment Redirection choose what is sent to a subprocess's stdin or where a subprocess's stdout and stderr are sent Limits TODO set the resource limits (like CPU time, memory used, and number of open files) of a subprocess <p>External References</p> Topic Description Gems Useful gems to help create and control subprocesses References Links to useful articles"},{"location":"ruby/subprocesses/#backticks","title":"Backticks","text":"<p>`command` \u2b62 string</p> <p>Use Case: Run a command and wait for the results. STDOUT from the subprocess is returned as a String.</p> <p>Params</p> <ul> <li> <p><code>command</code> the command and its arguments</p> <p>Behaves like a double-quote string literal, in that it allows escape characters and interpolation.</p> <pre><code>command = 'grep'\narguments = '--verbose'\npattern = '*'\nfiles = 'file1 file2 file3'\ncommand_stdout = `#{command} #{arguments} #{pattern} #{files}`\n</code></pre> </li> </ul> <p>Returns: the stdout of the subprocess is returned as a string</p> <p>Raises:</p> <ul> <li><code>Errno::ENOENT</code> if the command could not be found in the PATH</li> <li><code>Errno::EACCES</code> if the command exists but is not executable or is not a regular file</li> </ul> <p>Side Effects</p> <ul> <li>The command exit status is saved in <code>$CHILD_STATUS</code>.   See Subprocess Status for more details.</li> </ul> <p>Notes</p> <p>With backticks, the subprocess blocks the parent process until it completes so it should be used for short-running programs.</p> <p>The subprocess's <code>stderr</code> is sent to the parent process's <code>stderr</code>. <code>stderr</code> can be redirected to <code>stdout</code> to capture both in a single string by using shell redirection as follows:</p> <pre><code>stdout_and_stderr = `ls /usr/local/bin 2&gt;&amp;1`\n</code></pre> <p>The built in syntax <code>%x</code> is equivalent to the backtick operator.</p> <pre><code>stdout_and_stderr = %x{ls /usr/local/bin 2&gt;&amp;1}\n</code></pre> <p>When using backticks, there is no way to supress Ruby's shell detection to avoid shell expansion. See How Commands Are Run for more details. Use Kernel#system to avoid shell expansion.</p> <p>When using backticks, there is no way to control the subprocess's environment (it gets the global ENV from the parent) or give other subprocess special options like process group, umask, current directory, limits or redirection.</p>"},{"location":"ruby/subprocesses/#kernelsystem","title":"Kernel#system","text":"<p>system([env], command..., [options], exception: false) \u2b62 true, false, nil</p> <p>Use Case: Ideal for (1) a short running command, (2) where it is ok for stdout and stderr   to be output as it runs, and (3) it only matters if the command succeeds or fails.</p> <p>Params</p> <ul> <li>env [Hash] (defaults to: { }) \u2014 updates the environment of the subprocess.   See Environment Isolation for more details.</li> </ul> <ul> <li>command [String, Array&lt;String&gt;] \u2014 the command to run.   See How Commands Are Run for more details.</li> </ul> <ul> <li>options [Hash] (defaults to: { }) \u2014 used to set various subprocess attributes.   See Kernel#spawn for more details.</li> </ul> <ul> <li>exception [Boolean] (defaults to: false) \u2014 if <code>exception: true</code> is passed, the   method raises an exception instead of returning false or nil.</li> </ul> <p>Returns</p> <ul> <li><code>true</code> if the command exits with 0 exit status</li> <li><code>false</code> if the command exits with a non-zero exit status</li> <li><code>nil</code> if the command could not be run.</li> </ul> <p>Raises: only raises an error if the exception param is <code>true</code>.</p> <ul> <li><code>Errno::ENOENT</code> if the command could not be found in the PATH</li> <li><code>Errno::EACCES</code> if the command exists but is not executable or is not a regular file</li> </ul> <p>Side Effects</p> <ul> <li>The command exit status is saved in <code>$CHILD_STATUS</code>.   See Subprocess Status for more details.</li> </ul> <p>Notes</p> <ul> <li>Blocks until the subprocess exits.</li> </ul> <ul> <li> <p>The subprocess output is sent to the parent process's stdout and stderr. The subprocess   output can be redirected using either shell redirection   by embedding the redirection directives in the command:</p> <pre><code>system('ls &gt; file.txt')\n</code></pre> <p>or by using the options param to specify redirection (see Redirection for more details):</p> <pre><code>system('ls', { out: ['file.txt'] })\n</code></pre> </li> </ul>"},{"location":"ruby/subprocesses/#kernelspawn","title":"Kernel#spawn","text":"<p>spawn([env,] command... [,options]) \u2b62 pid</p> <p>Use Case: Ideal for running multiple commands in parallel</p> <p>Params</p> <ul> <li>env [Hash] (defaults to: { }) \u2014 updates the environment of the subprocess.   See Environment Isolation for more details.</li> </ul> <ul> <li>command [String, Array&lt;String&gt;] \u2014 the command to run.   See How Commands Are Run for more details.</li> </ul> <ul> <li>options [Hash] (defaults to: { }) \u2014 used to set various subprocess attributes.   See Kernel#spawn for more details.</li> </ul> <p>Returns: the pid of the running subprocess</p> <p>Raises:</p> <ul> <li><code>Errno::ENOENT</code> if the command could not be found in the PATH</li> <li><code>Errno::EACCES</code> if the command exists but is not executable or is not a regular file</li> </ul> <p>Side Effects</p> <ul> <li>The command exit status is saved in <code>$CHILD_STATUS</code> after ithas been reaped via wait.   See Subprocess Status for more details.</li> </ul> <p>Notes</p> <p>This method is similar to Kernel#system but it doesn't wait for the subprocess to end.</p> <p>Manage the subprocess using the following:</p> <ul> <li>Use Process.wait   to wait for the subprocesses to end and collect its termination status</li> </ul> <ul> <li>Use Process.detach to register   disinterest in a subprocess's status to avoid creating zombies</li> </ul> <ul> <li>Use Process.kill to prematurely   end the process</li> </ul> <p>See Detach, Wait, and Kill for more details.</p>"},{"location":"ruby/subprocesses/#kernelexec","title":"Kernel#exec","text":"<p>exec([env,] command... [,options])</p> <p>Use Case: Replace the current process by some other command</p> <p>Params</p> <ul> <li>env [Hash] (defaults to: { }) \u2014 updates the environment of the subprocess.   See Environment Isolation for more details.</li> </ul> <ul> <li>command [String, Array&lt;String&gt;] \u2014 the command to run.   See How Commands Are Run for more details.</li> </ul> <ul> <li>options [Hash] (defaults to: { }) \u2014 used to set various subprocess attributes.   See Kernel#spawn for more details.</li> </ul> <p>Returns: N/A - does not return unless an error is raised</p> <p>Raises</p> <ul> <li><code>Errno::ENOENT</code> if the command could not be found in the PATH</li> <li><code>Errno::EACCES</code> if the command exists but is not executable or is not a regular file</li> <li><code>SystemCallError</code> if the command could not be run for some other reason (eg. if exec is   not supported on the platform)</li> </ul> <p>Side Effects: N/A</p> <p>Notes</p> <p>Replaces the current process by running the given external command. The new process retains the original process's ID. The new process may inherit the original process's environment including open file descriptors.</p> <p>Exec (and fork) is only available on UNIX-like systems. A SystemCallError is raised if the command can't be run.</p> <p>Limits modified via the <code>options</code> parameter are retained if the command can not be run because hard limits are not restorable. These limits can be set to a different value but not unset.</p>"},{"location":"ruby/subprocesses/#kernelfork","title":"Kernel#fork","text":"<p>fork \u2b62 integer or nil</p> <p>fork { block } \u2b62 integer or nil</p> <p>Use Case: Run a block of the program's Ruby code asynchronously in a subprocess</p> <p>Examples</p> <p>\u25b8 called with a block</p> <pre><code>--8&lt;-- \"examples/fork_with_block.rb\"\n</code></pre> <p>\u25b8 called without a block</p> <pre><code>--8&lt;-- \"examples/fork_without_block.rb\"\n</code></pre> <p>Params</p> <ul> <li>block \u2014 the optional block of Ruby code to run in a subprocess</li> </ul> <p>Returns:</p> <ul> <li><code>(Integer, nil)</code> - Returns the subprocess's pid in the parent process or nil in the subprocess</li> </ul> <p>Raises:</p> <ul> <li><code>Errno::ENOENT</code> if the command could not be found in the PATH</li> <li><code>Errno::EACCES</code> if the command exists but is not executable or is not a regular file</li> <li><code>SystemCallError</code> if the command could not be run for some other reason (eg. if exec is   not supported on the platform)</li> </ul> <p>Side Effects:</p> <ul> <li>The command exit status is saved in <code>$CHILD_STATUS</code> after ithas been reaped via wait.   See Subprocess Status for more details.</li> </ul> <p>Notes</p> <p>Fork creates a new process that is a duplicate of the current process. Both processes are running the same Ruby program, at the same point, with the same state.</p> <p>If fork is called with a block:</p> <ul> <li>execution in the child process continues in the block and exits with a status of zero   when the block ends</li> <li>execution of the parent process continues with fork returning the pid of the child process   (the block is not executed).</li> </ul> <p>If fork is called without a block:</p> <ul> <li>execution of the child process continues with fork returning <code>nil</code></li> <li>execution of the parent process continues with fork returning the pid of the child process</li> </ul> <p>Manage the subprocess using the following:</p> <ul> <li>Use Process.wait   to wait for the subprocesses to end and collect its termination status</li> </ul> <ul> <li>Use Process.detach to register   disinterest in a subprocess's status to avoid creating zombies</li> </ul> <ul> <li>Use Process.kill to prematurely   end the process</li> </ul> <p>See Detach, Wait, and Kill for more details.</p> <p>The subprocess can exit with <code>exit!</code> to avoid any exit handlers setup by the parent process.</p> <p>Fork is only available on UNIX-like systems (check Process.respond_to?(:fork)). Use Kernel#spawn on systems that don't support fork. Raises <code>SystemCallError</code> if called on a platform that does not support fork.</p>"},{"location":"ruby/subprocesses/#iopopen","title":"IO.popen","text":"<p>popen([env,] cmd, mode=\"r\" [, options]) \u2b62 io</p> <p>popen([env,] cmd, mode=\"r\" [, options]) { |io or nil| block } \u2b62 obj</p> <p>Use Case: Ideal for use cases where you want to stream a lot of data to the subprocess's   stdin or from the subprocess's stdout and don't need to hold the whole result at one time</p> <p>Params</p> <ul> <li>env [Hash] (defaults to: { }) \u2014 updates the environment of the subprocess.   See Environment Isolation for more details.</li> </ul> <ul> <li>command [String, Array&lt;String&gt;] \u2014 the command to run.   See How Commands Are Run for more details.</li> </ul> <ul> <li>options [Hash] (defaults to: { }) \u2014 used to set various subprocess attributes.   See Kernel#spawn for more details.</li> </ul> <p>Returns: an IO stream connected to the subprocess.  Writing to it sends data to the   subprocesses's stdin.  Reading from it retrieves data from the subprocess's stdout.</p> <p>Side Effects:</p> <p>Notes</p> <ul> <li>When to use: you need to interact with the standard out and standard in of a program   and are not interested in stderr</li> </ul> <p>spawn can be used instead of IO.popen as follows:</p> <pre><code># similar to r = IO.popen(command)\nr, w = IO.pipe\npid = spawn(command, :out=&gt;w)   # r, w is closed in the child process.\nw.close\n</code></pre>"},{"location":"ruby/subprocesses/#open3popen3","title":"Open3.popen3","text":"<p>popen3([env,] cmd... [, opts]) { |stdin, stdout, stderr, wait_thr| }</p> <p>popen3([env,] cmd... [, opts]) \u2b62 [stdin, stdout, stderr, wait_thr]</p> <p>Use Case:</p> <p>Params</p> <p>Returns:</p> <p>Side Effects:</p> <p>Notes</p> <p>Unfortunately, the docs don\u2019t mention one crucial point \u2014 whatever redirections you pass will be ignored, because <code>popen3</code> always overrides the redirection options with its own pipes.</p> <p>So if you do need to inherit <code>stdin</code> and <code>Kernel#system</code> won\u2019t do, <code>IO.popen</code> may be your only choice. e.g. to inherit <code>stdin</code> and read <code>stdout</code> as a string:</p>"},{"location":"ruby/subprocesses/#ptyspawn","title":"PTY.spawn","text":"<p>spawn(cmd...) { |r, w, pid| }</p> <p>spawn(cmd...) \u2b62 [r, w, pid]</p> <p>Use Case:</p> <p>Params</p> <p>Returns:</p> <p>Side Effects:</p> <p>Notes</p>"},{"location":"ruby/subprocesses/#how-commands-are-run","title":"How Commands Are Run","text":"<p>Most Ruby methods that run a subprocess (such as Kernel#system) allow the command to be run to be specified in one of the following ways:</p> <ul> <li><code>commandline</code> a single string specifying the command and its arguments</li> <li><code>cmdName, arg1, ...</code> command name and one or more arguments passed as separate parameters</li> <li><code>[cmdName, arg0], arg1, ...</code> command name and argv[0] passed as an array and zero or more   arguments passed  as separate parameters</li> </ul> <p>When running a command in a subprocess (eg. via exec, fork et al.), Ruby may run the command via a subshell or execute the command directly. Ruby uses the following rules to determine which to do:</p> <p>When the command is a single string:</p> <ul> <li>When the command does not contain special shell syntax, the command is executed   directly</li> <li> <p>When the string contains special shell syntax, the command is passed to a subshell so the   shell syntax can be interpreted. The subshell, in turn, runs the command.</p> <p>Special shell syntax includes redirection, shell variables starting with '$' or a semicolon.</p> </li> </ul> <p>When passing the command broken up into an Array:</p> <ul> <li>Ruby will always execute the command directly without a subshell</li> </ul>"},{"location":"ruby/subprocesses/#what-shell-is-used","title":"What Shell Is Used","text":"<p>To determine which shell to run, Ruby first checks the environment variables (in this order): <code>RUBYSHELL</code>, <code>SHELL</code>, or <code>COMSPEC</code>. If none of those environment variables are set, <code>/bin/sh</code> is used.</p>"},{"location":"ruby/subprocesses/#child_status","title":"$CHILD_STATUS","text":"<p>Backticks and system set the global variable <code>$CHILD_STATUS</code> (aka <code>$?</code>) based on the exit status of the subprocess that was run. wait (and similar methods) set <code>$CHILD_STATUS</code> when it reports that an asynchronuous subprocess has terminated.</p> <p><code>$CHILD_STATUS</code> is either <code>nil</code> or an instance of Process::Status. This class encapsulates the information on the status of a running or terminated subprocess. It stores the pid of the process, the exitstatus of the subprocess, the signal that terminated the subprocess, and if the subprocess core dumped.</p> <p><code>$CHILD_STATUS</code> is thread-global variable which can have different values in different threads.</p>"},{"location":"ruby/subprocesses/#detach","title":"Detach","text":"<p>Some operating systems retain the status of terminated child processes until the parent collects that status. In Ruby, this is normally done by using some variant of Process.wait).</p> <p>If the parent never collects this status, the process is considered a a zombie process. A zombie process is a process has completed execution but still has an entry in the OS process table.</p> <p>If you don't care about the result of a subprocess, call Process.detach register your disinterest in the result of the process.</p> <p>In the background, this starts a Ruby thread to automatically reap the subprocess status information when the subprocess exits. Once the OS knows we have this information, it can clear it out of the process table.</p>"},{"location":"ruby/subprocesses/#wait","title":"Wait","text":"<p>Use Process.wait to wait for one or more subprocesses to finish.</p> <p>Waiting For A Single Subprocess</p> <p>Pass a single pid to Process.wait to block until the subprocess has completed. Process.wait returns the pid of the process that finished and sets <code>$CHILD_STATUS</code> to the exit status of the subprocess.</p> <pre><code>--8&lt;-- \"examples/wait1.rb\"\n</code></pre> <p>Waiting For Multiple Subprocesses I</p> <p>The most naive way to wait several subprocess to complete is to wait for them serially, one at a time.  This can be accomplished using Process.wait as follows.</p> <pre><code>--8&lt;-- \"examples/wait2.rb\"\n</code></pre> <p>Because of the way this has been implemented, subprocess completion is reported in the order that the subprocesses were created, not necessarily in the order that they terminate.</p> <p>Waiting For Multiple Subprocesses II</p> <p>In order to report on each subprocess as it finishes, supply the special flag value <code>-1</code> to Process.wait instead of waiting on a specific pid. This blocks until any subprocess to terminates.</p> <p>Just like the previous example, the pid of the terminated subprocess is returned and <code>$CHILD_STATUS</code> is set to the subprocess's exit status.</p> <pre><code>--8&lt;-- \"examples/wait3.rb\"\n</code></pre> <p>With this implementation the subprocesses are report in the order they terminate.</p> <p>Get Signaled When Subprocesses Finish</p> <p>To be notified of subprocess completion in a totally asynchronous fashion, register to receive a signal from the operating system as subprocesses are completed using a signal trap.</p> <p>A signal is an asynchronous notification sent by the operating system to a process in order to notify it of an event that occurred.</p> <p>When a signal is sent, the operating system interrupts the target process' normal flow of execution to deliver the signal. If the process has registered a trap handler for that signal, that handler is executed.</p> <p>Kernel#trap allows a Ruby program to specify how signals are handled. It takes two arguments: the name of the signal to trap and the block of code to run when the named signal is received.</p> <p>The block passed to Kernel#trap must be reentrant and thread-safe. For detailed guidance on what is safe to call in a trap block, see the article Caveats for implementing Signal.trap callbacks. To avoid problems in the trap block, the main thread of the program is blocked while the trap block is executed.</p> <p>The operating system will tell Ruby about subprocesses terminating with the <code>SIGCHLD</code> signal.</p> <p>Ruby may call the trap after multiple subprocesses have ended. To handle this situation, call Process.wait in a loop with the <code>Process::WNOHANG</code> flag. This flag tells Process.wait to return <code>nil</code> rather than blocking if there are no more subprocesses that have terminated.</p> <p>A complete implementation of the previous examples using a signal handler follows.  The example shows a dashboard of the processes along with the elapsed time.</p> <pre><code>--8&lt;-- \"examples/signal.rb\"\n</code></pre> <p>The trap might be called for one or more processes exiting, hence the while loop in the example above.</p>"},{"location":"ruby/subprocesses/#kill","title":"Kill","text":"<p>In the previous examples, Process.wait waits for the subprocess to terminate on its own. Process.kill can be used to terminate a process before it would otherwise do so on its own.</p> <p>Process.kill is based on the Unix process API of the same name for sending a signal to a process. Originally, the kill command could only kill a process. Later it was enhanced to allow you to send any signal.</p> <p>Signal.list names all the signals that Ruby understands. The Wikipedia Signals page defines typial POSIX signals.</p> <p>Which signal to send to a subprocess to make it terminate early depends on the subprocess. There are three signals typically used to terminate a subprocess:</p> <ul> <li>SIGINT The SIGINT signal is sent to a process by its controlling terminal when a user   wishes to interrupt the process. This is typically initiated by pressing Ctrl+C.</li> </ul> <ul> <li>SIGTERM The SIGTERM signal is sent to a process to request its termination. It can be   caught and interpreted or ignored by the process. This allows the process to perform nice   termination releasing resources and saving state if appropriate. SIGTERM is nearly identical   to SIGINT.</li> </ul> <ul> <li> <p>SIGKILL The SIGKILL signal is sent to a process to cause it to terminate immediately.   In contrast to SIGTERM and SIGINT, this signal cannot be caught or ignored, and the receiving   process cannot perform any clean-up upon receiving this signal.</p> <p>SIGKILL should be used as a last resort when terminating processes if it does not voluntarily exit in response to SIGTERM.</p> </li> </ul> <p>The following example uses Process.kill to stop any subprocess that is still running after 3 seconds. In this case, the SIGINT signal is used.</p> <pre><code>--8&lt;-- \"examples/kill.rb\"\n</code></pre>"},{"location":"ruby/subprocesses/#environment","title":"Environment","text":"<p>Without any action, the subprocess gets a copy of the parent process's environment.</p> <p>Some methods take an <code>env</code> hash which can be used to add, change, or remove environment variables destined for the subprocesses environment.</p> <p>For these methods, the environment passed to the subprocess is the parent's environment merged with <code>env</code>.</p> <p>Additionally, any key in <code>env</code> whose value is <code>nil</code> is removed from the subprocess's environment.</p> <p>The subprocess's environment is effectively set to: <code>ENV.merge(env).compact</code></p> <p>For methods that also take an <code>options</code> hash, if <code>options[:unsetenv_others]</code> is truthy, then <code>ENV</code> is not passed to the subprocess's environment. The subprocess's environment is instead effectively set to <code>env.compact</code>.</p> <p>When using <code>options[:unsetenv_others]</code> be especially mindful about <code>PATH</code> and <code>HOME</code> environment variables since system and user scripts often depend on them being set.</p>"},{"location":"ruby/subprocesses/#redirection","title":"Redirection","text":"<p>Spawn, system and other subprocess starting commands takes several options for redirecting output. For instance, to map stderr in the subprocess to the parent processes stdout:</p> <pre><code>spawn('ls', :err =&gt; :out)\n</code></pre> <p>Using these options, the key is the stream (<code>:err</code> above) in the subprocess and the value (<code>:out</code> above) is the stream in the parent process.</p> <p>To redirect to a file map a stream to a filename:</p> <pre><code>system('echo \"1\\n2\\n3\"', :out =&gt; \"stdout.txt\")\n =&gt; true\nFile.read('stdout.txt')\n =&gt; \"1\\n2\\n3\\n\"\n</code></pre> <p>Or:</p> <pre><code>system('echo \"Error:\\nNOT FOUND\" &gt;&amp;2', :err =&gt; \"stderr.txt\")\n =&gt; true\nFile.read('stderr.txt')\n =&gt; \"Error:\\nNOT FOUND\\n\"\n</code></pre> <p>The same works for input:</p> <pre><code>File.write(\"name.txt\", \"John Smith\")\nsystem('read -p \"Name: \" username; echo \"You entered \\'$username\\'\"', in: 'name.txt')\nYou entered 'John Smith'\n =&gt; true\n</code></pre> <p>Specify open mode and permissions by specifying the file as an array:</p> <pre><code>system('echo \"Line 1\\nLine2\"', :out =&gt; ['stdout.txt', 'w', 0644]) # overwrite\n =&gt; true\nsystem('echo \"Line 3\\nLine4\"', :out =&gt; ['stdout.txt', 'a']) # append\n =&gt; true\nFile.read('stdout.txt')\n =&gt; \"Line 1\\nLine2\\nLine 3\\nLine4\\n\"\n</code></pre> <p>To redirect into an already open file:</p> <pre><code>file = open(\"output.txt\", \"w\")\nsystem('echo \"Line 1\\nLine 2\"', :out =&gt; file)\n =&gt; true\nfile.close\n =&gt; nil\nFile.read(\"output.txt\")\n =&gt; \"Line 1\\nLine 2\\n\"\n</code></pre> <p>To redirect into a Tempfile:</p> <pre><code>file = Tempfile.new('output.txt')\nbegin\n  system('echo \"Line 1\\nLine 2\"', :out =&gt; file)\n  file.close\n  File.read(file.path)\nensure\n  file.delete\nend\n =&gt; \"Line 1\\nLine 2\\n\"\n</code></pre> <p>To redirect to a pipe objects to capture output:</p> <pre><code>output, input = IO.pipe\nsystem('echo \"Line 1\\nLine 2\"', :out =&gt; input)\n =&gt; true\ninput.close\n =&gt; nil\noutput.read\n =&gt; \"Line 1\\nLine 2\\n\"\n</code></pre> <p>Pipes and asynchronous subprocesses allow us to do sophisticated things like processing output as it is produced in a streaming fashion.</p> <p>Multiple streams can be mapped a single destination by using an Array of stream names as the key of the redirect:</p> <pre><code>system('echo \"1\\n2\"; echo \"3\\n4\" &gt;&amp;2', [:out, :err] =&gt; \"out.txt\")\n =&gt; true\nFile.read('out.txt')\n =&gt; \"1\\n2\\n3\\n4\\n\"\n</code></pre> <p>To supress all output, redirect to /dev/null (using the device name given by <code>IO::NULL</code> for portability):</p> <pre><code>system('echo \"1\\n2\"; echo \"3\\n4\" &gt;&amp;2', [:out, :err] =&gt; IO::NULL)\n =&gt; true\n</code></pre>"},{"location":"ruby/subprocesses/#limits","title":"Limits","text":"<p>Sets boundaries for subprocesses: limit damage from buggy jobs that might eat up all available system resources.</p> <p>See Process.setrlimit</p> <ul> <li> <p>Process.spawn rlimit options sets these limits</p> <ul> <li>limit_cpu # seconds of CPU time the script can use</li> </ul> <ul> <li>rlimit_as # sets bound (in bytes) for address space made available to program</li> </ul> <ul> <li>Files open at a time, number of processes, etc.</li> </ul> <ul> <li>Pay attention to the platform compatibility information listed for each</li> </ul> </li> </ul> <ul> <li>There is an option to set soft limits and hard limits<ul> <li>Hard limits effects are both sudden and final usually resulting in the subprocess     being terminated</li> <li>If just one limit number is given, it is considered a hard limit:<ul> <li>:limit_cpu =&gt; 2</li> </ul> </li> <li>Soft limits raise a signal in the subprocess when the soft limit is hit (they can     be thought of as a warning to the subprocess):<ul> <li>A hard limit needs to be specified along with the hard limit, the first number is the soft limit and the second number is the hard limit:</li> <li>:limit_cpu = [1, 2]</li> </ul> </li> <li> <p>Example:</p> <pre><code>trap(\"XCPU\") do\n    puts \"Received SIGXCPU, shutting down\"\n    exit\nend\n</code></pre> </li> </ul> </li> </ul>"},{"location":"ruby/subprocesses/#open-pipe","title":"Open Pipe","text":"<ul> <li>Sense if being run in a console with $stdout.tty?</li> <li>Open an output stream and pipe to an external program</li> <li> <p>To do this, add a pipe to the beginning of the filename in an open call.  For example,   to pipe all output to a pager if you are running on an interactive console:</p> <pre><code>if $stdout.tty?\n  pager = open(\"| less\u201d, \"w\u201d)\n  at_exit { pager.close }\n  $stdout = pager\nend\n</code></pre> </li> </ul> <ul> <li>Make sure to close the pipe so the output is flushed in a timely fashion.</li> </ul>"},{"location":"ruby/subprocesses/#gems","title":"Gems","text":"<ul> <li>mixlib-shellout</li> <li>shell</li> <li>subprocess</li> <li>tty-command</li> </ul>"},{"location":"ruby/subprocesses/#references","title":"References","text":"<ul> <li>A Dozen (or so) Ways to Start Subprocesses in Ruby: Part 1</li> <li>A Dozen (or so) Ways to Start Subprocesses in Ruby: Part 2</li> <li>A Dozen (or so) Ways to Start Subprocesses in Ruby: Part 3</li> <li>When to use each method of launching a subprocess in Ruby</li> <li>Using the PTY Class to Test Interactive Apps in Ruby</li> <li>Stream processing of shell command results</li> </ul> <ul> <li>IO in Ruby</li> <li>The TTY demystified</li> <li>Signal</li> <li>Reentrancy</li> </ul> <ul> <li>Signals, Traps, and Rescues</li> <li>Caveats for implementing Signal.trap callbacks</li> <li>Signal handling in Ruby and its internals</li> <li>Signal handling and Ruby</li> <li>SignalException</li> <li>Signals Referenced in RubyTapas Episodes</li> </ul>"},{"location":"ruby/subprocesses/#subprocess-status","title":"Subprocess Status","text":""},{"location":"ruby/subprocesses/#kernel-system","title":"Kernel System","text":""},{"location":"ruby/subprocesses/#environment-isolation","title":"Environment Isolation","text":""},{"location":"ruby/subprocesses/#spawn","title":"Spawn","text":""},{"location":"ruby/subprocesses/#system","title":"System","text":""},{"location":"systemd/concepts/","title":"systemd","text":"<p>Handles all system state and init stuff during bootup and after.</p> <p>More of a system manager than a service manager. It reacts to system level events.</p> <p>{:toc}</p>"},{"location":"systemd/concepts/#what-is-systemd-made-of","title":"What is systemd made of?","text":"<ul> <li>systemctl</li> <li>journalctl</li> <li>init</li> <li>Process management</li> <li>Network management (networkd)</li> <li>Login management (logind)</li> <li>Logs (journald)</li> <li>Etc.</li> </ul>"},{"location":"systemd/concepts/#directory-and-files","title":"Directory and files","text":""},{"location":"systemd/concepts/#configuration-files","title":"Configuration files","text":"Path Description /etc/systemd Contains configuration files for systemd components. <p>Not all systemd componets are used on every distribution. For instance, in RHEL timesyncd is not used.</p> <p>Configuration files typically list ALL possible configuration items. Most will be commented out. These commented out entries show the (compiled in) default values for each setting.</p> <p>Get help on a particlar setting using the <code>man</code> command. Use the string <code>systemd-{file}</code> to get help for the settings in a particular config file. For example <code>man systemd-system.conf</code></p>"},{"location":"systemd/concepts/#unit-files","title":"Unit files","text":"Path Description <code>/lib/systemd/system</code> The default location for unit files that either come with the operating system or come with any packages that you might install <code>/usr/lib/systemd/system</code> Unit files from locally installed packages (e.g. via apt-get) <code>/run/systemd/system</code> Transient unit files that are generated <code>/etc/systemd/system</code> The location for user created unit files. Any unit files in this directory have have the same name as unit files in <code>/lib/systemd/system</code> take precedence. <p>A unit file is a plain text ini-style file that encodes information about a service, a socket, a device, a mount point, an automount point, a swap file or partition, a start- up target, a watched file system path, a timer controlled and supervised by systemd(1), a resource management slice or a group of externally created processes.</p> <p>Each file is a plain text file divided into sections, with configuration entries in the style key=value. Empty lines and lines starting with \"#\" or \";\" are ignored, which may be used for commenting.</p> <p>See <code>man systemd.unit</code> for full documentation.</p>"},{"location":"systemd/concepts/#executables","title":"Executables","text":"Path Description <code>/lib/systemd</code> Contains most of the systemd executables. There are symbolic links in either /bin or /usr/bin directories that point to some of the executable files here."},{"location":"systemd/concepts/#systemd-units","title":"Systemd units","text":"<p>A thing that systemd manages. systemd can manage these type of things:</p> Unit Type Description service These are the configuration files for services. They replace the old-fashioned init scripts that we had on the old System V (SysV) systems. socket Sockets can either enable communication between different system services or they can automatically wake up a sleeping service when it receives a connection request. slice Slice units are used when configuring cgroups. mount or automount These contain mount point information for filesystems that are controlled by systemd. Normally, they get created automatically, so you shouldn't have to do too much with them. target Target units are used during system startup, for grouping units and for providing well-known synchronization points. Akin to named runlevels timer Timer units are for scheduling jobs that run on a schedule. They replace the old cron system. path Path units are for services that can be started via path-based activation. swap Swap units contain information about your swap partitions. device Many system devices are automatically represented inside systemd by device units, which can be used to activate services when a given device exists in the file system. Device units are named after the <code>/sys/</code> and <code>/dev/</code> paths they control. scope Scopes units manage a set of system processes. Unlike service units, scope units manage externally created processes and do not fork off processes on its own. <p>A unit is described by options in a unit file. Unit file options are described by <code>man systend.unit</code>. This man page is an index that directs to the right man page for each parameter.</p>"},{"location":"systemd/concepts/#a-minimal-unit-file","title":"A minimal unit file","text":"<pre><code>[Unit]\nDescription=A very simple service created by James\n# bring up only after networking has come up\nAfter=network-up.target\n\n[Service]\n# the command for starting this service\nExecStart=/usr/local/bin/myservice\n\n[Install]\n# this unit should be running in order to consider the multi-user unit to be considered up.\nWantedBy=multi-user.target\n</code></pre>"},{"location":"systemd/concepts/#service-unit-file","title":"Service unit file","text":"<p>Service units are the equivalent of init scripts on the old SysV systems. Use them to configure services (aka daemons). A service can be pretty much anything that starts automatically and runs in the background.</p> <p>Service unit files are divided into three sections: <code>[Unit]</code>, <code>[Service]</code>, and <code>[Install]</code>.</p> Section Description <code>[Unit]</code> The <code>[Unit]</code> section contains generic options about the unit that is not dependent on the type of unit. These options are documented by <code>man systemd.unit</code>.The most used options are <code>Description</code>, <code>Documentation</code>, and <code>After</code>. <code>[Service]</code> The <code>[Service]</code> section contains options which can only be used in a service unit file. These options describe the service and the process it supervises. These options are documented by <code>man systemd.service</code>. <code>[Install]</code> The <code>[Install]</code> section describes what happens when the unit is enabled or disabled. This section is not interpreted by <code>systemd</code> during runtime; it is used by the <code>enable</code> and <code>disable</code> commands of the <code>systemctl</code> during installation of a unit.These options are documented by <code>man systemd.unit</code>."},{"location":"systemd/concepts/#socket-unit-file","title":"Socket unit file","text":""},{"location":"systemd/concepts/#path-unit-file","title":"Path unit file","text":""},{"location":"systemd/concepts/#enabled-vs-disabled","title":"Enabled vs. Disabled","text":"<p>An enabled unit is launched at bootup time. A disabled unit is not. Has nothing to do with the current running state of the unit.</p>"},{"location":"systemd/concepts/#active-vs-inactive","title":"Active vs. Inactive","text":"<p>An active unit is currently running. An inactive unit is not.</p>"},{"location":"systemd/concepts/#controlling-a-service","title":"Controlling a service","text":""},{"location":"systemd/concepts/#verify-the-status-of-a-service","title":"Verify the status of a service","text":""},{"location":"systemd/concepts/#starting-stopping-and-reloading-aservice","title":"Starting, stopping, and reloading a.service","text":""},{"location":"systemd/concepts/#enabling-and-disabling-a-service","title":"Enabling and disabling a service","text":""},{"location":"systemd/concepts/#kiling-a-service","title":"Kiling a service","text":""},{"location":"systemd/concepts/#masking-a-service","title":"Masking a service","text":""},{"location":"systemd/concepts/#journalctl","title":"journalctl","text":"Command Description"},{"location":"systemd/concepts/#user-level-units","title":"User Level Units","text":""},{"location":"systemd/systemctl/","title":"systemctl","text":"<p>The systemctl utility is used to introspect and control the state of the systemd system and service manager.</p> <p>It is used to view units and their status and enable or disable units.</p> <p>Some systemctl commands (like those that change configuration) require root privileges.</p> <p>The default command if none is specified is <code>list-units</code>.</p>"},{"location":"systemd/systemctl/#unit-commands","title":"Unit commands","text":"Command Description <code>list\u2011units</code> <code>list-units [PATTERN...]</code>List units that systemd currently has in memory.By default  only units which are active, have pending jobs, or have failed are shown.<code>--all</code> additionally shows units which are loaded but not active<code>--type</code>,  <code>--scope</code>, <code>--state</code> can be used to filter the units shown <code>list\u2011sockets</code> <code>list-sockets [PATTERN...]</code>List socket units currently in memory, ordered by listening address. If one or more PATTERNs are specified, only socket units matching one of them are shown. <code>list\u2011timers</code> <code>list-timers [PATTERN...]</code>List timer units currently in memory, ordered by the time they elapse next. If one or more PATTERNs are specified, only units matching one of them are shown. <code>start</code> <code>start PATTERN...</code>Start (activate) one or more units specified on the command line. <code>stop</code> <code>stop PATTERN...</code> Stop (deactivate) one or more units specified on the command line. <code>reload</code> <code>reload PATTERN...</code>Asks all units listed on the command line to reload their configuration. Note that this will reload the service-specific configuration, not the unit configuration file of systemd.If you want systemd to reload the configuration file of a unit, use the  <code>daemon-reload</code> command. <code>restart</code> <code>restart PATTERN...</code>Stop and then start one or more units specified on the command line. If the units are not running yet, they will be started. <code>try\u2011restart</code> <code>try-restart PATTERN...</code>Stop and then start one or more units specified on the command line if the units are running. This does nothing if units are not running. <code>reload\u2011or\u2011restart</code> <code>reload-or-restart PATTERN...</code>Reload one or more units if they support it. If not, stop and then start them instead. If the units are not running yet, they will be started. <code>try\u2011reload\u2011or\u2011restart</code> <code>try-reload-or-restart PATTERN...</code>Reload one or more units if they support it. If not, stop and then start them instead. This does nothing if the units are not running. <code>isolate</code> <code>isolate UNIT</code>Start the unit specified on the command line and its dependencies and stop all others, unless they have <code>IgnoreOnIsolate=yes</code>.If a unit name with no extension is given, an extension of \".target\" will be assumed. <code>kill</code> <code>kill PATTERN...</code>Send a signal to one or more processes of the unit. Use <code>--kill-who=</code> to select which process to kill. Use <code>--signal=</code> to select the signal to send. <code>freeze</code> <code>freeze PATTERN...</code>Freeze one or more units specified on the command line using cgroup freezer.Freezing the unit will cause all processes contained within the cgroup corresponding to the unit to be suspended. Being suspended means that unit's processes won't be scheduled to run on CPU until thawed.<code>freeze</code> is only supported on systems that use unified cgroup hierarchy. <code>thaw</code> <code>thaw PATTERN...</code>Thaw (unfreeze) one or more units specified on the command line.This is the inverse operation to the freeze command and resumes the execution of processes in the unit's cgroup. <code>is\u2011active</code> <code>is-active PATTERN...</code>Check whether any of the specified units are active (i.e. running). Returns an exit code <code>0</code> if at least one is active, or non-zero otherwise. Unless <code>--quiet</code> is specified, this will also print the current unit state to standard output. <code>is\u2011failed</code> <code>is-failed PATTERN...</code>Check whether any of the specified units are in a \"failed\" state. Returns an exit code 0 if at least one has failed, non-zero otherwise. Unless --quiet is specified, this will also print the current unit state to standard output. <code>status</code> <code>status [PATTERN...[PID...]]</code>Show terse runtime status information about one or more units, followed by most recent log data from the journal. If no units are specified, show system status.Show terse runtime status information about one or more units including: name, description, unit file path, enabled/disabled state, vendor preset, and running state.If combined with <code>--all</code>, also show the status of all units (subject to limitations specified with <code>-t</code>). If a PID is passed, show information about the unit the process belongs to. <code>show</code> <code>show [PATTERN...\\|JOB...]</code>Show properties of one or more units, jobs, or the manager itself. If no argument is specified, properties of the manager will be shown. If a unit name is specified, properties of the unit are shown, and if a job ID is specified, properties of the job are shown.By default, empty properties are suppressed. Use<code>--all</code> to show those too. To select specific properties to show, use --property=.This command is intended to be used whenever computer-parsable output is required. Use <code>status</code> if you are looking for formatted human-readable output. <code>cat</code> <code>cat PATTERN...</code>Show backing files of one or more units. Prints the \"fragment\" and \"drop-ins\" (source files) of units. Each file is preceded by a comment which includes the file name. Note that this shows the contents of the backing files on disk, which may not match the system manager's understanding of these units if any unit files were updated on disk and the <code>daemon-reload</code> command wasn't issued since. <code>set\u2011property</code> <code>set-property UNIT PROPERTY=VALUE...</code>Set the specified unit properties at runtime where this is supported. This allows changing configuration parameter properties such as resource control settings at runtime. Not all properties may be changed at runtime, but many resource control settings. The changes are applied immediately, and stored on disk for future boots, unless <code>--runtime</code> is passed, in which case the settings only apply until the next reboot. The syntax of the property assignment follows closely the syntax of assignments in unit files.Example: <code>systemctl set-property foobar.service CPUShares=777</code> <code>help</code> <code>help PATTERN...\\|PID...</code>Show manual pages for one or more units, if available. If a PID is given, the manual pages for the unit the process belongs to are shown. <code>restart\u2011failed</code> <code>reset-failed [PATTERN...]</code>Reset the \"failed\" state of the specified units, or if no unit name is passed, reset the state of all units. When a unit fails in some way (i.e. process exiting with non-zero error code, terminating abnormally or timing out), it will automatically enter the \"failed\" state and its exit code and status is recorded for introspection by the administrator until the service is stopped/re-started or reset with this command. <code>list\u2011dependencies</code> list-dependencies [UNIT]Shows units required and wanted by the specified unit. This recursively lists units following the Requires=, Requisite=, ConsistsOf=, Wants=, BindsTo= dependencies. If no unit is specified, default.target is implied.By default, only target units are recursively expanded. When <code>--all</code> is passed, all other units are recursively expanded as well.Options <code>--reverse</code>, <code>--after</code>, <code>--before</code> may be used to change what types of dependencies are shown."},{"location":"systemd/systemctl/#unit-file-commands","title":"Unit file commands","text":"Command Description <code>list\u2011unit\u2011files</code> <code>list-unit-files [PATTERN...]</code>List unit files installed on the system, in combination with their enablement state (as reported by <code>is-enabled</code>) <code>enable</code> <code>enable UNIT...</code>, <code>enable PATH...</code>Enable one or more units or unit instances.Note that this does not have the effect of also starting any of the units being enabled. If this is desired, combine this command with the <code>--now</code> switch, or invoke start with appropriate arguments later.This command will print the file system operations executed. This output may be suppressed by passing <code>--quiet</code>.Depending on whether <code>--system</code>, <code>--user</code>, <code>--runtime</code>, or <code>--global</code> is specified, this enables the unit for the system, for the calling user only, for only this boot of the system, or for all future logins of all users. <code>disable</code> <code>disable UNIT...</code>Disables one or more units.This command expects valid unit names only, it does not accept paths to unit files.Note that this command does not implicitly stop the units that are being disabled. If this is desired, either combine this command with the <code>--now</code> switch, or invoke the stop command with appropriate arguments later.This command will print information about the file system operations executed. This output may be suppressed by passing <code>--quiet</code>.This command honors <code>--system</code>, <code>--user</code>, <code>--runtime</code> and <code>--global</code> in a similar way as <code>enable</code>. <code>reenable</code> <code>reenable UNIT...</code>Reenable one or more units, as specified on the command line. This is a combination of <code>disable</code> and <code>enable</code> and is useful to reset the symlinks a unit file is enabled with to the defaults configured in its \"[Install]\" section. This command expects a unit name only, it does not accept paths to unit files. <code>preset</code> <code>preset UNIT...</code>Reset the enable/disable status one or more unit files, as specified on the command line, to the defaults configured in the preset policy files. This has the same effect as disable or enable, depending how the unit is listed in the preset files.Use --preset-mode= to control whether units shall be enabled and disabled, or only enabled, or only disabled. <code>preset\u2011all</code> <code>preset-all</code>Resets all installed unit files to the defaults configured in the preset policy file.Use <code>--preset-mode=</code> to control whether units shall be enabled and disabled, or only enabled, or only disabled. <code>is\u2011enabled</code> <code>is-enabled UNIT...</code>Checks whether any of the specified unit files are enabled (as with enable). Returns an exit code <code>0</code> if at least one is enabled, non-zero otherwise. Prints the current enable status. To suppress this output, use <code>--quiet</code>. To show installation targets, use <code>--full</code>. <code>mask</code> <code>mask UNIT...</code>Mask one or more units, as specified on the command line. This will link these unit files to /dev/null, making it impossible to start them. This is a stronger version of <code>disable</code>, since it prohibits all kinds of activation of the unit, including enablement  and manual activation. <code>umask</code> <code>unmask UNIT...</code>Unmask one or more unit files, as specified on the command line. This will undo the effect of <code>mask</code>. This command expects valid unit names only, it does not accept unit file paths. <code>link</code> <code>link PATH...</code>Link a unit file that is not in the unit file search paths into the unit file search path. This command expects an absolute path to a unit file. The effect of this may be undone with <code>disable</code>.The effect of this command is that a unit file is made available for commands such as <code>start</code>, even though it is not installed directly in the unit search path.The file system where the linked unit files are located must be accessible when systemd is started (e.g. anything underneath /home or /var is not allowed, unless those directories are located on the root file system). <code>revert</code> <code>revert UNIT...</code>Revert one or more unit files to their vendor versions. This command removes drop-in configuration files that modify the specified units, as well as any user-configured unit file that overrides a matching vendor supplied unit file.Effectively, this command may be used to undo all changes made with systemctl edit, <code>systemctl set-property</code> and <code>systemctl mask</code> and puts the original unit file with its settings back in effect. <code>add\u2011wants</code> <code>add-wants TARGET UNIT...</code>, <code>add-requires TARGET UNIT...</code>Adds \"Wants=\" or \"Requires=\" dependencies, respectively, to the specified TARGET for one or more units.This command honors <code>--system</code>, <code>--user</code>, <code>--runtime</code> and <code>--global</code> in a way similar to enable. <code>edit</code> <code>edit UNIT...</code>Edit a drop-in snippet or a whole replacement file if <code>--full</code> is specified, to extend or override the specified unit.Depending on whether <code>--system</code> (the default), <code>--user</code>, or <code>--global</code> is specified, this  command creates a drop-in file for each unit either for the system, for the calling  user, or for all futures logins of all users. Then, the editor is invoked on temporary files which will be written to the real location if the editor exits successfully.If <code>--full</code> is specified, this will copy the original units instead of creating drop-in  files. If <code>--force</code> is specified and any units do not already exist, new unit files will be  opened for editing. If <code>--runtime</code> is specified, the changes will be made temporarily in <code>/run</code> and they will be lost on the next reboot.If the temporary file is empty upon exit, the modification of the related unit is canceled.After the units have been edited, systemd configuration is reloaded (in a way that is  equivalent to <code>daemon-reload</code>). <code>get\u2011default</code> <code>get-default</code>Return the default target to boot into. This returns the target unit name default.target is aliased (symlinked) to. <code>set\u2011default</code> <code>set-default TARGET</code>Set the default target to boot into. This sets (symlinks) the default.target alias to the given target unit."},{"location":"systemd/systemctl/#machine-commands","title":"Machine commands","text":"Command Description <code>list\u2011machines</code> <code>list-machines [PATTERN...]</code>List the host and all running local containers with their state. If one or more PATTERNs are specified, only containers matching one of them are shown."},{"location":"systemd/systemctl/#job-commands","title":"Job commands","text":"Command Description <code>list\u2011jobs</code> <code>list-jobs [PATTERN...]</code>List jobs that are in progress. If one or more PATTERNs are specified, only jobs for units matching one of them are shown.When combined with <code>--after</code> or <code>--before</code> the list is augmented with information on which other job each job is waiting for, and which other jobs are waiting for it, see above. <code>cancel</code> <code>cancel JOB...</code>Cancel one or more jobs specified on the command line by their numeric job IDs. If no job ID is specified, cancel all pending jobs."},{"location":"systemd/systemctl/#environment-commands","title":"Environment commands","text":"Command Description <code>show\u2011environment</code> <code>show-environment</code>Dump the systemd manager environment block. This is the environment block that is passed to all processes the manager spawns. The environment block will be dumped in straight-forward form suitable for sourcing into most shells. <code>set\u2011environment</code> <code>set-environment VARIABLE=VALUE...</code>Set one or more systemd manager environment variables, as specified on the command line. <code>unset\u2011environment</code> <code>unset-environment VARIABLE...</code>Unset one or more systemd manager environment variables. If only a variable name is specified, it will be removed regardless of its value. If a variable and a value are specified, the variable is only removed if it has the specified value. <code>import\u2011environment</code> <code>import-environment [VARIABLE...]</code>Import all, one or more environment variables set on the client into the systemd manager environment block. If no arguments are passed, the entire environment block is imported. Otherwise, a list of one or more environment variable names should be passed, whose client-side values are then imported into the manager's environment block."},{"location":"systemd/systemctl/#manager-lifecycle-commands","title":"Manager lifecycle commands","text":"Command Description <code>daemon\u2011reload</code> Reload the systemd manager configuration. This will rerun all generators, reload all unit files, and recreate the entire dependency tree. While the daemon is being reloaded, all sockets systemd listens on behalf of user configuration will stay accessible.This command should not be confused with the <code>reload</code> command. <code>daemon\u2011exec</code> <code>daemon-reexec</code>Reexecute the systemd manager. This will serialize the manager state, reexecute the process and deserialize the state again. This command is of little use except for debugging and package upgrades. Sometimes, it might be helpful as a heavy-weight <code>daemon-reload</code>. While the daemon is being reexecuted, all sockets systemd listening on behalf of user configuration will stay accessible."},{"location":"systemd/systemctl/#system-commands","title":"System commands","text":"Command Description <code>is\u2011system\u2011running</code> <code>is-system-running</code>Checks whether the system is operational. This returns success (exit code 0) when the system is fully up and running, specifically not in startup, shutdown or maintenance mode, and with no failed services. Failure is returned otherwise (exit code non-zero).In addition, the current state is printed in a short string to standard output, see the table below. Use <code>--quiet</code> to suppress this output. <code>default</code> <code>default</code>Enter default mode. This is equivalent to <code>systemctl isolate default.target</code>. This operation is blocking by default, use <code>--no-block</code> to request asynchronous behavior. <code>rescue</code> <code>rescue</code>Enter rescue mode. This is equivalent to <code>systemctl isolate rescue.target</code>. This operation is blocking by default, use<code>--no-block</code> to request asynchronous behavior. <code>emergency</code> <code>emergency</code>Enter emergency mode. This is equivalent to <code>systemctl isolate emergency.target</code>. This operation is blocking by default, use <code>--no-block</code> to request asynchronous behavior. <code>halt</code> <code>halt</code>Shut down and halt the system. This is mostly equivalent to <code>systemctl start halt.target --job-mode=replace-irreversibly --no-block</code>, but also prints a wall message to all users. This command is asynchronous; it will return after the halt operation is enqueued, without waiting for it to complete.Note that this operation will simply halt the OS kernel after shutting down, leaving the hardware powered on. Use <code>systemctl poweroff</code> for powering off the system. <code>poweroff</code> <code>poweroff</code>Shut down and power-off the system. This is mostly equivalent to <code>systemctl start poweroff.target --job-mode=replace-irreversibly --no-block</code>, but also prints a wall message to all users. This command is asynchronous; it will return after the power-off operation is enqueued, without waiting for it to complete.If combined with <code>--force</code>, shutdown of all running services is skipped, however all processes are killed and all file systems are unmounted or mounted read-only, immediately followed by the powering off.If <code>--force</code> is specified twice, the operation is immediately executed without terminating any processes or unmounting any file systems. This may result in data loss. Note that when <code>--force</code> is specified twice the power-off operation is executed by systemctl itself, and the system manager is not contacted. This means the command should succeed even when the system manager has crashed. <code>reboot</code> <code>reboot [arg]</code>Shut down and reboot the system. This is mostly equivalent to <code>systemctl start reboot.target --job-mode=replace-irreversibly --no-block</code>, but also prints a wall message to all users. This command is asynchronous; it will return after the reboot operation is enqueued, without waiting for it to complete.<code>--force</code> works the same as the <code>poweroff</code> command.If the optional argument arg is given, it will be passed as the optional argument to the reboot(2) system call. The value is architecture and firmware specific. As an example, \"recovery\" might be used to trigger system recovery, and \"fota\" might be used to trigger a \u201cfirmware over the air\u201d update. <code>kexec</code> <code>kexec</code>Shut down and reboot the system via <code>kexec</code>. This is equivalent to <code>systemctl start kexec.target --job-mode=replace-irreversibly --no-block</code>. This command is asynchronous; it will return after the reboot operation is enqueued, without waiting for it to complete.If combined with <code>--force</code>, shutdown of all running services is skipped, however all processes are killed and all file systems are unmounted or mounted read-only, immediately followed by the reboot. <code>exit</code> <code>exit [EXIT_CODE]</code>Ask the service manager to quit. This is only supported for user service managers (i.e. in conjunction with the <code>--user</code> option) or in containers and is equivalent to <code>poweroff</code> otherwise. This command is asynchronous; it will return after the exit operation is enqueued, without waiting for it to complete.The service manager will exit with the specified exit code, if EXIT_CODE is passed. <code>switch\u2011root</code> <code>switch-root ROOT [INIT]</code>Switches to a different root directory and executes a new system manager process below it. Thisis intended for usage in initial RAM disks (\"initrd\"), and will transition from the initrd's system manager process (a.k.a. \"init\" process) to the main system manager process which is loaded from the actual host volume. <code>suspend</code> <code>suspend</code>Suspend the system. This will trigger activation of the special target unit suspend.target. This command is asynchronous, and will return after the suspend operation is successfully enqueued. It will not wait for the suspend/resume cycle to complete. <code>hibernate</code> <code>hibernate</code>Hibernate the system. This will trigger activation of the special target unit hibernate.target. This command is asynchronous, and will return after the hibernation operation is successfully enqueued. It will not wait for the hibernate/thaw cycle to complete. <code>hybrid\u2011sleep</code> <code>hybrid-sleep</code>Hibernate and suspend the system. This will trigger activation of the special target unit <code>hybrid-sleep.target</code>. This command is asynchronous, and will return after the hybrid sleep operation is successfully enqueued. It will not wait for the sleep/wake-up cycle to complete."}]}